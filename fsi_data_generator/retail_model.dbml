//
// ENTERPRISE
//

Table "enterprise"."permissions" {
  "enterprise_permission_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each permission"]
  "permission_name" VARCHAR(50) [not null, note: "Unique name describing the permission (e.g., read_balances)"]

  note: "Defines all possible permission types that can be granted in the system"
}

Enum "enterprise"."currency_code" {
  USD [note: 'United States Dollar']
  EUR [note: 'Euro']
  GBP [note: 'British Pound Sterling']
  JPY [note: 'Japanese Yen']
  AUD [note: 'Australian Dollar']
  CAD [note: 'Canadian Dollar']
  CHF [note: 'Swiss Franc']
  CNY [note: 'Chinese Yuan Renminbi']
  HKD [note: 'Hong Kong Dollar']
  NZD [note: 'New Zealand Dollar']
  SEK [note: 'Swedish Krona']
  NOK [note: 'Norwegian Krone']
  DKK [note: 'Danish Krone']
  SGD [note: 'Singapore Dollar']
  MXN [note: 'Mexican Peso']
  BRL [note: 'Brazilian Real']
  INR [note: 'Indian Rupee']
  RUB [note: 'Russian Ruble']
  ZAR [note: 'South African Rand']
  TRY [note: 'Turkish Lira']
  KRW [note: 'South Korean Won']
  PLN [note: 'Polish Zloty']
  ILS [note: 'Israeli Shekel']
  AED [note: 'United Arab Emirates Dirham']
  SAR [note: 'Saudi Riyal']
  THB [note: 'Thai Baht']
  MYR [note: 'Malaysian Ringgit']
  IDR [note: 'Indonesian Rupiah']
  PHP [note: 'Philippine Peso']
  ARS [note: 'Argentine Peso']
}

Enum "enterprise"."identifier_scheme" {
  IBAN [note: 'International Bank Account Number - standard international account identifier used in cross-border transactions']
  BIC [note: 'Bank Identifier Code (also known as SWIFT code) - identifies banks in international transactions']
  ACCOUNT_NUMBER [note: 'Standard bank account number used within a specific institution']
  ROUTING_NUMBER [note: 'ABA routing number used in US banking system']
  SORT_CODE [note: 'Bank sort code used in UK and Ireland banking systems']
  CREDIT_CARD [note: 'Credit card number']
  CLABE [note: 'Banking standardization code used in Mexico']
  BSB [note: 'Bank-State-Branch number used in Australia and South Pacific']
  IFSC [note: 'Indian Financial System Code used in India']
  CNAPS [note: 'China National Advanced Payment System code']
  LEI [note: 'Legal Entity Identifier - global standard for identifying financial entities']
  TAX_ID [note: 'Tax identification number']
  CIF [note: 'Customer Information File number - internal bank identifier']
  DDA [note: 'Demand Deposit Account number']
  PROPRIETARY [note: 'Custom identification scheme specific to an institution']
  PASSPORT [note: 'Passport number for identity verification']
  DRIVERS_LICENSE [note: 'Driver\'s license number for identity verification']
  NATIONAL_ID [note: 'National identification number']
  OTHER [note: 'Other identification scheme not covered by standard categories']
}

Table "enterprise"."account_identifiers" {
  "enterprise_account_identifier_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each account identifier entry"]
  "enterprise_account_id" INTEGER [not null, ref: > enterprise.accounts.enterprise_account_id, note: "References the main account"]
  "identification" VARCHAR(256) [not null, note: "The actual identifier value"]
  "scheme_name" enterprise.identifier_scheme [not null, note: "Naming scheme for the identifier"]
  "name" VARCHAR(350) [note: "Optional display name for this identifier"]
  "lei" VARCHAR(20) [note: "Legal Entity Identifier (if applicable)"]
  "secondary_identification" VARCHAR(34) [note: "Additional identification value (if applicable)"]

  note: "Stores various identifiers associated with accounts, supports multiple identification schemes"
}

Enum "enterprise"."citizenship_status" {
  US_CITIZEN [note: 'United States citizen']
  US_PERMANENT_RESIDENT [note: 'Lawful permanent resident of the United States (Green Card holder)']
  US_TEMPORARY_RESIDENT [note: 'Non-immigrant with temporary authorization to reside in the United States']
  NON_RESIDENT_ALIEN [note: 'Foreign individual without US residency but subject to US tax requirements']
  FOREIGN_NATIONAL [note: 'Citizen of a foreign country with no US immigration status']
  DUAL_CITIZEN_US [note: 'Holds US citizenship and citizenship in another country']
  REFUGEE_ASYLEE [note: 'Individual granted refuge or asylum in the United States']
  TEMPORARY_PROTECTED_STATUS [note: 'Individual from a designated country granted temporary protected status']
  DACA_RECIPIENT [note: 'Recipient of Deferred Action for Childhood Arrivals']
  UNDOCUMENTED [note: 'Individual residing in the country without formal immigration status']
  NOT_SPECIFIED [note: 'Citizenship status not provided or specified']
}

Enum "enterprise"."legal_structure" {
  SOLE_PROPRIETORSHIP [note: 'Business owned and operated by a single individual with no legal distinction between the owner and the business']
  GENERAL_PARTNERSHIP [note: 'Business arrangement where two or more individuals share ownership and liability']
  LIMITED_PARTNERSHIP [note: 'Partnership with both general partners and limited partners who have limited liability']
  LIMITED_LIABILITY_PARTNERSHIP [note: 'Partnership where all partners have limited liability protection']
  LIMITED_LIABILITY_COMPANY [note: 'Hybrid entity combining characteristics of corporations and partnerships/sole proprietorships']
  C_CORPORATION [note: 'Legal entity separate from its owners with limited liability for shareholders']
  S_CORPORATION [note: 'Corporation that passes income, losses, deductions, and credits to shareholders for tax purposes']
  PROFESSIONAL_CORPORATION [note: 'Corporation for licensed professionals like doctors, lawyers, and accountants']
  NONPROFIT_CORPORATION [note: 'Corporation organized for purposes other than generating profit']
  BENEFIT_CORPORATION [note: 'For-profit entity with a public benefit purpose in addition to profit']
  COOPERATIVE [note: 'Business owned and operated by its members for their mutual benefit']
  JOINT_VENTURE [note: 'Business arrangement where two or more parties agree to pool resources for a specific task']
  TRUST [note: 'Legal arrangement where one party holds assets for the benefit of another']
  ESTATE [note: 'Legal entity created upon a person\'s death to distribute their assets']
  ASSOCIATION [note: 'Group of individuals who join together for a common purpose']
  GOVERNMENT_ENTITY [note: 'Organizations run by federal, state, or local government']
  FOREIGN_ENTITY [note: 'Entity formed under the laws of a different country/jurisdiction']
  NOT_APPLICABLE [note: 'Used when the party is an individual or the legal structure is not relevant']
  OTHER [note: 'Used for legal structures not covered by the other options']
}

Enum "enterprise"."marital_status" {
  SINGLE [note: 'Never been married']
  MARRIED [note: 'Currently in a legally recognized marriage']
  DOMESTIC_PARTNERSHIP [note: 'In a registered domestic partnership or civil union']
  SEPARATED [note: 'Legally separated but not divorced']
  DIVORCED [note: 'Previously married, now legally divorced']
  WIDOWED [note: 'Previously married, spouse is deceased']
  NOT_SPECIFIED [note: 'Marital status not provided or specified']
}

Enum "enterprise"."party_type" {
  INDIVIDUAL [note: 'A natural person']
  ORGANIZATION [note: 'A business entity, group, or institution']
}

Enum "enterprise"."party_status" {
  ACTIVE [note: 'Party is currently active and in good standing']
  INACTIVE [note: 'Party is temporarily inactive']
  PENDING [note: 'Party is in process of being established']
  SUSPENDED [note: 'Party has been suspended due to compliance or other issues']
  DECEASED [note: 'Individual party is deceased']
  DISSOLVED [note: 'Organization has been legally dissolved']
}

Enum "enterprise"."frequency" {
  DAILY [note: 'Once per day']
  WEEKLY [note: 'Once per week']
  BI_WEEKLY [note: 'Every two weeks']
  SEMI_MONTHLY [note: 'Twice per month']
  MONTHLY [note: 'Once per month']
  QUARTERLY [note: 'Every three months']
  SEMI_ANNUALLY [note: 'Twice per year']
  ANNUALLY [note: 'Once per year']
  CUSTOM [note: 'Custom schedule not following standard periods']
  IRREGULAR [note: 'No regular schedule']
  ONE_TIME [note: 'Single occurrence, not repeated']
  OTHER [note: 'Frequency not covered by standard categories']
}

Table "enterprise"."parties" {
  "enterprise_party_id" SERIAL [pk, increment, note: "Unique identifier for each party"]
  "party_number" VARCHAR(35) [note: "Alternative reference number for the party"]
  "party_type" enterprise.party_type [not null, note: "Type of party (individual or organization)"]
  "name" VARCHAR(350) [not null, note: "Name of the party"]
  "full_business_legal_name" VARCHAR(350) [note: "Complete legal name for business entities"]
  "legal_structure" enterprise.legal_structure [note: "Legal structure of the organization"]
  "lei" VARCHAR(20) [note: "Legal Entity Identifier for organizations"]
  "beneficial_ownership" BOOLEAN [note: "Indicates if this party has beneficial ownership"]
  "email_address" VARCHAR(256) [note: "Primary email contact"]
  "phone" VARCHAR(30) [note: "Primary phone contact"]
  "mobile" VARCHAR(30) [note: "Mobile phone contact"]
  "date_of_birth" DATE [note: "Party's date of birth (for individuals)"]
  "ssn" VARCHAR(11) [note: "Social Security Number (for US individuals)"]
  "marital_status" enterprise.marital_status [note: "Marital status (for individuals)"]
  "citizenship_status" enterprise.citizenship_status [note: "Citizenship or residency status (for individuals)"]
  "party_status" enterprise.party_status [not null, default: "ACTIVE", note: "Current status of the party"]

  note: "Stores information about individuals and organizations that interact with accounts, now with additional common personal attributes for individuals"
}

Enum "enterprise"."party_relationship_type" {
  POWER_OF_ATTORNEY [note: 'One party is legally authorized to act on behalf of the other party']
  GUARDIAN [note: 'One party is legally responsible for the care of the other party']
  TRUSTEE [note: 'One party manages assets or property for the benefit of the other party']
  BENEFICIARY [note: 'One party is designated to receive benefits or assets from the other party']
  EXECUTOR [note: 'One party is appointed to administer the estate of the deceased other party']
  CUSTODIAN [note: 'One party has custody of assets for a minor or incapacitated other party']
  AUTHORIZED_USER [note: 'One party is authorized to use accounts owned by the other party']
  BUSINESS_PARTNER [note: 'Parties have a formal business partnership relationship']
  SPOUSE [note: 'Parties are legally married']
  DEPENDENT [note: 'One party is financially dependent on the other party']
  CO_SIGNER [note: 'One party has co-signed a loan or financial obligation with the other party']
  EMPLOYER_EMPLOYEE [note: 'One party employs the other party']
  AGENT [note: 'One party acts as an agent or representative for the other party']
  PARENT_CHILD [note: 'One party is the parent of the other party']
  SIBLING [note: 'Parties are siblings']
  CORPORATE_OFFICER [note: 'One party is an officer of the corporate other party']
  MEMBER [note: 'One party is a member of the organization other party']
  OWNER [note: 'One party owns or has controlling interest in the other party']
  OTHER [note: 'Relationship type not covered by other categories']
}

Table "enterprise"."party_relationships" {
  "enterprise_party_relationship_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each relationship record"]
  "enterprise_party_id" INTEGER [not null, ref: > enterprise.parties.enterprise_party_id, note: "References the to the party being represented or acted upon"]
  "related_party_id" INTEGER [not null, ref: > enterprise.parties.enterprise_party_id, note: "References the party taking the role e.g. power of attorney, guardian, etc."]
  "relationship_type" enterprise.party_relationship_type [note: "Describes the role of the related party relative to the enterprise party"]
  "priority" INT [note: "Order of precedence for the relationship type (lower number = higher priority)"]

  note: "Defines the role of related party acts to the the enterprise party, such as power of attorney, beneficiary designations, etc."
}

Enum "enterprise"."address_relationship_type" {
  RESIDENTIAL [note: 'Primary living address for an individual']
  MAILING [note: 'Address used for receiving mail and correspondence']
  BUSINESS [note: 'Primary business or work location']
  BRANCH [note: 'Secondary business location or branch office']
  BILLING [note: 'Address used for billing purposes']
  SHIPPING [note: 'Address used for shipping or delivery']
  LEGAL [note: 'Official legal address for documentation or registration']
  SEASONAL [note: 'Temporary or seasonal residence']
  VACATION [note: 'Vacation or second home']
  PREVIOUS [note: 'Former address no longer in use']
  OTHER [note: 'Address relationship that does not fit standard categories']
}

Table "enterprise"."party_entity_addresses" {
  "enterprise_party_entity_address_id" SERIAL [pk, increment, note: "Unique identifier for party-entity address association"]
  "enterprise_party_id" INTEGER [not null, ref: > enterprise.parties.enterprise_party_id, note: "Reference to the party"]
  "enterprise_address_id" INTEGER [not null, ref: > enterprise.addresses.enterprise_address_id, note: "Reference to the entity address"]
  "relationship_type" enterprise.address_relationship_type [note: "Type of relationship between the party and the address"]

  note: "Links parties to entity addresses with a defined relationship"
}

Table "enterprise"."addresses" {
  "enterprise_address_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each address record"]
  "address_type" enterprise.address_type [note: "Type of address (e.g., home, work, mailing)"]
  "department" VARCHAR(70) [note: "Department name for organizational addresses"]
  "sub_department" VARCHAR(70) [note: "Sub-department name for organizational addresses"]
  "street_name" VARCHAR(140) [note: "Street name component of the address"]
  "building_number" VARCHAR(16) [note: "Building or house number"]
  "building_name" VARCHAR(140) [note: "Name of building if applicable"]
  "floor" VARCHAR(70) [note: "Floor number or description"]
  "room" VARCHAR(70) [note: "Room identifier if applicable"]
  "unit_number" VARCHAR(16) [note: "Apartment or unit number"]
  "post_box" VARCHAR(16) [note: "Post office box number"]
  "town_location_name" VARCHAR(140) [note: "Name of area within town"]
  "district_name" VARCHAR(140) [note: "District or county"]
  "care_of" VARCHAR(140) [note: "Person to whose attention mail should be sent"]
  "post_code" VARCHAR(16) [note: "Postal or zip code"]
  "town_name" VARCHAR(140) [note: "City or town name"]
  "country_sub_division" VARCHAR(35) [note: "State, province, or region"]
  "country" VARCHAR(2) [note: "Two-letter country code"]

  note: "Central repository for address information used across the system"
}

Enum "enterprise"."address_type" {
  "HOME" [note: "Residential address"]
  "WORK" [note: "Business or workplace address"]
  "MAIL" [note: "Mailing address"]
  "BILL" [note: "Billing address"]
  "SHIP" [note: "Shipping address"]
}

Enum "enterprise"."account_status" {
  ACTIVE [note: 'Account is in good standing and fully operational']
  PENDING [note: 'Account creation is in progress but not yet active']
  INACTIVE [note: 'Account exists but is not currently in use']
  SUSPENDED [note: 'Account temporarily disabled due to policy issues']
  DORMANT [note: 'Account with no activity for an extended period']
  FROZEN [note: 'Account with temporarily restricted transactions']
  CLOSED [note: 'Account permanently terminated']
  ARCHIVED [note: 'Closed account retained for record-keeping']
}

Table "enterprise"."accounts" {
  "enterprise_account_id" SERIAL [pk, increment, note: "Unique identifier for each enterprise account"]
  "opened_date" TIMESTAMPTZ [note: "When the enterprise account was created, typically coincides with first LOB account."]
  "status" enterprise.account_status [not null, note: "Current status of the account. When set to 'CLOSED', all linked LOB accounts must be closed or in a terminal state."]
  "status_update_date_time" TIMESTAMPTZ [not null, note: "When the status was last updated. Updates here may trigger required status changes in linked LOB accounts."]
  "account_category" VARCHAR(40) [note: "Customer defined category of account (e.g., personal, business, retirement)"]
  "description" VARCHAR(35) [note: "Customer defined description of the account"]

  note: "Root account record in the account hierarchy. All other account types (consumer, mortgage, credit) are children of an enterprise account and cannot exist without it. The single source of truth for account ownership and access control."
}

Table "enterprise"."account_ownership" {
  "enterprise_account_ownership_id" SERIAL [pk, increment, note: "Auto-incrementing, unique identifier for each account ownership record"]
  "enterprise_account_id" INTEGER [not null, ref: > enterprise.accounts.enterprise_account_id, note: "References the enterprise account being owned. When ownership ends, access to all linked LOB accounts is terminated."]
  "enterprise_party_id" INTEGER [not null, ref: > enterprise.parties.enterprise_party_id, note: "References the party who owns the account. Party must exist before ownership can be established."]

  note: "The only table that controls account access rights. Creates the mandatory link between parties and accounts. Any query checking account access or ownership must start with this table. No direct relationships exist between parties and other account tables."
}

enum "enterprise"."associate_status" {
  Active [note: 'Associate is currently employed and working.']
  Inactive [note: 'Associate\'s employment relationship exists but they are not currently working (e.g., extended leave).']
  PendingStart [note: 'Associate has accepted an offer but has not yet started working.']
  OnLeave [note: 'Associate is on an approved leave of absence (e.g., medical, parental, sabbatical).']
  Terminated [note: 'Associate\'s employment has been ended.']
}

enum "enterprise"."relationship_status" {
  Employee [note: 'Full-time or part-time worker directly employed by the enterprise.']
  Contractor [note: 'Independent worker engaged for a specific project or time period.']
  Consultant [note: 'External advisor providing specialized expertise.']
  Intern [note: 'Temporary position for students or trainees to gain experience.']
  Temporary [note: 'Short-term worker hired through an agency or directly for seasonal or limited duration work.']
}

Table "enterprise"."associates" {
  "enterprise_associate_id" SERIAL [pk, increment, note: 'Unique identifier for each associate.']
  "first_name" VARCHAR(255) [note: 'Associate\'s first name.']
  "last_name" VARCHAR(255) [note: 'Associate\'s last name.']
  "email" VARCHAR(255) [unique, note: 'Associate\'s unique email address.']
  "phone_number" VARCHAR(30) [note: 'Associate\'s phone number.']
  "hire_date" DATE [note: 'Date the associate was hired.']
  "status" enterprise.associate_status [note: 'Current status of the associate.']
  "release_date" DATE [null, note: 'Date the associate was released from employment, if applicable.']
  "job_title" VARCHAR(255) [note: 'Associate\'s functional job title (e.g., Teller, Loan Officer).']
  "officer_title" VARCHAR(50) [note: 'Associate\'s formal officer title (e.g., VP, MD), if applicable.']
  "enterprise_department_id" INTEGER [ref: > enterprise.departments.enterprise_department_id, note: 'Foreign key referencing the department the associate belongs to.']
  "manager_id" INTEGER [ref: > enterprise.associates.enterprise_associate_id, note: 'Foreign key referencing the associate\'s manager.']
  "salary" decimal(10, 2) [note: 'Associate\'s annual salary.']
  "relationship_type" enterprise.relationship_status [note: 'Type of relationship with the company.']
  "street_address" VARCHAR(255) [note: 'Associate\'s street address.']
  "city" VARCHAR(255) [note: 'Associate\'s city of residence.']
  "state" VARCHAR(2) [note: 'Associate\'s state of residence.']
  "post_code" VARCHAR(10) [note: 'Associate\'s postal code.']
  "country" VARCHAR(255) [note: 'Associate\'s country of residence.']
  "enterprise_building_id" INTEGER [ref: > enterprise.buildings.enterprise_building_id, note: 'Foreign key referencing the building where the associate is primarily located.']

  note: 'Stores information about employees, contractors, or other individuals associated with the enterprise.'
}

Table "enterprise"."departments" {
  "enterprise_department_id" SERIAL [pk, increment, note: 'Unique identifier for each department.']
  "department_name" VARCHAR(255) [unique, note: 'Name of the department.']
  "location" VARCHAR(255) [note: 'Physical location of the department.']
  note: 'Stores information about the various departments within the enterprise.'
}

Enum "enterprise"."building_type" {
  BRANCH [note: 'Customer-facing banking location providing direct services to clients']
  HEADQUARTERS [note: 'Main administrative building housing executive offices and central operations']
  OPERATIONS_CENTER [note: 'Facility focused on back-office banking operations and processing']
  DATA_CENTER [note: 'Specialized facility housing IT infrastructure and computing resources']
  ADMINISTRATIVE [note: 'Office building for administrative staff and support functions']
  WAREHOUSE [note: 'Storage facility for equipment, supplies, and records']
  TRAINING_CENTER [note: 'Facility dedicated to employee training and development']
  DISASTER_RECOVERY [note: 'Backup facility for business continuity during emergencies']
  CALL_CENTER [note: 'Facility handling customer service calls and inquiries']
  ATM_LOCATION [note: 'Standalone ATM facility without full branch services']
  OTHER [note: 'Building type not covered by other categories']
}

Table "enterprise"."buildings" {
  "enterprise_building_id" SERIAL [pk, increment, note: 'Unique identifier for each building.']
  "enterprise_address_id" INTEGER [ref: > enterprise.addresses.enterprise_address_id, note: 'Address of the building']
  "building_name" VARCHAR(255) [note: 'Name of the building.']
  "building_type" enterprise.building_type [not null, note: 'Type of building classified by primary function.']
  "phone_number" VARCHAR(30) [note: 'Phone number of the building.']
  "open_date" DATE [note: 'Date the building was opened.']
  "close_date" DATE [note: 'Date the building was closed, if applicable.']

  note: 'Stores information about the physical buildings used by the enterprise, including branches and other facilities.'
}

TableGroup "Parties & Addresses" [color: #1E69FD] {
  "enterprise"."parties"
  "enterprise"."party_relationships"

  note: "Tables related to account stakeholders and their contact information"
}

TableGroup "Enterprise Accounts" [color: #1E69FD] {
  "enterprise"."permissions"
  "enterprise"."accounts"
  "enterprise"."account_identifiers"
  "enterprise"."account_ownership"

  note: "Tables related to core enterprise account management"
}

TableGroup "Enterprise Infra" [color: #1E69FD] {
  "enterprise"."associates"
  "enterprise"."buildings"
  "enterprise"."departments"
}

TableGroup "Addresses" [color: #1E69FD] {
  "enterprise"."addresses"

  note: "Central address management structure used across all domains"
}


//
// CONSUMER BANKING
//

Enum "consumer_banking"."account_status" {
  ACTIVE [note: 'Account is in good standing and fully operational']
  PENDING [note: 'Account creation is in progress but not yet active']
  INACTIVE [note: 'Account exists but is not currently in use']
  SUSPENDED [note: 'Account temporarily disabled due to policy issues']
  DORMANT [note: 'Account with no activity for an extended period']
  FROZEN [note: 'Account with temporarily restricted transactions']
  CLOSED [note: 'Account permanently terminated']
  ARCHIVED [note: 'Closed account retained for record-keeping']
}

Table "consumer_banking"."accounts" {
  "consumer_banking_account_id" SERIAL [pk, increment, note: "Unique identifier for each consumer banking account"]
  "enterprise_account_id" INTEGER [not null, ref: > enterprise.accounts.enterprise_account_id]
  "consumer_banking_product_id" INTEGER [ref: > consumer_banking.products.consumer_banking_product_id, note: "References the enterprise account this consumer account belongs to. Required for all consumer accounts"]
  "opened_date" TIMESTAMPTZ [note: "When the account was opened"]
  "status" consumer_banking.account_status [not null, note: "Operational status of the account (e.g., Active, Inactive, Frozen, Closed). Can be closed independently of enterprise account, but must be closed if enterprise account is closed"]
  "status_update_date_time" TIMESTAMPTZ [not null, note: "When the status was last updated. Updates to closed status do not automatically close the enterprise account."]

  note: "Line of business specific account information. Must link to an enterprise account owned by one or more parties. Account status cannot be 'active' if parent enterprise account is closed."
}

Enum "consumer_banking"."consent_status" {
  PENDING [note: 'Consent has been requested but not yet approved by the customer']
  AUTHORIZED [note: 'Consent has been actively approved by the customer']
  ACTIVE [note: 'Consent is currently valid and being used for access']
  SUSPENDED [note: 'Consent is temporarily paused but not revoked']
  EXPIRED [note: 'Consent has reached its expiration date without being renewed']
  REVOKED [note: 'Consent was actively withdrawn by the customer']
  TERMINATED [note: 'Consent was ended by the bank or third party']
  SUPERSEDED [note: 'Consent has been replaced by a newer consent']
  REJECTED [note: 'Consent request was rejected by the customer']
  ERROR [note: 'Consent has encountered an error in processing']
}

Table "consumer_banking"."account_access_consents" {
  "consumer_banking_consent_id" SERIAL [pk, increment, note: "Unique identifier for each consent record"]
  "consumer_banking_account_id" INTEGER [not null, ref: > consumer_banking.accounts.consumer_banking_account_id, note: "References the account that the consent is related to."]
  "creation_date_time" TIMESTAMPTZ [not null, note: "When the consent was initially created"]
  "status" consumer_banking.consent_status [not null, note: "Current status of the consent (e.g., Active, Revoked)"]
  "status_update_date_time" TIMESTAMPTZ [not null, note: "When the status was last changed"]
  "expiration_date_time" TIMESTAMPTZ [note: "When the consent will expire (if applicable)"]

  note: "Stores consent records for account access, tracking when and how third parties are permitted to access consumer banking account information"
}

Table "consumer_banking"."account_access_consents_permissions" {
  "consumer_banking_consent_id" INTEGER [ref: > consumer_banking.account_access_consents.consumer_banking_consent_id, note: "References a consent record"]
  "enterprise_permission_id" INTEGER [ref: > enterprise.permissions.enterprise_permission_id, note: "References a permission record"]

  Indexes {
    (consumer_banking_consent_id, enterprise_permission_id) [note: "Composite key for consent-permission pairs"]
  }

  note: "Junction table linking consents to specific permissions granted, implements a many-to-many relationship"
}

Enum "consumer_banking"."balance_type" {
  AVAILABLE [note: 'Balance that is currently available for transactions']
  CURRENT [note: 'The total current balance including pending transactions']
  CLOSING [note: 'Balance at the close of the previous statement period']
  PENDING [note: 'Balance of transactions that have not yet cleared']
  BLOCKED [note: 'Balance that is blocked or restricted']
  RESERVED [note: 'Balance reserved for pending authorizations']
  OVERDRAFT [note: 'Available overdraft balance']
  HOLD [note: 'Balance on hold due to recent deposits or other restrictions']
  INTEREST_BEARING [note: 'Balance eligible for interest calculations']
  MINIMUM_REQUIRED [note: 'Minimum balance required to maintain account status or avoid fees']
  PROJECTED [note: 'Estimated future balance based on scheduled transactions']
  LEDGER [note: 'Book balance as reflected in the financial institution records']
  OTHER [note: 'Other balance type not covered by standard categories']
}

Enum "consumer_banking"."balance_sub_type" {
  INTRA_DAY [note: 'Balance calculated during the current business day']
  OPENING [note: 'Balance at the start of the banking day']
  INTERIM [note: 'Temporary balance used for interim processing']
  FORWARD [note: 'Balance including forward-dated items']
  EXPECTED [note: 'Expected future balance based on scheduled transactions']
  AUTHORISED [note: 'Balance after authorized transactions']
  PREVIOUS_DAY [note: 'Balance from the previous business day']
  THRESHOLD [note: 'Balance related to a threshold for fees or features']
  SWEEP [note: 'Balance related to account sweep arrangements']
  LIMIT [note: 'Balance representing a limit (credit, withdrawal, etc.)']
  CREDIT_LINE [note: 'Balance related to an associated credit line']
  CUSHION [note: 'Buffer balance maintained to avoid overdrafts']
  VALUE_DATED [note: 'Balance reflecting the value date of transactions']
  NET [note: 'Net balance after all adjustments']
  NONE [note: 'No specific sub-type applies']
}

Enum "enterprise"."credit_debit_indicator" {
  CREDIT [note: 'Positive balance (in favor of the account owner)']
  DEBIT [note: 'Negative balance (owed by the account owner)']
}

Table "consumer_banking"."balances" {
  "consumer_banking_balance_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each balance record"]
  "consumer_banking_account_id" INTEGER [not null, ref: > consumer_banking.accounts.consumer_banking_account_id, note: "References the account this balance belongs to"]
  "credit_debit_indicator" enterprise.credit_debit_indicator [not null, note: "Indicates if balance is credit or debit"]
  "type" consumer_banking.balance_type [not null, note: "Primary balance type (e.g., available, closing, etc.)"]
  "date_time" TIMESTAMPTZ [not null, note: "When this balance was recorded"]
  "amount" NUMERIC(18,5) [not null, note: "Monetary amount with precision to 5 decimal places"]
  "currency" enterprise.currency_code [not null, note: "Currency code (e.g., USD, EUR)"]
  "sub_type" consumer_banking.balance_sub_type [note: "Optional further classification of balance type"]

  note: "Tracks account balance information with history, stores different types of balances"
}

Enum "consumer_banking"."beneficiary_type" {
  INDIVIDUAL [note: 'A natural person receiving payments']
  ORGANIZATION [note: 'A business entity, non-profit, or institution receiving payments']
  GOVERNMENT [note: 'A government agency or department']
  TRUST [note: 'A legal arrangement for holding assets']
  ESTATE [note: 'The legal estate of a deceased person']
  CHARITY [note: 'A registered charitable organization']
  FINANCIAL_INSTITUTION [note: 'Bank or other financial service provider']
  MERCHANT [note: 'Commercial vendor or retailer']
  UTILITY [note: 'Service provider for utilities like electricity, water, etc.']
  EDUCATIONAL [note: 'School, university or educational institution']
  HEALTHCARE [note: 'Hospital, clinic or healthcare provider']
  SELF [note: 'Transfer to own account at same or different institution']
  OTHER [note: 'Beneficiary type not covered by standard categories']
}

// Updated table definitions using existing enterprise.identifier_scheme enum
Table "consumer_banking"."beneficiaries" {
  "consumer_banking_beneficiary_id" SERIAL [pk, increment, note: "Unique identifier for each beneficiary"]
  "consumer_banking_account_id" INTEGER [not null, ref: > consumer_banking.accounts.consumer_banking_account_id, note: "References the account this balance belongs to"]
  "beneficiary_type" consumer_banking.beneficiary_type [not null, note: "Type of beneficiary (individual, organization, etc.)"]
  "reference" VARCHAR(35) [note: "Optional reference identifier for the beneficiary"]
  "supplementary_data" TEXT [note: "Additional information in free-text format"]

  note: "Stores beneficiary details for account payments, records entities that can receive payments"
}

Table "consumer_banking"."beneficiary_creditor_agents" {
  "consumer_banking_beneficiary_creditor_agent_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each agent record"]
  "consumer_banking_beneficiary_id" INTEGER [not null, ref: > consumer_banking.beneficiaries.consumer_banking_beneficiary_id, note: "References the beneficiary this agent is associated with"]
  "scheme_name" enterprise.identifier_scheme [not null, note: "Identifier scheme (e.g., BIC, SORT)"]
  "identification" VARCHAR(35) [not null, note: "The actual identifier of the institution"]
  "name" VARCHAR(140) [note: "Display name of the financial institution"]
  "lei" VARCHAR(20) [note: "Legal Entity Identifier of the institution"]

  note: "Stores financial institution details for beneficiaries, records information about banks/agents"
}

Table "consumer_banking"."beneficiary_creditor_accounts" {
  "consumer_banking_beneficiary_creditor_account_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each creditor account record"]
  "consumer_banking_beneficiary_id" INTEGER [not null, ref: > consumer_banking.beneficiaries.consumer_banking_beneficiary_id, note: "References the beneficiary this account belongs to"]
  "scheme_name" enterprise.identifier_scheme [not null, note: "Account identifier scheme (e.g., IBAN, BBAN)"]
  "identification" VARCHAR(256) [not null, note: "The actual account identifier value"]
  "name" VARCHAR(350) [note: "Optional display name for this account"]
  "secondary_identification" VARCHAR(34) [note: "Additional account identification information"]

  note: "Stores account details of beneficiaries for payment routing"
}

Enum "consumer_banking"."direct_debit_status_code" {
  ACTIVE [note: 'The direct debit is currently active and operational']
  PENDING [note: 'The direct debit is in the process of being set up']
  CANCELED [note: 'The direct debit has been permanently canceled']
  SUSPENDED [note: 'The direct debit is temporarily suspended']
  REJECTED [note: 'The direct debit was rejected by the bank or payment processor']
  EXPIRED [note: 'The direct debit has reached its expiration date']
  COMPLETED [note: 'The direct debit has completed all scheduled payments']
  FAILED [note: 'The most recent direct debit payment attempt failed']
  ON_HOLD [note: 'The direct debit is on hold pending review or resolution']
  AMENDED [note: 'The direct debit has been modified from its original terms']
  OTHER [note: 'Status not covered by standard categories']
}

Enum "consumer_banking"."direct_debit_classification" {
  PERSONAL [note: 'Direct debit for personal expenses']
  BUSINESS [note: 'Direct debit for business expenses']
  CHARITY [note: 'Direct debit for charitable donations']
  HOUSEHOLD [note: 'Direct debit for household expenses']
  SUBSCRIPTION [note: 'Direct debit for recurring subscription services']
  UTILITY [note: 'Direct debit for utility payments']
  INSURANCE [note: 'Direct debit for insurance premiums']
  MORTGAGE [note: 'Direct debit for mortgage payments']
  LOAN [note: 'Direct debit for loan repayments']
  TAX [note: 'Direct debit for tax payments']
  OTHER [note: 'Classification not covered by standard categories']
}

Enum "consumer_banking"."direct_debit_category" {
  ELECTRICITY [note: 'Payments for electricity services']
  GAS [note: 'Payments for gas/heating services']
  WATER [note: 'Payments for water services']
  INTERNET [note: 'Payments for internet services']
  PHONE [note: 'Payments for telephone services']
  TV [note: 'Payments for television services']
  RENT [note: 'Payments for property rental']
  MORTGAGE [note: 'Payments for property mortgage']
  INSURANCE_HOME [note: 'Payments for home insurance']
  INSURANCE_HEALTH [note: 'Payments for health insurance']
  INSURANCE_LIFE [note: 'Payments for life insurance']
  INSURANCE_AUTO [note: 'Payments for auto insurance']
  SUBSCRIPTION_MEDIA [note: 'Payments for media subscriptions']
  SUBSCRIPTION_SOFTWARE [note: 'Payments for software subscriptions']
  SUBSCRIPTION_MEMBERSHIP [note: 'Payments for membership subscriptions']
  LOAN_PAYMENT [note: 'Payments for loan repayments']
  CREDIT_CARD [note: 'Payments for credit card bills']
  CHARITY [note: 'Payments for charitable donations']
  TAX_PAYMENT [note: 'Payments for tax obligations']
  PENSION [note: 'Payments for pension contributions']
  INVESTMENT [note: 'Payments for investment products']
  EDUCATION [note: 'Payments for educational expenses']
  OTHER [note: 'Category not covered by standard categories']
}

Table "consumer_banking"."direct_debits" {
  "consumer_banking_direct_debit_id" SERIAL [pk, increment, note: "Unique identifier for each direct debit mandate"]
  "consumer_banking_account_id" INTEGER [not null, ref: > consumer_banking.accounts.consumer_banking_account_id, note: "References the account this direct debit belongs to"]
  "direct_debit_status_code" consumer_banking.direct_debit_status_code [not null, note: "Status code of the direct debit (e.g., active, canceled)"]
  "name" VARCHAR(70) [not null, note: "Name of the merchant/organization collecting the direct debit"]
  "previous_payment_date_time" TIMESTAMPTZ [note: "When the last payment was made"]
  "previous_payment_amount" NUMERIC(18,5) [note: "Amount of the last payment"]
  "previous_payment_currency" VARCHAR(3) [note: "Currency of the last payment"]

  note: "Stores information about direct debit arrangements set up on accounts"
}

Table "consumer_banking"."mandate_related_information" {
  "consumer_banking_mandate_related_information_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for mandate information"]
  "consumer_banking_direct_debit_id" INTEGER [not null, ref: > consumer_banking.direct_debits.consumer_banking_direct_debit_id, note: "References the direct debit this mandate belongs to"]
  "mandate_id" INTEGER [not null, note: "Unique reference for the direct debit mandate"]
  "classification" consumer_banking.direct_debit_classification [note: "Classification of the mandate (e.g., personal, business)"]
  "category" consumer_banking.direct_debit_category [note: "Purpose code for categorizing the payment type"]
  "first_payment_date_time" TIMESTAMPTZ [note: "When the first payment is scheduled"]
  "recurring_payment_date_time" TIMESTAMPTZ [note: "When recurring payments are scheduled"]
  "final_payment_date_time" TIMESTAMPTZ [note: "When the final payment is scheduled (if applicable)"]
  "frequency_type" enterprise.frequency [not null, note: "How often payments occur (e.g., monthly, weekly)"]
  "frequency_count_per_period" INT [note: "Number of payments in each period"]
  "frequency_point_in_time" VARCHAR(2) [note: "Specific day or time point for payments"]
  "reason" VARCHAR(256) [note: "Reason or purpose for the mandate"]

  note: "Stores detailed information about direct debit mandates including payment schedules"
}

Enum "consumer_banking"."offer_type" {
  LOAN [note: 'Offer for a new loan product']
  BALANCE_TRANSFER [note: 'Offer to transfer balance from another institution']
  CREDIT_LIMIT_INCREASE [note: 'Offer to increase existing credit limit']
  INTEREST_RATE_REDUCTION [note: 'Offer for reduced interest rate']
  OVERDRAFT [note: 'Offer for overdraft facility or extension']
  INVESTMENT [note: 'Offer for investment product or service']
  SAVINGS [note: 'Offer for savings account with preferential terms']
  INSURANCE [note: 'Offer for insurance product']
  CASHBACK [note: 'Offer for cash back on transactions']
  REWARDS [note: 'Offer for reward points or benefits']
  PREMIUM_ACCOUNT [note: 'Offer to upgrade to a premium account type']
  FEE_WAIVER [note: 'Offer to waive certain fees']
  BUNDLE [note: 'Offer for multiple products bundled together']
  PREAPPROVAL [note: 'Pre-approved offer for a financial product']
  PROMOTIONAL [note: 'Time-limited promotional offer']
  OTHER [note: 'Offer type not covered by standard categories']
}

// Reusing the enterprise currency_code enum for the amount_currency and fee_currency fields
Table "consumer_banking"."offers" {
  "consumer_banking_offer_id" SERIAL [pk, increment, note: "Unique identifier for each offer"]
  "consumer_banking_account_id" INTEGER [not null, ref: > consumer_banking.accounts.consumer_banking_account_id, note: "References the account this offer belongs to"]
  "offer_type" consumer_banking.offer_type [not null, note: "Type of offer (e.g., loan, investment, balance transfer)"]
  "description" VARCHAR(500) [note: "Detailed description of the offer"]
  "start_date_time" TIMESTAMPTZ [note: "When the offer becomes available"]
  "end_date_time" TIMESTAMPTZ [note: "When the offer expires"]
  "rate" NUMERIC(10,4) [note: "Interest rate associated with the offer"]
  "value" INT [note: "Numerical value related to the offer (e.g., reward points)"]
  "term" VARCHAR(500) [note: "Terms and conditions of the offer"]
  "url" VARCHAR(256) [note: "Web link for more information about the offer"]
  "amount" NUMERIC(18,5) [note: "Monetary amount of the offer"]
  "amount_currency" enterprise.currency_code [note: "Currency of the offer amount"]
  "fee" NUMERIC(18,5) [note: "Any fee associated with accepting the offer"]
  "fee_currency" enterprise.currency_code [note: "Currency of the fee"]

  note: "Stores promotional offers made to account holders"
}

Enum "consumer_banking"."product_type" {
  CHECKING [note: 'Standard transaction account for daily banking needs']
  SAVINGS [note: 'Interest-bearing deposit account']
  MONEY_MARKET [note: 'High-interest deposit account with check-writing privileges']
  CERTIFICATE_OF_DEPOSIT [note: 'Fixed-term deposit account with higher interest rates']
  IRA [note: 'Individual Retirement Account']
  HSA [note: 'Health Savings Account']
  STUDENT [note: 'Specialized accounts for students with reduced fees']
  YOUTH [note: 'Accounts designed for minors with parental oversight']
  SENIOR [note: 'Accounts with features tailored to older customers']
  BUSINESS_CHECKING [note: 'Transaction accounts for business entities']
  BUSINESS_SAVINGS [note: 'Savings accounts for business entities']
  PREMIUM [note: 'High-end accounts with enhanced services for wealthy clients']
  FOREIGN_CURRENCY [note: 'Accounts denominated in non-local currencies']
  SPECIALIZED [note: 'Niche account products for specific purposes']
}

Enum "consumer_banking"."interest_calculation_method" {
  DAILY_BALANCE [note: 'Interest calculated on the daily account balance']
  AVERAGE_DAILY_BALANCE [note: 'Interest calculated on the average daily balance for the period']
  MINIMUM_BALANCE [note: 'Interest calculated on the minimum balance during the period']
  TIERED_RATE [note: 'Different interest rates applied to different balance tiers']
  BLENDED_RATE [note: 'Combined rate based on multiple factors']
  STEPPED_RATE [note: 'Increasing rates for higher balances']
}

Enum "consumer_banking"."account_fee_schedule" {
  STANDARD [note: 'Regular fee structure without special conditions']
  REDUCED [note: 'Lower fees based on qualifying factors']
  WAIVED_WITH_MINIMUM_BALANCE [note: 'Fees waived when maintaining minimum balance']
  WAIVED_WITH_DIRECT_DEPOSIT [note: 'Fees waived with regular direct deposits']
  WAIVED_WITH_RELATIONSHIP [note: 'Fees waived based on overall banking relationship']
  NO_FEE [note: 'Account with no monthly maintenance fees']
  ACTIVITY_BASED [note: 'Fees based on account activity levels']
  TIERED [note: 'Fee structure varies based on balance tiers']
}

Enum "consumer_banking"."product_status" {
  ACTIVE [note: 'Product currently offered to new customers']
  GRANDFATHERED [note: 'Product maintained for existing customers but not offered to new ones']
  PROMOTIONAL [note: 'Limited-time product offering']
  DISCONTINUED [note: 'Product no longer offered but still supported']
  ARCHIVED [note: 'Product completely retired']
  PILOT [note: 'Product in limited release for testing']
  SEASONAL [note: 'Product offered only during specific times of year']
}

Table "consumer_banking"."products" {
  "consumer_banking_product_id" SERIAL [pk, increment, note: "Unique identifier for each product"]
  "product_code" VARCHAR(20) [not null, note: "Internal code for the product"]
  "product_name" VARCHAR(100) [not null, note: "Display name for the product"]
  "product_type" consumer_banking.product_type [not null, note: "Type of product (checking, savings, money market, etc.)"]
  "description" TEXT [note: "Detailed product description"]
  "min_opening_deposit" DECIMAL(18,2) [note: "Minimum amount required to open an account of this product type"]
  "monthly_fee" DECIMAL(10,2) [note: "Standard monthly maintenance fee"]
  "fee_schedule" consumer_banking.account_fee_schedule [not null, default: "STANDARD", note: "Type of fee structure applicable to this product"]
  "transaction_limit" INTEGER [note: "Number of free transactions per statement period"]
  "transaction_fee" DECIMAL(10,2) [note: "Fee charged per transaction beyond the limit"]
  "min_balance" DECIMAL(18,2) [note: "Minimum balance to avoid fees"]
  "is_interest_bearing" BOOLEAN [not null, default: false, note: "Indicates if the product earns interest"]
  "base_interest_rate" DECIMAL(6,4) [note: "Standard interest rate for the product (if applicable)"]
  "interest_calculation_method" consumer_banking.interest_calculation_method [note: "Method used to calculate interest on the account"]
  "term_length" INTEGER [note: "Term in months (for term products)"]
  "status" consumer_banking.product_status [not null, default: "ACTIVE", note: "Current availability status of the product"]
  "launch_date" DATE [note: "Date when product was first offered"]
  "discontinue_date" DATE [note: "Date when product was discontinued if applicable"]

  Indexes {
    "product_code" [unique, note: "Ensures product codes are unique"]
  }

  note: "Defines the financial products offered to customers"
}

Table "consumer_banking"."other_product_types" {
  "consumer_banking_other_product_type_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each custom product type"]
  "consumer_banking_product_id" INTEGER [not null, ref: > consumer_banking.products.consumer_banking_product_id, note: "References the related product record"]
  "name" VARCHAR(350) [not null, note: "Name of the custom product type"]
  "description" VARCHAR(350) [not null, note: "Detailed description of the custom product type"]

  note: "Stores information about non-standard product types not covered in main categories"
}

Enum "consumer_banking"."scheduled_payment_type" {
  SINGLE [note: 'One-time payment scheduled for a specific date']
  RECURRING [note: 'Payment that repeats at regular intervals']
  INSTALLMENT [note: 'Payment that is part of a fixed series of payments']
  CONDITIONAL [note: 'Payment that executes based on specified conditions']
  VARIABLE [note: 'Payment with an amount that may vary']
}

Enum "consumer_banking"."scheduled_payment_status" {
  PENDING [note: 'Payment is scheduled but not yet processed']
  PROCESSING [note: 'Payment is currently being processed']
  COMPLETED [note: 'Payment has been successfully executed']
  FAILED [note: 'Payment execution failed']
  CANCELED [note: 'Payment was canceled before processing']
  EXPIRED [note: 'Scheduled payment date passed without execution']
  RECURRENCE_ENDED [note: 'Final payment in a recurring series']
  ON_HOLD [note: 'Payment temporarily paused']
}

Enum "consumer_banking"."payment_method" {
  ACH [note: 'Automated Clearing House electronic transfer']
  WIRE [note: 'Wire transfer']
  INTERNAL [note: 'Internal transfer between accounts']
  CHECK [note: 'Paper check payment']
  CARD [note: 'Card-based payment']
  DIGITAL_WALLET [note: 'Payment through digital wallet service']
  OTHER [note: 'Other payment method not listed']
}

Table "consumer_banking"."scheduled_payments" {
  "consumer_banking_scheduled_payment_id" SERIAL [pk, increment, note: "Unique identifier for each scheduled payment"]
  "consumer_banking_account_id" INTEGER [not null, ref: > consumer_banking.accounts.consumer_banking_account_id, note: "References the account this balance belongs to"]
  "scheduled_payment_date_time" TIMESTAMPTZ [not null, note: "When the payment is scheduled to occur"]
  "scheduled_type" consumer_banking.scheduled_payment_type [not null, note: "Type of scheduled payment"]
  "payment_method" consumer_banking.payment_method [not null, note: "Method of payment execution"]
  "payment_status" consumer_banking.scheduled_payment_status [not null, default: "PENDING", note: "Current status of the scheduled payment"]
  "frequency" enterprise.frequency [note: "Frequency of recurring payments if applicable"]
  "reference" VARCHAR(35) [note: "Reference identifier for the payment"]
  "debtor_reference" VARCHAR(35) [note: "Reference identifier for the payer"]
  "instructed_amount" NUMERIC(18,5) [not null, note: "Amount to be paid"]
  "instructed_amount_currency" enterprise.currency_code [not null, note: "Currency of the payment amount"]
  "end_date" DATE [note: "End date for recurring payments"]
  "execution_count" INTEGER [note: "Number of times recurring payment has executed"]
  "max_executions" INTEGER [note: "Maximum number of executions for recurring payment"]

  note: "Stores information about one-time and recurring scheduled payments"
}

Table "consumer_banking"."scheduled_payment_creditor_agents" {
  "consumer_banking_scheduled_payment_creditor_agent_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each agent record"]
  "consumer_banking_scheduled_payment_id" INTEGER [not null, ref: > consumer_banking.scheduled_payments.consumer_banking_scheduled_payment_id, note: "References the scheduled payment"]
  "scheme_name" enterprise.identifier_scheme [not null, note: "Identifier scheme for the receiving institution (e.g., BIC)"]
  "identification" VARCHAR(256) [not null, note: "Identifier of the receiving financial institution"]
  "name" VARCHAR(140) [note: "Name of the receiving financial institution"]
  "lei" VARCHAR(20) [note: "Legal Entity Identifier of the receiving institution"]

  note: "Stores information about financial institutions receiving scheduled payments"
}

Table "consumer_banking"."scheduled_payment_creditor_accounts" {
  "consumer_banking_scheduled_payment_creditor_account_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each creditor account"]
  "consumer_banking_scheduled_payment_id" INTEGER [not null, ref: > consumer_banking.scheduled_payments.consumer_banking_scheduled_payment_id, note: "References the scheduled payment"]
  "scheme_name" enterprise.identifier_scheme [not null, note: "Account identifier scheme (e.g., IBAN)"]
  "identification" VARCHAR(256) [not null, note: "Account identifier for receiving the payment"]
  "name" VARCHAR(350) [note: "Name associated with the receiving account"]
  "secondary_identification" VARCHAR(34) [note: "Additional identification for the receiving account"]

  note: "Stores information about accounts receiving scheduled payments"
}

Enum "consumer_banking"."standing_order_status_code" {
  ACTIVE [note: 'Standing order is currently active and scheduled for execution']
  PENDING [note: 'Standing order has been set up but is not yet active']
  CANCELLED [note: 'Standing order has been permanently cancelled']
  SUSPENDED [note: 'Standing order is temporarily suspended']
  COMPLETED [note: 'Standing order has completed all scheduled payments']
  FAILED [note: 'Most recent standing order payment attempt failed']
  ON_HOLD [note: 'Standing order is on hold pending review or resolution']
  EXPIRED [note: 'Standing order has reached its expiration date']
  OTHER [note: 'Status not falling into standard categories']
}

Enum "consumer_banking"."standing_order_type" {
  FIXED_AMOUNT [note: 'Order transfers a fixed amount each time']
  VARIABLE_AMOUNT [note: 'Order transfers an amount that may vary each time']
  BALANCE_SWEEP [note: 'Order transfers any balance above a specified amount']
  FULL_BALANCE [note: 'Order transfers the entire balance']
  PERCENTAGE [note: 'Order transfers a percentage of the balance']
  INTEREST_ONLY [note: 'Order transfers only accrued interest']
  OTHER [note: 'Type not falling into standard categories']
}

Enum "consumer_banking"."standing_order_category" {
  BILL_PAYMENT [note: 'Order for paying regular bills']
  SAVINGS [note: 'Order for transferring money to savings']
  INVESTMENT [note: 'Order for investment funding']
  LOAN_PAYMENT [note: 'Order for paying loans or mortgages']
  SUBSCRIPTION [note: 'Order for subscription services']
  CHARITY [note: 'Order for charitable donations']
  FAMILY_SUPPORT [note: 'Order for supporting family members']
  RENT [note: 'Order for rent payments']
  BUSINESS_EXPENSE [note: 'Order for business-related expenses']
  OTHER [note: 'Category not falling into standard categories']
}

Table "consumer_banking"."standing_orders" {
  "consumer_banking_standing_order_id" SERIAL [pk, increment, note: "Unique identifier for each standing order"]
  "consumer_banking_account_id" INTEGER [not null, ref: > consumer_banking.accounts.consumer_banking_account_id, note: "References the account this standing order belongs to"]
  "next_payment_date_time" TIMESTAMPTZ [note: "When the next payment is scheduled"]
  "last_payment_date_time" TIMESTAMPTZ [note: "When the most recent payment was made"]
  "standing_order_status_code" consumer_banking.standing_order_status_code [not null, default: "ACTIVE", note: "Status code of the standing order (e.g., active, canceled)"]
  "first_payment_amount" NUMERIC(18,5) [note: "Amount of the first payment (if different)"]
  "first_payment_currency" enterprise.currency_code [note: "Currency of the first payment"]
  "next_payment_amount" NUMERIC(18,5) [note: "Amount of the next scheduled payment"]
  "next_payment_currency" enterprise.currency_code [note: "Currency of the next payment"]
  "last_payment_amount" NUMERIC(18,5) [note: "Amount of the most recent payment"]
  "last_payment_currency" enterprise.currency_code [note: "Currency of the most recent payment"]
  "final_payment_amount" NUMERIC(18,5) [note: "Amount of the final payment (if different)"]
  "final_payment_currency" enterprise.currency_code [note: "Currency of the final payment"]
  "frequency" enterprise.frequency [not null, note: "Frequency of standing order payments"]
  "start_date" DATE [not null, note: "Date when the first payment should be made"]
  "end_date" DATE [note: "Date when the standing order expires (if specified)"]
  "day_of_month" INTEGER [note: "Day of month for payments (for monthly/quarterly frequencies)"]
  "day_of_week" INTEGER [note: "Day of week for payments (for weekly frequencies)"]
  "payment_type" consumer_banking.standing_order_type [not null, default: "FIXED_AMOUNT", note: "Type of payment (fixed, variable, etc.)"]
  "category" consumer_banking.standing_order_category [note: "Category or purpose of the standing order"]
  "reference" VARCHAR(100) [note: "Payment reference shown to the recipient"]
  "description" VARCHAR(255) [note: "Description of the standing order purpose"]
  "created_date" TIMESTAMPTZ [not null, default: `CURRENT_TIMESTAMP`, note: "When the standing order was created"]
  "created_by" VARCHAR(50) [note: "Who or what created the standing order"]
  "modified_date" TIMESTAMPTZ [note: "When the standing order was last modified"]
  "supplementary_data" TEXT [note: "Additional information about the standing order in JSON format"]

  note: "Stores information about recurring payment instructions (standing orders)"
}

Table "consumer_banking"."standing_order_creditor_agents" {
  "consumer_banking_standing_order_creditor_agent_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each agent record"]
  "consumer_banking_standing_order_id" INTEGER [not null, ref: > consumer_banking.standing_orders.consumer_banking_standing_order_id , note: "References the standing order"]
  "scheme_name" enterprise.identifier_scheme [not null, note: "Identifier scheme for the receiving institution"]
  "identification" VARCHAR(35) [not null, note: "Identifier of the receiving financial institution"]
  "name" VARCHAR(140) [note: "Name of the receiving financial institution"]
  "lei" VARCHAR(20) [note: "Legal Entity Identifier of the receiving institution"]

  note: "Stores information about financial institutions receiving standing order payments"
}

Table "consumer_banking"."standing_order_creditor_accounts" {
  "consumer_banking_standing_order_creditor_account_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each creditor account"]
  "consumer_banking_standing_order_id" INTEGER [not null, ref: > consumer_banking.standing_orders.consumer_banking_standing_order_id, note: "References the standing order"]
  "scheme_name" enterprise.identifier_scheme [not null, note: "Account identifier scheme (e.g., IBAN)"]
  "identification" VARCHAR(256) [not null, note: "Account identifier for receiving the payments"]
  "name" VARCHAR(350) [note: "Name associated with the receiving account"]
  "secondary_identification" VARCHAR(34) [note: "Additional identification for the receiving account"]

  note: "Stores information about accounts receiving standing order payments"
}

Enum "consumer_banking"."statement_type" {
  REGULAR [note: 'Standard periodic statement issued on the regular statement cycle']
  INTERIM [note: 'Statement issued between regular statement dates upon request or for special circumstances']
  FINAL [note: 'Final statement issued when an account is closed']
  ANNUAL [note: 'Annual summary statement showing yearly activity']
  SUPPLEMENTARY [note: 'Additional statement providing supplementary information']
  TAX [note: 'Statement specifically for tax reporting purposes']
  CORRECTED [note: 'Reissued statement that corrects errors in a previous statement']
  RECONCILIATION [note: 'Statement issued for account reconciliation purposes']
  CONSOLIDATED [note: 'Statement that consolidates information from multiple accounts']
  OTHER [note: 'Statement type not covered by standard categories']
}

Table "consumer_banking"."statements" {
  "consumer_banking_statement_id" SERIAL [pk, increment, note: "Unique identifier for each statement"]
  "consumer_banking_account_id" INTEGER [not null, ref: > consumer_banking.accounts.consumer_banking_account_id, note: "References the account this balance belongs to"]
  "statement_reference" VARCHAR(35) [note: "Reference number for the statement"]
  "type" consumer_banking.statement_type [not null, note: "Type of statement (e.g., regular, interim, final)"]
  "start_date_time" TIMESTAMPTZ [not null, note: "Start of the period covered by the statement"]
  "end_date_time" TIMESTAMPTZ [not null, note: "End of the period covered by the statement"]
  "creation_date_time" TIMESTAMPTZ [not null, note: "When the statement was generated"]

  note: "Stores information about account statements"
}

Table "consumer_banking"."statement_descriptions" {
  "consumer_banking_statement_description_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each description entry"]
  "consumer_banking_statement_id" INTEGER [not null, ref: > consumer_banking.statements.consumer_banking_statement_id, note: "References the statement this description belongs to"]
  "description" VARCHAR(500) [not null, note: "Descriptive text about the statement"]

  note: "Stores additional descriptive information for statements"
}

Enum "consumer_banking"."benefit_type" {
  CASHBACK [note: 'Cash rewards based on card spending']
  POINTS [note: 'Reward points earned from transactions']
  MILES [note: 'Travel miles accumulated from purchases']
  INTEREST [note: 'Interest earned on account balance']
  DISCOUNT [note: 'Discount applied to purchases or services']
  INSURANCE [note: 'Insurance coverage provided as account benefit']
  FEE_WAIVER [note: 'Waiver of fees as a benefit']
  PROMOTIONAL [note: 'Limited-time promotional benefit']
  LOYALTY [note: 'Benefits from loyalty program participation']
  REFERRAL [note: 'Rewards for referring new customers']
  ANNIVERSARY [note: 'Benefits provided on account anniversary']
  OTHER [note: 'Benefit type not covered by standard categories']
}

Table "consumer_banking"."statement_benefits" {
  "consumer_banking_statement_benefit_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each benefit record"]
  "consumer_banking_statement_id" INTEGER [not null, ref: > consumer_banking.statements.consumer_banking_statement_id, note: "References the statement this benefit belongs to"]
  "type" consumer_banking.benefit_type [not null, note: "Type of benefit (e.g., cashback, rewards, insurance)"]
  "amount" NUMERIC(18,5) [not null, note: "Monetary value of the benefit"]
  "currency" VARCHAR(3) [not null, note: "Currency code for the benefit amount"]

  note: "Stores information about benefits received during a statement period"
}

Enum "consumer_banking"."fee_type" {
  SERVICE [note: 'Regular account maintenance or service fee']
  TRANSACTION [note: 'Fee for specific transactions or activities']
  OVERDRAFT [note: 'Fee charged when account goes into overdraft']
  ATM [note: 'Fee for ATM usage, especially out-of-network']
  WIRE_TRANSFER [note: 'Fee for wire transfer services']
  FOREIGN_TRANSACTION [note: 'Fee for transactions in foreign currencies']
  PAPER_STATEMENT [note: 'Fee for receiving physical paper statements']
  STOP_PAYMENT [note: 'Fee for stopping payment on a check or transaction']
  REPLACEMENT_CARD [note: 'Fee for replacing a lost or stolen card']
  EARLY_WITHDRAWAL [note: 'Penalty for early withdrawal from time deposits']
  INSUFFICIENT_FUNDS [note: 'Fee when transaction is rejected due to insufficient balance']
  DORMANT_ACCOUNT [note: 'Fee for inactive accounts']
  RESEARCH [note: 'Fee for research or investigation services']
  SPECIAL_STATEMENT [note: 'Fee for statement copies or special formats']
  LATE_PAYMENT [note: 'Fee charged for payments made after the due date']
  OTHER [note: 'Fee type not covered by standard categories']
}

Enum "consumer_banking"."fee_frequency" {
  ONE_TIME [note: 'Fee charged once for a specific event']
  MONTHLY [note: 'Fee charged on a monthly basis']
  QUARTERLY [note: 'Fee charged every three months']
  ANNUALLY [note: 'Fee charged once per year']
  PER_TRANSACTION [note: 'Fee charged for each applicable transaction']
  CONDITIONAL [note: 'Fee charged only when specific conditions are met']
  OTHER [note: 'Frequency not falling into standard categories']
}

Enum "consumer_banking"."rate_type" {
  FIXED [note: 'Unchanging rate that remains constant']
  VARIABLE [note: 'Rate that can change based on market conditions or indices']
  TIERED [note: 'Rate that changes based on balance or activity thresholds']
  PROMOTIONAL [note: 'Temporary special rate offered for a limited time']
  PENALTY [note: 'Higher rate applied as a penalty for specific conditions']
  STANDARD [note: 'Regular published rate for the product or service']
  DISCOUNTED [note: 'Rate that includes a discount from standard rates']
  OTHER [note: 'Rate type not covered by standard categories']
}

Table "consumer_banking"."statement_fees" {
  "consumer_banking_statement_fee_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each fee record"]
  "consumer_banking_statement_id" INTEGER [not null, ref: > consumer_banking.statements.consumer_banking_statement_id, note: "References the statement this fee belongs to"]
  "description" VARCHAR(128) [note: "Description of the fee"]
  "credit_debit_indicator" enterprise.credit_debit_indicator [not null, note: "Indicates if fee is a credit or debit"]
  "type" consumer_banking.fee_type [not null, note: "Type of fee (e.g., service, transaction, late payment)"]
  "rate" NUMERIC(10,4) [note: "Rate applied if fee is percentage-based"]
  "rate_type" consumer_banking.rate_type [note: "Type of rate (e.g., fixed, variable)"]
  "frequency" consumer_banking.fee_frequency [note: "How often the fee is applied (e.g., monthly, per transaction)"]
  "amount" NUMERIC(18,5) [not null, note: "Monetary amount of the fee"]
  "currency" enterprise.currency_code [not null, note: "Currency code for the fee amount"]

  note: "Stores information about fees charged during a statement period"
}

Enum "consumer_banking"."interest_type" {
  DEPOSIT [note: 'Interest earned on deposit account balances']
  SAVINGS [note: 'Interest earned specifically on savings accounts']
  CERTIFICATE [note: 'Interest earned on certificates of deposit or time deposits']
  MONEY_MARKET [note: 'Interest earned on money market accounts']
  CHECKING [note: 'Interest earned on interest-bearing checking accounts']
  BONUS [note: 'Special bonus interest for meeting certain conditions']
  PROMOTIONAL [note: 'Temporary promotional interest rate']
  PENALTY [note: 'Interest charged as a penalty']
  LOAN [note: 'Interest charged on loan balances']
  CREDIT_CARD [note: 'Interest charged on credit card balances']
  OVERDRAFT [note: 'Interest charged on overdraft balances']
  LINE_OF_CREDIT [note: 'Interest charged on line of credit utilization']
  ADJUSTMENT [note: 'Interest adjustment or correction']
  OTHER [note: 'Interest type not covered by standard categories']
}

Table "consumer_banking"."statement_interests" {
  "consumer_banking_statement_interest_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each interest record"]
  "consumer_banking_statement_id" INTEGER [not null, ref: > consumer_banking.statements.consumer_banking_statement_id, note: "References the statement this interest belongs to"]
  "description" VARCHAR(128) [note: "Description of the interest"]
  "credit_debit_indicator" enterprise.credit_debit_indicator [not null, note: "Indicates if interest is earned (credit) or charged (debit)"]
  "type" consumer_banking.interest_type [not null, note: "Type of interest (e.g., deposit, loan, credit card)"]
  "rate" NUMERIC(10,4) [note: "Interest rate applied"]
  "rate_type" consumer_banking.rate_type [note: "Type of rate (e.g., fixed, variable, promotional)"]
  "frequency" enterprise.frequency [note: "How often interest is calculated (e.g., daily, monthly)"]
  "amount" NUMERIC(18,5) [not null, note: "Monetary amount of interest earned or charged"]
  "currency" enterprise.currency_code [not null, note: "Currency code for the interest amount"]

  note: "Stores information about interest earned or charged during a statement period"
}

Enum "consumer_banking"."amount_type" {
  OPENING_BALANCE [note: 'Balance at the start of the statement period']
  CLOSING_BALANCE [note: 'Balance at the end of the statement period']
  PAYMENTS [note: 'Total payments made during the statement period']
  DEPOSITS [note: 'Total deposits made during the statement period']
  WITHDRAWALS [note: 'Total withdrawals made during the statement period']
  INTEREST_EARNED [note: 'Total interest earned during the statement period']
  INTEREST_CHARGED [note: 'Total interest charged during the statement period']
  FEES [note: 'Total fees charged during the statement period']
  CREDITS [note: 'Total credits or refunds applied during the statement period']
  DEBITS [note: 'Total debits or charges applied during the statement period']
  TRANSFERS_IN [note: 'Total incoming transfers during the statement period']
  TRANSFERS_OUT [note: 'Total outgoing transfers during the statement period']
  MINIMUM_PAYMENT_DUE [note: 'Minimum payment due for the next cycle']
  AVAILABLE_CREDIT [note: 'Available credit for credit accounts']
  AVAILABLE_BALANCE [note: 'Available balance that can be withdrawn']
  CURRENT_BALANCE [note: 'Current balance including pending transactions']
  PENDING_BALANCE [note: 'Total of pending transactions not yet posted']
  OVERDRAFT_LIMIT [note: 'Maximum overdraft allowed on the account']
  OVERDRAFT_USED [note: 'Amount of overdraft currently being used']
  OTHER [note: 'Amount type not covered by standard categories']
}

Enum "consumer_banking"."amount_sub_type" {
  PRINCIPAL [note: 'Amount related to principal portion of balance or payments']
  INTEREST [note: 'Amount specifically related to interest']
  FEES [note: 'Amount specifically related to fees']
  PENALTIES [note: 'Amount related to penalties or late charges']
  REWARDS [note: 'Amount related to rewards or benefits']
  PROMOTIONAL [note: 'Amount related to promotional offers or rates']
  TEMPORARY [note: 'Temporary or provisional amount']
  ESTIMATED [note: 'Estimated amount subject to verification']
  ADJUSTED [note: 'Amount that has been adjusted from previous value']
  CORRECTED [note: 'Amount that has been corrected from previous error']
  NONE [note: 'No specific sub-type applicable']
}

Table "consumer_banking"."statement_amounts" {
  "consumer_banking_statement_amount_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each amount record"]
  "consumer_banking_statement_id" INTEGER [not null, ref: > consumer_banking.statements.consumer_banking_statement_id, note: "References the statement this amount belongs to"]
  "credit_debit_indicator" enterprise.credit_debit_indicator [not null, note: "Indicates if amount is a credit or debit"]
  "type" consumer_banking.amount_type [not null, note: "Type of amount (e.g., opening balance, closing balance, payments)"]
  "amount" NUMERIC(18,5) [not null, note: "Monetary value"]
  "currency" enterprise.currency_code [not null, note: "Currency code for the amount"]
  "sub_type" consumer_banking.amount_sub_type [note: "Further classification of the amount type"]

  note: "Stores various monetary amount totals associated with a statement"
}

Enum "consumer_banking"."statement_date_type" {
  STATEMENT_DATE [note: 'Date the statement was generated']
  DUE_DATE [note: 'Date payment is due']
  PAYMENT_CUTOFF_DATE [note: 'Last date to make payment for current cycle']
  CLOSE_DATE [note: 'Date when the statement period closed']
  NEXT_STATEMENT_DATE [note: 'Date when the next statement will be generated']
  MINIMUM_PAYMENT_DATE [note: 'Date by which minimum payment must be made']
  GRACE_PERIOD_END [note: 'End date of the interest-free grace period']
  LATE_FEE_DATE [note: 'Date when late fees will be assessed']
  CYCLE_START_DATE [note: 'Start date of the billing cycle']
  LAST_PAYMENT_DATE [note: 'Date when the last payment was received']
  OTHER [note: 'Date type not covered by standard categories']
}

Table "consumer_banking"."statement_date_times" {
  "consumer_banking_statement_date_time_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each date record"]
  "consumer_banking_statement_id" INTEGER [not null, ref: > consumer_banking.statements.consumer_banking_statement_id, note: "References the statement this date belongs to"]
  "date_time" TIMESTAMPTZ [not null, note: "Date and time value"]
  "type" consumer_banking.statement_date_type [not null, note: "Type of date (e.g., payment due, minimum payment, cycle end)"]

  note: "Stores important dates associated with a statement"
}

Enum "consumer_banking"."statement_rate_type" {
  APR [note: 'Annual Percentage Rate for purchases']
  CASH_ADVANCE_APR [note: 'Annual Percentage Rate for cash advances']
  BALANCE_TRANSFER_APR [note: 'Annual Percentage Rate for balance transfers']
  PENALTY_APR [note: 'Increased rate applied after payment violations']
  PROMOTIONAL_APR [note: 'Special reduced rate for promotional periods']
  SAVINGS_RATE [note: 'Interest rate earned on savings accounts']
  CD_RATE [note: 'Interest rate for Certificate of Deposit']
  EXCHANGE_RATE [note: 'Currency exchange rate used for transactions']
  INTRODUCTORY_RATE [note: 'Special rate for new accounts or customers']
  VARIABLE_RATE_INDEX [note: 'Index rate for variable rate products']
  MARGIN [note: 'Margin added to index for variable rate calculation']
  DEFAULT_RATE [note: 'Rate applied upon default']
  REWARD_RATE [note: 'Rate for earning rewards on purchases']
  EFFECTIVE_RATE [note: 'Effective rate after all calculations']
  OTHER [note: 'Rate type not falling into standard categories']
}

Table "consumer_banking"."statement_rates" {
  "consumer_banking_statement_rate_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each rate record"]
  "consumer_banking_statement_id" INTEGER [not null, ref: > consumer_banking.statements.consumer_banking_statement_id, note: "References the statement this rate belongs to"]
  "rate" NUMERIC(10,4) [not null, note: "Rate value (e.g., interest rate, exchange rate)"]
  "type" consumer_banking.statement_rate_type [not null, note: "Type of rate (e.g., APR, promotional rate)"]
  "description" VARCHAR(255) [note: "Additional description of the rate's applicability"]
  "effective_date" DATE [note: "Date when this rate became effective"]
  "expiration_date" DATE [note: "Date when this rate expires (if applicable)"]
  "is_variable" BOOLEAN [not null, default: false, note: "Whether this is a variable rate"]
  "index_rate" NUMERIC(10,4) [note: "Base index rate for variable rates"]
  "margin" NUMERIC(10,4) [note: "Margin added to index for variable rates"]
  "balance_subject_to_rate" NUMERIC(18,2) [note: "Balance amount subject to this rate"]
  "created_at" TIMESTAMPTZ [not null, default: `CURRENT_TIMESTAMP`, note: "When this record was created"]
  "updated_at" TIMESTAMPTZ [not null, default: `CURRENT_TIMESTAMP`, note: "When this record was last updated"]

  note: "Stores various rate information associated with statements, including interest rates, promotional rates, and exchange rates"
}

Enum "consumer_banking"."statement_value_type" {
  LOYALTY_POINTS [note: 'Accumulated loyalty or reward points']
  REWARD_BALANCE [note: 'Current balance of reward points or cashback']
  CASH_BACK_EARNED [note: 'Cash back earned during the statement period']
  POINTS_EARNED [note: 'Points earned during the statement period']
  POINTS_REDEEMED [note: 'Points redeemed during the statement period']
  TIER_LEVEL [note: 'Current loyalty or rewards tier level']
  CREDIT_SCORE [note: 'Credit score information provided on statement']
  CARBON_FOOTPRINT [note: 'Environmental impact metrics']
  SPENDING_CATEGORY [note: 'Spending breakdown by category']
  MILES_EARNED [note: 'Travel miles earned during the statement period']
  MILES_BALANCE [note: 'Current balance of travel miles']
  MERCHANT_CATEGORY [note: 'Breakdown of spending by merchant category']
  NEXT_TIER_PROGRESS [note: 'Progress toward next loyalty tier level']
  ANNUAL_REWARDS_SUMMARY [note: 'Year-to-date rewards summary']
  ANNUAL_SPENDING_SUMMARY [note: 'Year-to-date spending summary']
  OTHER [note: 'Value type not covered by standard categories']
}

Table "consumer_banking"."statement_values" {
  "consumer_banking_statement_value_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each value record"]
  "consumer_banking_statement_id" INTEGER [not null, ref: > consumer_banking.statements.consumer_banking_statement_id, note: "References the statement this value belongs to"]
  "value" VARCHAR(255) [not null, note: "Value content (e.g., loyalty points, tier level, credit score)"]
  "type" consumer_banking.statement_value_type [not null, note: "Type of value stored"]
  "description" VARCHAR(255) [note: "Additional description or context for the value"]
  "previous_value" VARCHAR(255) [note: "Previous statement's value of the same type, for comparison"]
  "change_percentage" NUMERIC(10,2) [note: "Percentage change from previous statement"]
  "is_estimated" BOOLEAN [not null, default: false, note: "Whether this value is estimated rather than confirmed"]
  "reference_period_start" DATE [note: "Start of the period this value refers to, if different from statement period"]
  "reference_period_end" DATE [note: "End of the period this value refers to, if different from statement period"]
  "created_at" TIMESTAMPTZ [not null, default: `CURRENT_TIMESTAMP`, note: "When this record was created"]
  "updated_at" TIMESTAMPTZ [not null, default: `CURRENT_TIMESTAMP`, note: "When this record was last updated"]

  note: "Stores miscellaneous values associated with a statement that aren't monetary amounts, such as loyalty points, credit scores, or tier levels"
}

Enum "consumer_banking"."transaction_status" {
  PENDING [note: 'Transaction has been initiated but not yet finalized']
  BOOKED [note: 'Transaction has been posted to the account']
  CANCELLED [note: 'Transaction was cancelled before completion']
  REJECTED [note: 'Transaction was rejected by the system']
  REVERSED [note: 'Transaction was reversed after posting']
  HELD [note: 'Transaction is on hold pending review']
  EXPIRED [note: 'Transaction has expired without being completed']
  OTHER [note: 'Status not covered by standard categories']
}

Enum "consumer_banking"."transaction_mutability" {
  MUTABLE [note: 'Transaction can be modified']
  IMMUTABLE [note: 'Transaction cannot be modified']
  CONDITIONAL [note: 'Transaction can be modified under certain conditions']
}

Enum "consumer_banking"."transaction_category" {
  PAYMENT [note: 'General payment transaction']
  DEPOSIT [note: 'Deposit of funds into account']
  WITHDRAWAL [note: 'Withdrawal of funds from account']
  FEE [note: 'Fee charged to the account']
  INTEREST [note: 'Interest paid or charged']
  TRANSFER [note: 'Transfer between accounts']
  ATM [note: 'ATM transaction']
  POINT_OF_SALE [note: 'Point of sale purchase']
  CARD_PAYMENT [note: 'Payment made with card']
  DIRECT_DEBIT [note: 'Automatic withdrawal by authorized third party']
  STANDING_ORDER [note: 'Regular automated payment']
  CREDIT [note: 'Credit applied to account']
  DEBIT [note: 'Debit applied to account']
  REVERSAL [note: 'Reversal of a previous transaction']
  ADJUSTMENT [note: 'Manual adjustment to account']
  CHECK [note: 'Check transaction']
  LOAN_DISBURSEMENT [note: 'Disbursement of loan funds']
  LOAN_PAYMENT [note: 'Payment toward a loan']
  OTHER [note: 'Category not covered by standard categories']
}

Enum "consumer_banking"."transaction_type" {
  PURCHASE [note: 'Purchase of goods or services']
  CASH_WITHDRAWAL [note: 'Withdrawal of cash']
  REFUND [note: 'Refund for previous purchase']
  BILL_PAYMENT [note: 'Payment of a bill']
  SALARY [note: 'Salary or wage payment']
  SUBSCRIPTION [note: 'Regular subscription payment']
  DIVIDEND [note: 'Dividend payment']
  TAX_PAYMENT [note: 'Payment of taxes']
  TAX_REFUND [note: 'Refund of taxes']
  INTERNAL_TRANSFER [note: 'Transfer between own accounts']
  EXTERNAL_TRANSFER [note: 'Transfer to external account']
  MERCHANT_PAYMENT [note: 'Payment to a merchant']
  UTILITY_PAYMENT [note: 'Payment for utilities']
  RENT_PAYMENT [note: 'Payment for rent']
  MORTGAGE_PAYMENT [note: 'Payment for mortgage']
  INVESTMENT [note: 'Investment transaction']
  INSURANCE_PREMIUM [note: 'Payment for insurance']
  DONATION [note: 'Charitable donation']
  TRANSPORTATION [note: 'Payment for transportation']
  FOOD_DINING [note: 'Payment for food or dining']
  HEALTHCARE [note: 'Payment for healthcare services']
  EDUCATION [note: 'Payment for education']
  ENTERTAINMENT [note: 'Payment for entertainment']
  TRAVEL [note: 'Payment for travel']
  RETAIL [note: 'Payment for retail purchases']
  OTHER [note: 'Type not covered by standard categories']
}

Table "consumer_banking"."transactions" {
  "consumer_banking_transaction_id" SERIAL [pk, increment, note: "Unique identifier for each transaction"]
  "consumer_banking_account_id" INTEGER [not null, ref: > consumer_banking.accounts.consumer_banking_account_id, note: "References the account this transaction belongs to"]
  "consumer_banking_balance_id" INTEGER [null, ref: > consumer_banking.balances.consumer_banking_balance_id, note: "No meaningful relationship, just guarantees that balances must exist before a transaction can be created."]
  "transaction_reference" VARCHAR(210) [note: "Reference code for the transaction"]
  "credit_debit_indicator" enterprise.credit_debit_indicator [not null, note: "Indicates if transaction is a credit or debit"]
  "status" consumer_banking.transaction_status [not null, note: "Status of the transaction (e.g., pending, booked, rejected)"]
  "transaction_mutability" consumer_banking.transaction_mutability [note: "Whether the transaction can be changed (e.g., mutable, immutable)"]
  "transaction_date" TIMESTAMPTZ [not null, note: "When the transaction was recorded in the books"]
  "category" consumer_banking.transaction_category [note: "High-level categorization of the transaction"]
  "transaction_type" consumer_banking.transaction_type [note: "Specific type of transaction with more detail"]
  "value_date" TIMESTAMPTZ [note: "When the transaction affects the account balance"]
  "description" VARCHAR(500) [note: "Additional information about the transaction"]
  "merchant_address" VARCHAR(70) [note: "Address associated with the transaction, if applicable"]
  "amount" NUMERIC(18,5) [not null, note: "Monetary amount of the transaction"]
  "currency" enterprise.currency_code [not null, note: "Currency code for the transaction amount"]
  "charge_amount" NUMERIC(18,5) [note: "Any fees associated with the transaction"]
  "charge_currency" enterprise.currency_code [note: "Currency code for the transaction fee"]

  note: "Stores detailed information about account transactions"
}

Table "consumer_banking"."transaction_statement_references" {
  "consumer_banking_transaction_statement_reference_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each transaction-statement reference record"]
  "consumer_banking_transaction_id" INTEGER [not null, ref: > consumer_banking.transactions.consumer_banking_transaction_id, note: "References the transaction this reference belongs to"]
  "statement_reference" VARCHAR(35) [note: 'Statement reference n']
  note: "Links transactions to specific statements they appear on"
}

Table "consumer_banking"."transaction_currency_exchanges" {
  "consumer_banking_transaction_currency_exchange_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each currency exchange record"]
  "consumer_banking_transaction_id" INTEGER [not null, ref: > consumer_banking.transactions.consumer_banking_transaction_id, note: "References the transaction this currency exchange belongs to"]
  "source_currency" enterprise.currency_code [not null, note: "Original currency of the transaction"]
  "target_currency" enterprise.currency_code [note: "Destination currency after conversion"]
  "unit_currency" enterprise.currency_code [note: "Currency used as the unit for the exchange rate"]
  "exchange_rate" NUMERIC(10,4) [not null, note: "Rate used for the currency conversion"]
  "contract_identification" VARCHAR(39) [note: "Identifier for any forex contract used"]
  "quotation_date" TIMESTAMPTZ [note: "When the exchange rate was quoted"]
  "instructed_amount" NUMERIC(18,5) [note: "Original amount before conversion"]
  "instructed_amount_currency" enterprise.currency_code [note: "Currency of the original instructed amount"]

  note: "Stores currency exchange details for cross-currency transactions"
}

Enum "consumer_banking"."transaction_bank_code" {
  // Retail Categories
  "RETAIL__CLOTHING_STORE" [note: 'Clothing store transaction']
  "RETAIL__ELECTRONICS" [note: 'Electronics store transaction']
  "RETAIL__DEPARTMENT_STORE" [note: 'Department store transaction']
  "RETAIL__ONLINE_SHOPPING" [note: 'Online shopping transaction']
  "RETAIL__GROCERY" [note: 'Grocery store transaction']
  "RETAIL__CONVENIENCE_STORE" [note: 'Convenience store transaction']
  "RETAIL__OTHER" [note: 'Other retail transaction']

  // Services Categories
  "SERVICES__RESTAURANT" [note: 'Restaurant transaction']
  "SERVICES__ENTERTAINMENT" [note: 'Entertainment services']
  "SERVICES__TRAVEL" [note: 'Travel-related services']
  "SERVICES__CAR_RENTAL" [note: 'Car rental transaction']
  "SERVICES__HOTEL" [note: 'Hotel-related transaction']
  "SERVICES__PROFESSIONAL" [note: 'Professional services']
  "SERVICES__UTILITIES" [note: 'Utility service payment']
  "SERVICES__TELECOMMUNICATIONS" [note: 'Telecommunications service']
  "SERVICES__OTHER" [note: 'Other service transaction']

  // Financial Categories
  "FINANCIAL__ATM_WITHDRAWAL" [note: 'ATM cash withdrawal']
  "FINANCIAL__BANK_TRANSFER" [note: 'Bank transfer transaction']
  "FINANCIAL__LOAN_PAYMENT" [note: 'Loan payment transaction']
  "FINANCIAL__CREDIT_CARD_PAYMENT" [note: 'Credit card payment']
  "FINANCIAL__INVESTMENT" [note: 'Investment-related transaction']
  "FINANCIAL__INSURANCE_PAYMENT" [note: 'Insurance premium payment']
  "FINANCIAL__WIRE_TRANSFER" [note: 'Wire transfer transaction']
  "FINANCIAL__OTHER" [note: 'Other financial transaction']

  // Regulatory Categories
  "REGULATORY__BSA_REPORTING" [note: 'Bank Secrecy Act reporting']
  "REGULATORY__AML_THRESHOLD" [note: 'Anti-Money Laundering threshold transaction']
  "REGULATORY__OFAC_SCREENING" [note: 'OFAC screening transaction']
  "REGULATORY__CTR_REPORT" [note: 'Currency Transaction Report']
  "REGULATORY__SUSPICIOUS_ACTIVITY" [note: 'Suspicious activity flagging']
  "REGULATORY__KYC_VERIFICATION" [note: 'Know Your Customer verification']
  "REGULATORY__PEP_TRANSACTION" [note: 'Politically Exposed Person transaction']
  "REGULATORY__SANCTIONS_CHECK" [note: 'Sanctions list screening']
  "REGULATORY__TAX_REPORTING" [note: 'Tax-related transaction reporting']
  "REGULATORY__FATCA_REPORTING" [note: 'Foreign Account Tax Compliance Act reporting']
  "REGULATORY__OTHER" [note: 'Other regulatory transaction']

  // Risk Management Categories
  "RISK__HIGH_RISK_GEO" [note: 'High-risk geographic transaction']
  "RISK__UNUSUAL_PATTERN" [note: 'Unusual transaction pattern']
  "RISK__VELOCITY_CHECK" [note: 'Rapid succession transactions']
  "RISK__LARGE_CASH_DEPOSIT" [note: 'Significant cash deposit']
  "RISK__CROSS_BORDER" [note: 'International transaction']
  "RISK__FIRST_TIME_MERCHANT" [note: 'Transaction with new merchant']
  "RISK__DEVICE_ANOMALY" [note: 'Unusual device or location']
  "RISK__REPEATED_DECLINED" [note: 'Multiple declined transaction attempts']
  "RISK__OTHER" [note: 'Other risk-related transaction']
}

Table "consumer_banking"."transaction_bank_transaction_codes" {
  "consumer_banking_transaction_bank_transaction_code_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each transaction code record"]
  "consumer_banking_transaction_id" INTEGER [not null, ref: > consumer_banking.transactions.consumer_banking_transaction_id, note: "References the transaction this code belongs to"]
  "code" consumer_banking.transaction_bank_code [not null, note: "Detailed bank-specific transaction classification code"]

  Indexes {
    (consumer_banking_transaction_id, code) [unique, note: "Ensures unique code per transaction"]
  }

  note: "Stores standardized bank transaction codes that categorize transactions with detailed hierarchical classification"
}

Table "consumer_banking"."proprietary_transaction_codes" {
  "consumer_banking_proprietary_transaction_code_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each proprietary code record"]
  "consumer_banking_transaction_id" INTEGER [not null, ref: > consumer_banking.transactions.consumer_banking_transaction_id, note: "References the transaction this code belongs to"]
  "code" VARCHAR(35) [not null, note: "Custom transaction code defined by the issuer"]
  "issuer" VARCHAR(35) [note: "Organization that defined the proprietary code"]

  note: "Stores non-standard proprietary codes for transaction categorization"
}

Table "consumer_banking"."transaction_balances" {
  "consumer_banking_transaction_balance_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each transaction balance record"]
  "consumer_banking_transaction_id" INTEGER [not null, ref: > consumer_banking.transactions.consumer_banking_transaction_id, note: "References the transaction this balance belongs to"]
  "credit_debit_indicator" enterprise.credit_debit_indicator [not null, note: "Indicates if balance is credit or debit"]
  "type" consumer_banking.balance_type [not null, note: "Type of balance (e.g., available, booked)"]
  "amount" NUMERIC(18,5) [not null, note: "Balance amount after the transaction"]
  "currency" enterprise.currency_code [not null, note: "Currency code for the balance amount"]

  note: "Stores account balance information at the time of each transaction"
}

Table "consumer_banking"."transaction_merchant_details" {
  "consumer_banking_transaction_merchant_detail_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each merchant detail record"]
  "consumer_banking_transaction_id" INTEGER [not null, ref: > consumer_banking.transactions.consumer_banking_transaction_id, note: "References the transaction this merchant detail belongs to"]
  "merchant_name" VARCHAR(350) [not null, note: "Name of the merchant involved in the transaction"]
  "merchant_category_code" VARCHAR(20) [not null, note: "Standard code identifying the merchant's business category"]

  note: "Stores information about merchants involved in transactions"
}

Table "consumer_banking"."transaction_creditor_agents" {
  "consumer_banking_transaction_creditor_agent_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each creditor agent record"]
  "consumer_banking_transaction_id" INTEGER [not null, ref: > consumer_banking.transactions.consumer_banking_transaction_id, note: "References the transaction this creditor agent belongs to"]
  "scheme_name" enterprise.identifier_scheme [not null, note: "Identifier scheme for the receiving institution (e.g., BIC)"]
  "identification" VARCHAR(35) [not null, note: "Identifier of the receiving financial institution"]
  "name" VARCHAR(140) [note: "Name of the receiving financial institution"]
  "lei" VARCHAR(20) [note: "Legal Entity Identifier of the receiving institution"]

  note: "Stores information about financial institutions receiving funds in transactions"
}

Table "consumer_banking"."transaction_creditor_accounts" {
  "consumer_banking_transaction_creditor_account_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each creditor account record"]
  "consumer_banking_transaction_id" INTEGER [not null, ref: > consumer_banking.transactions.consumer_banking_transaction_id, note: "References the transaction this creditor account belongs to"]
  "scheme_name" enterprise.identifier_scheme [not null, note: "Account identifier scheme (e.g., IBAN, BBAN)"]
  "identification" VARCHAR(256) [not null, note: "Account identifier receiving the funds"]
  "name" VARCHAR(350) [note: "Name associated with the receiving account"]
  "secondary_identification" VARCHAR(34) [note: "Additional identification for the receiving account"]

  note: "Stores information about accounts receiving funds in transactions"
}

Table "consumer_banking"."transaction_debtor_agents" {
  "consumer_banking_transaction_debtor_agent_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each debtor agent record"]
  "consumer_banking_transaction_id" INTEGER [not null, ref: > consumer_banking.transactions.consumer_banking_transaction_id, note: "References the transaction this debtor agent belongs to"]
  "scheme_name" enterprise.identifier_scheme [not null, note: "Identifier scheme for the sending institution (e.g., BIC)"]
  "identification" VARCHAR(35) [not null, note: "Identifier of the sending financial institution"]
  "name" VARCHAR(140) [note: "Name of the sending financial institution"]
  "lei" VARCHAR(20) [note: "Legal Entity Identifier of the sending institution"]

  note: "Stores information about financial institutions sending funds in transactions"
}

Table "consumer_banking"."transaction_debtor_accounts" {
  "consumer_banking_transaction_debtor_account_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each debtor account record"]
  "consumer_banking_transaction_id" INTEGER [not null, ref: > consumer_banking.transactions.consumer_banking_transaction_id, note: "References the transaction this debtor account belongs to"]
  "scheme_name" enterprise.identifier_scheme [not null, note: "Account identifier scheme (e.g., IBAN, BBAN)"]
  "identification" VARCHAR(256) [not null, note: "Account identifier sending the funds"]
  "name" VARCHAR(350) [note: "Name associated with the sending account"]
  "secondary_identification" VARCHAR(34) [note: "Additional identification for the sending account"]

  note: "Stores information about accounts sending funds in transactions"
}

Enum "consumer_banking"."card_scheme_name" {
  VISA [note: 'Visa card network']
  MASTERCARD [note: 'Mastercard card network']
  AMEX [note: 'American Express card network']
  DISCOVER [note: 'Discover card network']
  DINERS [note: 'Diners Club card network']
  JCB [note: 'Japan Credit Bureau card network']
  UNIONPAY [note: 'China UnionPay card network']
  MAESTRO [note: 'Maestro debit card network']
  INTERAC [note: 'Interac debit card network (Canada)']
  ELO [note: 'Elo card network (Brazil)']
  MIR [note: 'MIR card network (Russia)']
  RUPAY [note: 'RuPay card network (India)']
  OTHER [note: 'Other card schemes not listed']
}

Enum "consumer_banking"."authorization_type" {
  PIN [note: 'Transaction authorized using a Personal Identification Number']
  SIGNATURE [note: 'Transaction authorized using a signature']
  PIN_AND_SIGNATURE [note: 'Transaction authorized using both PIN and signature']
  ONLINE [note: 'Transaction authorized online without physical card presence']
  CONTACTLESS [note: 'Contactless transaction using NFC or similar technology']
  CHIP [note: 'Transaction using EMV chip technology']
  MAGNETIC_STRIPE [note: 'Transaction using magnetic stripe']
  TOKENIZED [note: 'Transaction using tokenized card data (mobile wallet, etc.)']
  BIOMETRIC [note: 'Transaction authorized using biometric data']
  RECURRING [note: 'Pre-authorized recurring transaction']
  MANUAL_ENTRY [note: 'Card details manually entered by merchant']
  OTHER [note: 'Other authorization methods not listed']
}

// Updated table definition to use the enums
Table "consumer_banking"."transaction_card_instruments" {
  "consumer_banking_transaction_card_instrument_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each card instrument record"]
  "consumer_banking_transaction_id" INTEGER [not null, ref: > consumer_banking.transactions.consumer_banking_transaction_id, note: "References the transaction this card instrument belongs to"]
  "card_scheme_name" consumer_banking.card_scheme_name [not null, note: "Card network (e.g., Visa, Mastercard, Amex)"]
  "authorisation_type" consumer_banking.authorization_type [note: "Type of authorization (e.g., PIN, signature, contactless)"]
  "name" VARCHAR(70) [note: "Name of the cardholder as printed on the card"]
  "identification" VARCHAR(34) [note: "Masked card number or other identifier"]

  note: "Stores information about payment cards used in transactions"
}

Table "consumer_banking"."transaction_ultimate_creditors" {
  "consumer_banking_transaction_ultimate_creditor_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each ultimate creditor record"]
  "consumer_banking_transaction_id" INTEGER [not null, ref: > consumer_banking.transactions.consumer_banking_transaction_id, note: "References the transaction this ultimate creditor belongs to"]
  "name" VARCHAR(140) [not null, note: "Name of the final beneficiary/recipient of the funds"]
  "identification" VARCHAR(256) [note: "Identification code for the ultimate creditor"]
  "lei" VARCHAR(20) [note: "Legal Entity Identifier if the ultimate creditor is an organization"]
  "scheme_name" VARCHAR(100) [note: "Identification scheme for the creditor's identifier"]

  note: "Stores information about the final recipient of funds in a transaction chain"
}

Table "consumer_banking"."transaction_ultimate_debtors" {
  "consumer_banking_transaction_ultimate_debtor_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each ultimate debtor record"]
  "consumer_banking_transaction_id" INTEGER [not null, ref: > consumer_banking.transactions.consumer_banking_transaction_id, note: "References the transaction this ultimate debtor belongs to"]
  "name" VARCHAR(140) [not null, note: "Name of the original party initiating the payment"]
  "identification" VARCHAR(256) [note: "Identification code for the ultimate debtor"]
  "lei" VARCHAR(20) [note: "Legal Entity Identifier if the ultimate debtor is an organization"]
  "scheme_name" VARCHAR(100) [note: "Identification scheme for the debtor's identifier"]

  note: "Stores information about the original party that initiated the payment in a transaction chain"
}

Enum "consumer_banking"."statement_format" {
  PDF [note: 'Statements provided in PDF format']
  HTML [note: 'Statements provided in HTML format']
  TEXT [note: 'Statements provided as plain text']
  CSV [note: 'Statements provided in CSV format for data processing']
  XML [note: 'Statements provided in XML format']
  JSON [note: 'Statements provided in JSON format']
}

Enum "consumer_banking"."communication_method" {
  EMAIL [note: 'Statements delivered via email']
  MAIL [note: 'Statements delivered via postal mail']
  PORTAL [note: 'Statements available through online banking portal']
  MOBILE_APP [note: 'Statements available through mobile banking app']
  SMS_NOTIFICATION [note: 'SMS notification when statement is available']
  BRANCH_PICKUP [note: 'Statements available for pickup at branch']
  MULTIPLE [note: 'Statements delivered via multiple methods']
}

Table "consumer_banking"."account_statement_preferences" {
  "consumer_banking_account_id" INTEGER [not null, ref: > consumer_banking.accounts.consumer_banking_account_id]
  "consumer_banking_statement_id" INTEGER [null, ref: > consumer_banking.statements.consumer_banking_statement_id, note: 'Fake relationship, to influence data generator and make statements be created before this record.']
  "frequency" enterprise.frequency [not null]
  "format" consumer_banking.statement_format [not null]
  "communication_method" consumer_banking.communication_method [not null, default: 'EMAIL']
  "next_statement_date" DATE
  "last_statement_date" DATE
  "enterprise_address_id" INTEGER [null, ref: > enterprise.addresses.enterprise_address_id]

  note: "Stores customer preferences for account statements"
}

// Enums for consumer_banking.customer_interactions

Enum "consumer_banking"."interaction_type" {
  PHONE_CALL [note: 'Voice communication via telephone with a customer']
  EMAIL [note: 'Written electronic mail communication']
  CHAT [note: 'Real-time text-based conversation']
  IN_PERSON [note: 'Face-to-face meeting at a branch or other location']
  VIDEO_CALL [note: 'Video conference with customer']
  ONLINE_FORM [note: 'Customer submitted an online form']
  SOCIAL_MEDIA [note: 'Interaction through social media platforms']
  ATM_INTERACTION [note: 'Customer used an ATM for service beyond transactions']
  MOBILE_APP [note: 'Interaction through the bank\'s mobile application']
  MAIL [note: 'Physical mail correspondence']
  SMS [note: 'Text message communication']
  FAX [note: 'Document transmitted via facsimile']
}

Enum "consumer_banking"."interaction_channel" {
  PHONE [note: 'Communication via telephone system']
  EMAIL [note: 'Communication via email system']
  WEB [note: 'Communication through website interface']
  BRANCH [note: 'In-person communication at a physical branch']
  MOBILE_APP [note: 'Communication through mobile banking app']
  ATM [note: 'Interaction via automated teller machine']
  MAIL [note: 'Physical mail communication']
  SOCIAL_MEDIA [note: 'Communication via social media platforms']
  VIDEO [note: 'Communication via video conferencing']
  SMS [note: 'Communication via text messaging']
  THIRD_PARTY [note: 'Communication through a third-party service']
}

Enum "consumer_banking"."interaction_status" {
  OPEN [note: 'Interaction is active and awaiting resolution']
  PENDING [note: 'Interaction is awaiting action from customer or staff']
  IN_PROGRESS [note: 'Work is being done to address the interaction']
  RESOLVED [note: 'Interaction has been completed successfully']
  ESCALATED [note: 'Interaction has been escalated to higher authority']
  TRANSFERRED [note: 'Interaction has been transferred to another department']
  CLOSED [note: 'Interaction is complete with no further action needed']
  FOLLOW_UP [note: 'Resolved but requires future follow-up']
  REOPENED [note: 'Previously resolved interaction that has been reopened']
}

Enum "consumer_banking"."interaction_priority" {
  CRITICAL [note: 'Requires immediate attention, severe impact on customer']
  HIGH [note: 'Urgent issue requiring prompt attention']
  MEDIUM [note: 'Standard priority, should be handled in normal timeframe']
  LOW [note: 'Non-urgent issue that can be addressed when convenient']
  ROUTINE [note: 'Regular communication requiring no special attention']
}

Table "consumer_banking"."customer_interactions" {
  "consumer_banking_interaction_id" SERIAL [pk, increment, note: 'A unique identifier for each interaction.']
  "customer_id" INT [ref: > enterprise.parties.enterprise_party_id, note: 'The ID of the customer involved in the interaction.']
  "account_id" INT [null, ref: > consumer_banking.accounts.consumer_banking_account_id, note: 'The ID of the specific account related to the interaction. This can be NULL if the interaction isn\'t tied to a specific account (e.g., a general inquiry).']
  "enterprise_associate_id" INT [null, ref: > enterprise.associates.enterprise_associate_id, note: 'The ID of the bank employee who handled the interaction. This can be NULL if it was an automated interaction.']
  "interaction_type" consumer_banking.interaction_type [note: 'The type of interaction (e.g., "phone call," "email," "chat," "in-person," "online form," "ATM interaction").']
  "interaction_date_time" TIMESTAMPTZ [note: 'The date and time of the interaction.']
  "channel" consumer_banking.interaction_channel [note: 'The channel through which the interaction occurred (e.g., "phone," "email," "web," "branch," "mobile app").']
  "subject" VARCHAR(255) [null, note: 'A brief subject or title of the interaction.']
  "description" TEXT [null, note: 'A detailed description of the interaction.']
  "resolution" TEXT [null, note: 'Description of how the interaction was resolved.']
  "status" consumer_banking.interaction_status [note: 'The status of the interaction (e.g., "open," "resolved," "pending").']
  "priority" consumer_banking.interaction_priority [null, note: 'The priority of the interaction (e.g., "high," "medium," "low").']
  "related_transaction_id" INT [null, ref: > consumer_banking.transactions.consumer_banking_transaction_id, note: 'If the interaction relates to a specific transaction, this can hold that transaction ID.']
  "created_at" TIMESTAMPTZ [default: `now()`, note: 'When the interaction record was created.']
  "updated_at" TIMESTAMPTZ [default: `now()`, note: 'When the interaction record was last updated.']
}

TableGroup "Consumer Accounts" [color: #2D6512] {
  "consumer_banking"."accounts"
  "consumer_banking"."account_access_consents"
  "consumer_banking"."account_access_consents_permissions"
  "consumer_banking"."balances"
  "consumer_banking"."account_statement_preferences"

  note: "Tables related to consumer-facing account functionality"
}

TableGroup "Beneficiaries" [color: #2D6512] {
  "consumer_banking"."beneficiaries"
  "consumer_banking"."beneficiary_creditor_agents"
  "consumer_banking"."beneficiary_creditor_accounts"

  note: "Tables related to payment beneficiary management"
}

TableGroup "Offers & Products" [color: #2D6512] {
  "consumer_banking"."offers"
  "consumer_banking"."products"
  "consumer_banking"."other_product_types"

  note: "Tables related to banking products and promotional offers"
}

TableGroup "Statements" [color: #2D6512] {
  "consumer_banking"."statements"
  "consumer_banking"."statement_descriptions"
  "consumer_banking"."statement_benefits"
  "consumer_banking"."statement_fees"
  "consumer_banking"."statement_interests"
  "consumer_banking"."statement_amounts"
  "consumer_banking"."statement_date_times"
  "consumer_banking"."statement_rates"
  "consumer_banking"."statement_values"

  note: "Tables related to account statement generation and content"
}

TableGroup "Transactions" [color: #2D6512] {
  "consumer_banking"."transactions"
  "consumer_banking"."transaction_statement_references"
  "consumer_banking"."transaction_currency_exchanges"
  "consumer_banking"."transaction_bank_transaction_codes"
  "consumer_banking"."proprietary_transaction_codes"
  "consumer_banking"."transaction_balances"
  "consumer_banking"."transaction_merchant_details"
  "consumer_banking"."transaction_creditor_agents"
  "consumer_banking"."transaction_creditor_accounts"
  "consumer_banking"."transaction_debtor_agents"
  "consumer_banking"."transaction_debtor_accounts"
  "consumer_banking"."transaction_card_instruments"
  "consumer_banking"."transaction_ultimate_creditors"
  "consumer_banking"."transaction_ultimate_debtors"
  "consumer_banking"."standing_orders"
  "consumer_banking"."standing_order_creditor_agents"
  "consumer_banking"."standing_order_creditor_accounts"
  "consumer_banking"."scheduled_payments"
  "consumer_banking"."scheduled_payment_creditor_agents"
  "consumer_banking"."scheduled_payment_creditor_accounts"
  "consumer_banking"."direct_debits"
  "consumer_banking"."mandate_related_information"

  note: "Tables related to financial transactions, including payment details, currency exchanges, transaction codes, merchant information, and payment schedules"
}

//
// MORTGAGE SERVICES
//

// Create enum types for borrower_type
Enum "mortgage_services"."borrower_type" {
  PRIMARY [note: 'Main applicant responsible for the loan']
  CO_BORROWER [note: 'Additional applicant with equal responsibility']
  GUARANTOR [note: 'Person who guarantees the loan but does not have ownership']
  COSIGNER [note: 'Additional person who shares liability for the loan']
}

// Create enum types for relationship_type
Enum "mortgage_services"."relationship_type" {
  SPOUSE [note: 'Married partner of the primary borrower']
  PARENT [note: 'Parent of the primary borrower']
  CHILD [note: 'Child of the primary borrower']
  SIBLING [note: 'Brother or sister of the primary borrower']
  FRIEND [note: 'Non-related personal acquaintance']
  BUSINESS_PARTNER [note: 'Professional business relationship']
  OTHER [note: 'Relationship not covered by other categories']
}

// Modified application_borrowers table
Table "mortgage_services"."application_borrowers" {
  "mortgage_services_application_borrower_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each application-borrower relationship"]
  "mortgage_services_application_id" INTEGER [pk, not null, ref: > mortgage_services.applications.mortgage_services_application_id, note: "References the mortgage application"]
  "mortgage_services_borrower_id" INTEGER [not null, ref: > mortgage_services.borrowers.mortgage_services_borrower_id, note: "References the borrower associated with this application"]
  "borrower_type" mortgage_services.borrower_type [not null, note: "Role of this borrower (Primary, Co-Borrower, etc.)"]
  "relationship_to_primary" mortgage_services.relationship_type [note: "Relationship of co-borrower to primary borrower"]
  "contribution_percentage" NUMERIC(5,2) [note: "Percentage of financial contribution to the loan"]

  note: "Junction table linking mortgage applications to borrowers, supporting multiple borrowers per application and tracking their roles and relationships"
}

Table "mortgage_services"."borrowers" {
  "mortgage_services_borrower_id" SERIAL [pk, increment, note: "Unique identifier for each borrower"]
  "enterprise_party_id" INTEGER [not null, ref: > enterprise.parties.enterprise_party_id, note: "Reference to enterprise party record - the source of truth for personal information"]
  "years_in_school" INTEGER [note: "Total years of education"]
  "dependent_count" INTEGER [note: "Number of dependents claimed by borrower"]
  "current_address_id" INTEGER [ref: > enterprise.addresses.enterprise_address_id, note: "References borrower's current address"]
  "mailing_address_id" INTEGER [ref: > enterprise.addresses.enterprise_address_id, note: "References borrower's mailing address if different"]
  "previous_address_id" INTEGER [ref: > enterprise.addresses.enterprise_address_id, note: "References borrower's previous address if relevant"]

  note: "Stores mortgage-specific information about borrowers, note additional personal information stored in the enterprise parties table"
}

Table "mortgage_services"."borrower_employments" {
  "mortgage_services_employment_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each employment record"]
  "mortgage_services_borrower_id" INTEGER [not null, ref: > mortgage_services.borrowers.mortgage_services_borrower_id, note: "References the borrower this employment belongs to"]
  "employer_name" VARCHAR(150) [not null, note: "Name of the employer"]
  "position" VARCHAR(100) [not null, note: "Job title or position"]
  "phone" VARCHAR(30) [note: "Employer's phone number"]
  "employment_type" "mortgage_services"."employment_type" [not null, note: "Type of employment arrangement"]
  "start_date" DATE [not null, note: "When employment began"]
  "end_date" DATE [note: "When employment ended, if applicable"]
  "is_current" BOOLEAN [not null, note: "Indicates if this is the borrower's current job"]
  "years_in_profession" INTEGER [note: "Total years in this profession, even at different employers"]
  "monthly_income" NUMERIC(18,2) [not null, note: "Gross monthly income from this employment"]
  "verification_status" "mortgage_services"."verification_status" [not null, note: "Status of income verification process"]
  "verification_date" DATE [note: "When the income was verified"]

  note: "Tracks employment history and income sources for mortgage borrowers"
}

Enum "mortgage_services"."employment_type" {
  "FULL_TIME"
  "PART_TIME"
  "SELF_EMPLOYED"
  "CONTRACTOR"
  "SEASONAL"
  "COMMISSION"
  "RETIRED"
  "UNEMPLOYED"
  "MILITARY"
  "OTHER"
}

Enum "mortgage_services"."verification_status" {
  "VERIFIED"
  "PENDING"
  "UNVERIFIED"
  "FAILED"
  "WAIVED"
  "EXPIRED"
}

Table "mortgage_services"."borrower_incomes" {
  "mortgage_services_income_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each income record"]
  "mortgage_services_borrower_id" INTEGER [not null, ref: > mortgage_services.borrowers.mortgage_services_borrower_id, note: "References the borrower this income belongs to"]
  "income_type" "mortgage_services"."income_type" [not null, note: "Source or type of income"]
  "amount" NUMERIC(18,2) [not null, note: "Income amount"]
  "frequency" "mortgage_services"."income_frequency" [not null, note: "How often income is received"]
  "verification_status" "mortgage_services"."verification_status" [not null, note: "Status of income verification process"]
  "verification_date" DATE [note: "When the income was verified"]

  note: "Tracks various income sources for mortgage borrowers beyond employment"
}

Enum "mortgage_services"."income_type" {
  "SALARY"
  "BONUS"
  "COMMISSION"
  "OVERTIME"
  "SELF_EMPLOYMENT"
  "RENTAL"
  "INVESTMENT"
  "RETIREMENT"
  "PENSION"
  "SOCIAL_SECURITY"
  "DISABILITY"
  "ALIMONY"
  "CHILD_SUPPORT"
  "TRUST"
  "GOVERNMENT_ASSISTANCE"
  "ROYALTIES"
  "OTHER"
}

Enum "mortgage_services"."income_frequency" {
  WEEKLY [note: 'Income received once per week']
  BI_WEEKLY [note: 'Income received every two weeks']
  SEMI_MONTHLY [note: 'Income received twice per month']
  MONTHLY [note: 'Income received once per month']
  QUARTERLY [note: 'Income received every three months']
  SEMI_ANNUALLY [note: 'Income received twice per year']
  ANNUALLY [note: 'Income received once per year']
  IRREGULAR [note: 'Income received on an irregular basis']
}

Table "mortgage_services"."borrower_assets" {
  "mortgage_services_asset_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each asset record"]
  "mortgage_services_borrower_id" INTEGER [not null, ref: > mortgage_services.borrowers.mortgage_services_borrower_id, note: "References the borrower this asset belongs to"]
  "asset_type" mortgage_services.asset_type [not null, note: "Type of asset (e.g., bank account, property)"]
  "institution_name" VARCHAR(100) [note: "Financial institution holding the asset"]
  "account_number" VARCHAR(50) [note: "Account number for financial assets"]
  "current_value" NUMERIC(18,2) [not null, note: "Current estimated value of the asset"]
  "verification_status" "mortgage_services"."verification_status" [not null, note: "Status of asset verification process"]
  "verification_date" DATE [note: "When the asset was verified"]
  "property_address" VARCHAR(500) [note: "Full text address for real estate assets"]

  note: "Tracks assets owned by borrowers that may be relevant to mortgage qualification"
}

Enum "mortgage_services"."asset_type" {
  "CHECKING_ACCOUNT"
  "SAVINGS_ACCOUNT"
  "MONEY_MARKET"
  "CERTIFICATE_OF_DEPOSIT"
  "BROKERAGE_ACCOUNT"
  "RETIREMENT_ACCOUNT"
  "INVESTMENT_PROPERTY"
  "PRIMARY_RESIDENCE"
  "SECONDARY_RESIDENCE"
  "OTHER_REAL_ESTATE"
  "MUTUAL_FUND"
  "STOCK_EQUITY"
  "BONDS"
  "LIFE_INSURANCE"
  "VEHICLE"
  "BUSINESS_EQUITY"
  "TRUST_ACCOUNT"
  "CRYPTOCURRENCY"
  "OTHER"
}

// Create DBML enum for mortgage_services.liability_type

Enum "mortgage_services"."liability_type" {
  CREDIT_CARD [note: 'Revolving credit card debt']
  AUTO_LOAN [note: 'Loan for vehicle purchase']
  STUDENT_LOAN [note: 'Educational loan']
  PERSONAL_LOAN [note: 'Unsecured personal loan']
  MORTGAGE [note: 'Home mortgage loan']
  HOME_EQUITY_LOAN [note: 'Loan secured by home equity']
  HOME_EQUITY_LINE_OF_CREDIT [note: 'Revolving line of credit secured by home equity']
  MEDICAL_DEBT [note: 'Outstanding medical bills or healthcare-related debt']
  BUSINESS_LOAN [note: 'Loan for business purposes']
  RETAIL_CREDIT [note: 'Credit account with a retailer']
  INSTALLMENT_LOAN [note: 'Fixed-term loan with regular payments']
  PAYDAY_LOAN [note: 'Short-term, high-interest loan']
  TAX_DEBT [note: 'Outstanding tax liabilities']
  OTHER [note: 'Liability type not covered by standard categories']
}

// Update the borrower_liabilities table to use the enum
Table "mortgage_services"."borrower_liabilities" {
  "mortgage_services_liability_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each liability record"]
  "mortgage_services_borrower_id" INTEGER [not null, ref: > mortgage_services.borrowers.mortgage_services_borrower_id, note: "References the borrower this liability belongs to"]
  "liability_type" mortgage_services.liability_type [not null, note: "Type of debt or obligation"]
  "creditor_name" VARCHAR(100) [not null, note: "Name of creditor"]
  "account_number" VARCHAR(50) [note: "Account number for the liability"]
  "monthly_payment" NUMERIC(18,2) [not null, note: "Regular monthly payment amount"]
  "current_balance" NUMERIC(18,2) [not null, note: "Current outstanding balance"]
  "original_amount" NUMERIC(18,2) [note: "Original amount of the liability"]
  "interest_rate" NUMERIC(6,3) [note: "Current interest rate on the liability"]
  "origination_date" DATE [note: "When the liability was originated"]
  "maturity_date" DATE [note: "When the liability is scheduled to be fully paid"]
  "verification_status" mortgage_services.verification_status [not null, note: "Status of liability verification process"]
  "verification_date" DATE [note: "When the liability was verified"]
  "will_be_paid_off" BOOLEAN [not null, default: false, note: "Whether this liability will be paid off with the mortgage proceeds"]

  note: "Tracks debts and financial obligations of mortgage borrowers"
}

// Create new enums for mortgage_services.properties

Enum "mortgage_services"."property_type" {
  SINGLE_FAMILY [note: 'Single family detached home']
  CONDO [note: 'Condominium unit']
  TOWNHOUSE [note: 'Townhouse or row house']
  MULTI_FAMILY [note: 'Multi-family dwelling (2-4 units)']
  APARTMENT_BUILDING [note: 'Apartment building (5+ units)']
  MANUFACTURED_HOME [note: 'Manufactured or mobile home']
  COOPERATIVE [note: 'Housing cooperative unit']
  PUD [note: 'Planned Unit Development']
  VACANT_LAND [note: 'Undeveloped land parcel']
  COMMERCIAL [note: 'Commercial property']
  MIXED_USE [note: 'Property with both residential and commercial components']
  FARM [note: 'Agricultural property']
  OTHER [note: 'Property type not covered by standard categories']
}

Enum "mortgage_services"."occupancy_type" {
  PRIMARY_RESIDENCE [note: 'Property will be used as the borrower\'s primary residence']
  SECONDARY_RESIDENCE [note: 'Property will be used as a vacation or second home']
  INVESTMENT [note: 'Property will be used as an investment (e.g., rental)']
  NOT_APPLICABLE [note: 'Occupancy type not applicable or unspecified']
}

// Update the properties table definition to use the new enums
Table "mortgage_services"."properties" {
  "mortgage_services_property_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each property record"]
  "mortgage_services_application_id" INTEGER [not null, ref: > mortgage_services.applications.mortgage_services_application_id, note: "References the mortgage application this property is associated with"]
  "address" VARCHAR(500) [not null, note: "References the complete property address"]
  "property_type" mortgage_services.property_type [not null, note: "Type of property"]
  "occupancy_type" mortgage_services.occupancy_type [not null, note: "How the property will be used by the borrower"]
  "year_built" INTEGER [note: "Year the property was constructed"]
  "bedrooms" INTEGER [note: "Number of bedrooms"]
  "bathrooms" NUMERIC(3,1) [note: "Number of bathrooms (allows for half baths)"]
  "square_feet" INTEGER [note: "Total living area in square feet"]
  "lot_size" NUMERIC(10,2) [note: "Size of the property lot"]
  "hoa_dues" NUMERIC(10,2) [note: "Monthly homeowners association fees if applicable"]
  "is_new_construction" BOOLEAN [note: "Indicates if the property is newly constructed"]
  "construction_completion_date" DATE [note: "Expected completion date for new construction"]

  note: "Stores information about properties being purchased or refinanced"
}

// Enums for Mortgage Services Applications

Enum "mortgage_services"."application_type" {
  PURCHASE [note: 'Buying a new home']
  REFINANCE [note: 'Refinancing an existing mortgage']
  CASH_OUT [note: 'Refinancing to access home equity']
  CONSTRUCTION [note: 'New home construction loan']
  HOME_IMPROVEMENT [note: 'Loan for home renovations']
  RENOVATION [note: 'Loan specifically for property renovation']
  REVERSE_MORTGAGE [note: 'Mortgage for older homeowners to access home equity']
  JUMBO [note: 'Loan exceeding conventional loan limits']
  FHA [note: 'Federal Housing Administration insured loan']
  VA [note: 'Veterans Affairs guaranteed loan']
  USDA [note: 'United States Department of Agriculture rural development loan']
  LAND [note: 'Land purchase loan']
  OTHER [note: 'Other types of mortgage applications']
}

Enum "mortgage_services"."application_status" {
  DRAFT [note: 'Application is in initial drafting stage']
  SUBMITTED [note: 'Application has been submitted for initial review']
  IN_REVIEW [note: 'Application is being reviewed by underwriting']
  ADDITIONAL_INFO_REQUIRED [note: 'More information needed from applicant']
  CONDITIONAL_APPROVAL [note: 'Approved with specific conditions']
  APPROVED [note: 'Application fully approved']
  DENIED [note: 'Application has been rejected']
  WITHDRAWN [note: 'Applicant withdrew the application']
  EXPIRED [note: 'Application has passed its validity period']
  SUSPENDED [note: 'Application review is temporarily paused']
}

Enum "mortgage_services"."loan_purpose" {
  PRIMARY_RESIDENCE [note: 'Home will be primary residence']
  SECOND_HOME [note: 'Home will be a secondary/vacation residence']
  INVESTMENT_PROPERTY [note: 'Property purchased as an investment']
  RENTAL [note: 'Property intended for rental income']
  VACATION_HOME [note: 'Vacation or recreational property']
  MULTI_FAMILY [note: 'Property with multiple residential units']
  RELOCATION [note: 'Home purchase due to job relocation']
  OTHER [note: 'Other purpose not specified']
}

Enum "mortgage_services"."submission_channel" {
  ONLINE [note: 'Application submitted through online portal']
  MOBILE_APP [note: 'Application submitted via mobile application']
  BRANCH [note: 'Application submitted in-person at a branch']
  PHONE [note: 'Application submitted over the phone']
  MAIL [note: 'Application submitted via postal mail']
  REFERRAL [note: 'Application submitted through a referral']
  BROKER [note: 'Application submitted through a mortgage broker']
  EMAIL [note: 'Application submitted via email']
  OTHER [note: 'Submission through other channels']
}

// Update the applications table with new enums
Table "mortgage_services"."applications" {
  "mortgage_services_application_id" SERIAL [pk, increment, note: "Unique identifier for each mortgage application"]
  "mortgage_services_loan_product_id" INTEGER [not null, ref: > mortgage_services.loan_products.mortgage_services_loan_product_id, note: "References the loan product being applied for"]
  "application_type" mortgage_services.application_type [not null, note: "Type of mortgage application"]
  "status" mortgage_services.application_status [not null, note: "Current status in the application workflow"]
  "loan_purpose" mortgage_services.loan_purpose [note: "Purpose of the loan"]
  "submission_channel" mortgage_services.submission_channel [note: "Channel through which application was submitted"]
  "creation_date_time" TIMESTAMPTZ [not null, note: "When the application was created"]
  "submission_date_time" TIMESTAMPTZ [note: "When the application was formally submitted"]
  "last_updated_date_time" TIMESTAMPTZ [not null, note: "When the application was last modified"]
  "requested_loan_amount" NUMERIC(18,2) [not null, note: "Amount of financing requested"]
  "requested_loan_term_months" INTEGER [not null, note: "Requested duration of the loan in months"]
  "estimated_property_value" NUMERIC(18,2) [note: "Estimated value of the property"]
  "estimated_credit_score" INTEGER [note: "Estimated credit score of primary applicant"]
  "referral_source" VARCHAR(100) [note: "How the applicant learned about the mortgage product"]
  "loan_officer_id" INTEGER [ref: > enterprise.associates.enterprise_associate_id, note: "References the loan officer handling the application"]
  "branch_id" INTEGER [ref: > enterprise.buildings.enterprise_building_id, note: "References the branch processing the application"]

  note: "Stores mortgage application details and tracks application status. Note that the primary borrower is accessible through the application_borrowers table, not directly from this table."
}

Table "mortgage_services"."loans" {
  "mortgage_services_loan_id" SERIAL [pk, increment, note: "Unique identifier for each loan"]
  "mortgage_services_application_id" INTEGER [not null, ref: > mortgage_services.applications.mortgage_services_application_id, note: "References the mortgage application this loan is associated with"]
  "enterprise_account_id" INTEGER [not null, ref: > enterprise.accounts.enterprise_account_id, note: "References the enterprise account for this loan"]
  "interest_rate" NUMERIC(6,3) [note: "Final annual percentage rate for the loan"]
  "loan_term_months" INTEGER [note: "Final duration of the loan in months"]
  "loan_amount" NUMERIC(18,2) [note: "Final principal amount of the loan"]
  "down_payment" NUMERIC(18,2) [note: "Final amount paid upfront by the borrower"]
  "down_payment_percentage" NUMERIC(5,2) [note: "Final down payment as a percentage of purchase price"]
  "closing_costs" NUMERIC(18,2) [note: "Actual fees and costs paid at closing"]
  "monthly_payment" NUMERIC(18,2) [note: "Actual monthly payment including principal and interest"]
  "private_mortgage_insurance" BOOLEAN [note: "Whether PMI is required for this loan"]
  "pmi_rate" NUMERIC(5,3) [note: "Actual PMI rate applied to this loan"]
  "escrow_amount" NUMERIC(18,2) [note: "Actual monthly amount collected for taxes and insurance"]
  "origination_date" DATE [note: "When the loan was originated"]
  "first_payment_date" DATE [note: "Due date of the first loan payment"]
  "maturity_date" DATE [note: "When the loan will be fully paid off"]

  note: "Stores final, actual loan details after closing. Now includes reference to enterprise account."
}

// Enums for Mortgage Services Loan Products

Enum "mortgage_services"."loan_type" {
  CONVENTIONAL [note: 'Standard mortgage not insured by government']
  FHA [note: 'Federal Housing Administration insured loan']
  VA [note: 'Veterans Affairs guaranteed loan']
  USDA [note: 'United States Department of Agriculture rural development loan']
  JUMBO [note: 'Loan exceeding conventional loan limits']
  CONSTRUCTION [note: 'Loan for new home construction']
  HOME_EQUITY [note: 'Line of credit or loan using home equity']
  REFINANCE [note: 'Loan to replace existing mortgage']
  REVERSE_MORTGAGE [note: 'Loan for seniors to access home equity']
  OTHER [note: 'Other loan types not specified']
}

Enum "mortgage_services"."interest_rate_type" {
  FIXED [note: 'Interest rate remains constant throughout loan term']
  ADJUSTABLE [note: 'Interest rate can change periodically based on market index']
  HYBRID [note: 'Combines fixed and adjustable rate periods (e.g., 5/1 ARM)']
  INTEREST_ONLY [note: 'Periods where only interest is paid']
  STEP_RATE [note: 'Interest rate increases or decreases in predetermined steps']
  BALLOON [note: 'Large final payment after a series of smaller payments']
  OTHER [note: 'Other interest rate structures']
}

Table "mortgage_services"."loan_products" {
  "mortgage_services_loan_product_id" SERIAL [pk, increment, note: "Unique identifier for each loan product"]
  "product_name" VARCHAR(100) [not null, note: "Marketing name of the loan product"]
  "product_code" VARCHAR(20) [not null, note: "Internal code identifying the loan product"]
  "loan_type" mortgage_services.loan_type [not null, note: "Type of loan product"]
  "interest_rate_type" mortgage_services.interest_rate_type [not null, note: "Type of interest rate structure"]
  "description" TEXT [note: "Detailed description of the loan product and its features"]
  "base_interest_rate" NUMERIC(6,3) [not null, note: "Starting interest rate for this product"]
  "min_term_months" INTEGER [not null, note: "Minimum loan duration in months"]
  "max_term_months" INTEGER [not null, note: "Maximum loan duration in months"]
  "min_loan_amount" NUMERIC(18,2) [note: "Minimum principal amount for this product"]
  "max_loan_amount" NUMERIC(18,2) [note: "Maximum principal amount for this product"]
  "min_credit_score" INTEGER [note: "Minimum credit score typically required"]
  "min_down_payment_percentage" NUMERIC(5,2) [note: "Minimum down payment as percentage of purchase price"]
  "requires_pmi" BOOLEAN [note: "Whether private mortgage insurance is required"]
  "is_active" BOOLEAN [not null, default: true, note: "Whether this product is currently offered"]
  "launch_date" DATE [note: "Date when product was launched"]
  "discontinue_date" DATE [note: "Date when product was discontinued if applicable"]

  note: "Defines mortgage loan products available to applicants"
}

Enum "mortgage_services"."loan_rate_lock_status" {
  Active
  Locked
  Expired
  Closed
}

Table "mortgage_services"."loan_rate_locks" {
  "mortgage_services_rate_lock_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each rate lock"]
  "mortgage_services_loan_id" INTEGER [not null, ref: > mortgage_services.loans.mortgage_services_loan_id, note: "References the loan this rate lock applies to"]
  "lock_date" TIMESTAMPTZ [not null, note: "When the interest rate was locked"]
  "expiration_date" TIMESTAMPTZ [not null, note: "When the rate lock expires"]
  "locked_interest_rate" NUMERIC(6,3) [not null, note: "The interest rate secured by this lock"]
  "lock_period_days" INTEGER [not null, note: "Duration of the lock in days"]
  "status" mortgage_services.loan_rate_lock_status [not null, note: "Current status of the rate lock"]
  "lock_fee" NUMERIC(10,2) [note: "Fee charged for the rate lock, if any"]
  "extension_date" TIMESTAMPTZ [note: "Date the lock was extended, if applicable"]
  "extension_fee" NUMERIC(10,2) [note: "Fee charged for extending the lock, if any"]

  note: "Tracks interest rate locks for mortgage loans"
}

Enum "mortgage_services"."document_type" {
  TAX_RETURN [note: 'Personal or business tax documents']
  W2 [note: 'Wage and tax statement forms']
  PAY_STUB [note: 'Employment income documentation']
  BANK_STATEMENT [note: 'Financial account statements showing cash flow and balances']
  CREDIT_REPORT [note: 'Credit history documentation']
  ASSET_STATEMENT [note: 'Documentation verifying ownership of assets']
  IDENTITY_VERIFICATION [note: 'Documents verifying borrower identity']
  PROPERTY_APPRAISAL [note: 'Property value assessment report']
  PURCHASE_AGREEMENT [note: 'Contract for the purchase of property']
  TITLE_INSURANCE [note: 'Documentation of title insurance']
  CLOSING_DISCLOSURE [note: 'Final loan terms and closing costs']
  LOAN_ESTIMATE [note: 'Initial estimate of loan terms and costs']
  MORTGAGE_NOTE [note: 'Promise to repay the mortgage loan']
  DEED [note: 'Legal document showing property ownership']
  INSURANCE_PROOF [note: 'Documentation of property insurance']
  LETTER_OF_EXPLANATION [note: 'Clarification of specific financial or credit issues']
  GIFT_LETTER [note: 'Documentation of financial gift for down payment']
  SELF_EMPLOYMENT [note: 'Business documentation for self-employed borrowers']
  BANKRUPTCY_DISCHARGE [note: 'Documentation of bankruptcy resolution']
  DIVORCE_DECREE [note: 'Legal documentation of divorce settlement']
  OTHER [note: 'Document type not falling into standard categories']
}

Enum "mortgage_services"."document_status" {
  PENDING [note: 'Document awaiting initial review']
  REVIEWED [note: 'Document has been examined']
  ACCEPTED [note: 'Document has been approved and accepted']
  REJECTED [note: 'Document was not accepted']
  REQUIRES_REVISION [note: 'Document needs updates or corrections']
  IN_REVIEW [note: 'Document is currently being reviewed']
  ARCHIVED [note: 'Document has been filed and stored']
  EXPIRED [note: 'Document is no longer valid']
  OTHER [note: 'Document status not falling into standard categories']
}

Table "mortgage_services"."documents" {
  "mortgage_services_document_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each document"]
  "mortgage_services_application_id" INTEGER [not null, ref: > mortgage_services.applications.mortgage_services_application_id, note: "References the application this document belongs to"]
  "document_type" mortgage_services.document_type [not null, note: "Category of document (e.g., W2, Tax Return)"]
  "document_name" VARCHAR(255) [not null, note: "Filename or display name of the document"]
  "document_path" VARCHAR(500) [not null, note: "Storage location or path to access the document"]
  "upload_date" TIMESTAMPTZ [not null, note: "When the document was uploaded"]
  "status" mortgage_services.document_status [not null, note: "Current review status of the document"]
  "review_date" TIMESTAMPTZ [note: "When the document was reviewed"]
  "reviewer_id" INTEGER [ref: > enterprise.associates.enterprise_associate_id, note: "References the staff member who reviewed the document"]
  "expiration_date" DATE [note: "When the document expires or needs to be updated"]
  "notes" TEXT [note: "Additional information about the document"]

  note: "Stores and tracks documents submitted for mortgage applications"
}

Enum "mortgage_services"."condition_type" {
  PRIOR_TO_APPROVAL [note: 'Condition must be satisfied before loan approval']
  PRIOR_TO_CLOSING [note: 'Condition must be satisfied before loan closing']
  PRIOR_TO_FUNDING [note: 'Condition must be satisfied before loan funding']
  PRIOR_TO_DOCS [note: 'Condition must be satisfied before document preparation']
  AT_CLOSING [note: 'Condition must be satisfied at loan closing']
  POST_CLOSING [note: 'Condition must be satisfied after loan closing']
  UNDERWRITER_REQUIREMENT [note: 'General underwriter requirement']
  AGENCY_REQUIREMENT [note: 'Required by government agency or investor']
  OTHER [note: 'Condition type not falling into standard categories']
}

Enum "mortgage_services"."condition_status" {
  PENDING [note: 'Condition has been created but not yet reviewed or fulfilled']
  IN_PROCESS [note: 'Condition is being actively worked on']
  SUBMITTED [note: 'Documentation for the condition has been submitted for review']
  ACCEPTED [note: 'Condition has been satisfied and accepted']
  REJECTED [note: 'Submitted documentation was rejected']
  WAIVED [note: 'Condition requirement has been waived']
  EXPIRED [note: 'Condition has expired and is no longer relevant']
  CLEARED [note: 'Condition has been successfully cleared']
  OTHER [note: 'Status not falling into standard categories']
}

Table "mortgage_services"."conditions" {
  "mortgage_services_condition_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each condition"]
  "mortgage_services_application_id" INTEGER [not null, ref: > mortgage_services.applications.mortgage_services_application_id, note: "References the application this condition applies to"]
  "condition_type" mortgage_services.condition_type [not null, note: "When the condition must be satisfied"]
  "description" TEXT [not null, note: "Detailed explanation of what must be provided or resolved"]
  "status" mortgage_services.condition_status [not null, note: "Current status of the condition"]
  "created_date" TIMESTAMPTZ [not null, note: "When the condition was created"]
  "created_by_id" INTEGER [not null, ref: > enterprise.associates.enterprise_associate_id, note: "References the staff member who created the condition"]
  "due_date" DATE [note: "Deadline for satisfying the condition"]
  "cleared_date" TIMESTAMPTZ [note: "When the condition was satisfied or waived"]
  "cleared_by_id" INTEGER [null, ref: > enterprise.associates.enterprise_associate_id, note: "References the staff member who cleared the condition"]

  note: "Tracks underwriting conditions that must be cleared for loan approval"
}

Enum "mortgage_services"."appraisal_type" {
  FULL_APPRAISAL [note: 'Complete property evaluation with interior and exterior inspection']
  DRIVE_BY [note: 'Exterior-only appraisal without interior inspection']
  DESKTOP [note: 'Appraisal completed without a physical inspection of the property']
  BPO [note: 'Broker Price Opinion conducted by a real estate agent rather than a licensed appraiser']
  AVM [note: 'Automated Valuation Model using statistical analysis without physical inspection']
  APPRAISAL_UPDATE [note: 'Update to a previous appraisal report']
  FIELD_REVIEW [note: 'Review of another appraiser\'s work including a physical inspection']
  DESK_REVIEW [note: 'Review of another appraiser\'s work without physical inspection']
  RECERTIFICATION [note: 'Verification that a property\'s condition and value remain unchanged']
  FHA_APPRAISAL [note: 'Specialized appraisal meeting Federal Housing Administration requirements']
  VA_APPRAISAL [note: 'Specialized appraisal meeting Veterans Affairs requirements']
  USDA_APPRAISAL [note: 'Specialized appraisal meeting USDA Rural Development requirements']
  OTHER [note: 'Appraisal type not falling into standard categories']
}

Enum "mortgage_services"."appraisal_status" {
  ORDERED [note: 'Appraisal has been requested but not yet assigned to an appraiser']
  ASSIGNED [note: 'Appraisal has been assigned to an appraiser']
  SCHEDULED [note: 'Inspection date has been scheduled']
  INSPECTION_COMPLETED [note: 'Property inspection has been completed']
  IN_PROGRESS [note: 'Appraisal report is being prepared']
  SUBMITTED [note: 'Appraisal report has been submitted for review']
  UNDER_REVIEW [note: 'Appraisal report is being reviewed']
  REVISION_NEEDED [note: 'Revisions requested to the appraisal report']
  COMPLETED [note: 'Appraisal is complete and approved']
  REJECTED [note: 'Appraisal has been rejected']
  CANCELLED [note: 'Appraisal has been cancelled before completion']
  EXPIRED [note: 'Appraisal has passed its validity period']
  OTHER [note: 'Status not falling into standard categories']
}

Table "mortgage_services"."appraisals" {
  "mortgage_services_appraisal_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each appraisal"]
  "mortgage_services_application_id" INTEGER [not null, ref: > mortgage_services.applications.mortgage_services_application_id, note: "References the application this appraisal is for"]
  "mortgage_services_property_id" INTEGER [not null, ref: > mortgage_services.properties.mortgage_services_property_id, note: "References the property being appraised"]
  "appraisal_type" mortgage_services.appraisal_type [not null, note: "Type of appraisal being performed"]
  "ordered_date" TIMESTAMPTZ [not null, note: "When the appraisal was ordered"]
  "appraiser_name" VARCHAR(100) [note: "Name of the assigned appraiser"]
  "appraisal_company" VARCHAR(100) [note: "Company performing the appraisal"]
  "inspection_date" DATE [note: "When the property was inspected"]
  "completion_date" DATE [note: "When the appraisal was completed"]
  "appraised_value" NUMERIC(18,2) [note: "Value determined by the appraisal"]
  "status" mortgage_services.appraisal_status [not null, note: "Current status of the appraisal process"]
  "appraisal_fee" NUMERIC(10,2) [note: "Fee charged for the appraisal"]
  "report_path" VARCHAR(500) [note: "Storage location of the appraisal report"]

  note: "Manages property appraisals for mortgage loans"
}

// First, let's create the missing enums for credit reports

Enum "mortgage_services"."credit_report_type" {
  TRI_MERGE [note: 'Credit report combining data from all three major bureaus']
  SINGLE_BUREAU [note: 'Credit report from a single credit bureau']
  MERGED_BUREAU [note: 'Credit report merging data from two bureaus']
  EXPANDED [note: 'Comprehensive report with additional details']
  CUSTOM [note: 'Customized report with specific requirements']
  OTHER [note: 'Report type not falling into standard categories']
}

Enum "mortgage_services"."credit_bureau" {
  EQUIFAX [note: 'Equifax credit reporting agency']
  EXPERIAN [note: 'Experian credit reporting agency']
  TRANSUNION [note: 'TransUnion credit reporting agency']
  INNOVIS [note: 'Innovis credit reporting agency']
  CLEAR_REPORT [note: 'Alternative credit reporting service']
  OTHER [note: 'Credit bureau not listed']
}

// Now, let's update the credit_reports table to use these enums
// We'll also reuse the existing mortgage_services.verification_status enum for the report status

Table "mortgage_services"."credit_reports" {
  "mortgage_services_credit_report_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each credit report"]
  "mortgage_services_application_id" INTEGER [not null, ref: > mortgage_services.applications.mortgage_services_application_id, note: "Reference to applications"]
  "mortgage_services_borrower_id" INTEGER [not null, ref: > mortgage_services.borrowers.mortgage_services_borrower_id, note: "Reference to borrower this credit report is for"]
  "report_date" TIMESTAMPTZ [not null, note: "When credit report was pulled"]
  "expiration_date" DATE [not null, note: "When credit report expires"]
  "credit_score" INTEGER [note: "Credit score from the report"]
  "report_type" mortgage_services.credit_report_type [not null, note: "Type of credit report pulled"]
  "bureau_name" mortgage_services.credit_bureau [note: "Credit bureau providing the report"]
  "report_path" VARCHAR(500) [note: "Path to stored credit report"]
  "status" mortgage_services.verification_status [not null, note: "Status of credit report retrieval"]

  note: "Tracks credit reports pulled for mortgage applications"
}

// Create enum for disclosure types
Enum "mortgage_services"."disclosure_type" {
  LOAN_ESTIMATE [note: 'Initial disclosure of loan terms and estimated costs']
  CLOSING_DISCLOSURE [note: 'Final disclosure showing actual loan terms and closing costs']
  CHANGE_IN_TERMS [note: 'Notification of changes to previously disclosed terms']
  REVISED_CLOSING_DISCLOSURE [note: 'Updated closing disclosure due to changes before closing']
  CORRECTED_CLOSING_DISCLOSURE [note: 'Corrected disclosure issued after closing']
  FEE_ESTIMATE [note: 'Preliminary estimate of closing fees']
  INITIAL_ESCROW_STATEMENT [note: 'Details about the escrow account and payments']
  OTHER [note: 'Other disclosure types not categorized above']
}

// Create enum for delivery methods
Enum "mortgage_services"."delivery_method" {
  EMAIL [note: 'Disclosure sent via electronic mail']
  MAIL [note: 'Physical disclosure sent through postal service']
  IN_PERSON [note: 'Disclosure provided in person during meeting']
  ELECTRONIC_PORTAL [note: 'Disclosure made available through secure electronic portal']
  COURIER [note: 'Disclosure delivered via courier or delivery service']
  FAX [note: 'Disclosure sent via facsimile']
  OTHER [note: 'Other delivery methods not categorized above']
}

// Now update the closing_disclosures table to use these enums
Table "mortgage_services"."closing_disclosures" {
  "mortgage_services_disclosure_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each disclosure"]
  "mortgage_services_loan_id" INTEGER [not null, ref: > mortgage_services.loans.mortgage_services_loan_id, note: "Reference to the loan this disclosure is for"]
  "disclosure_type" mortgage_services.disclosure_type [not null, note: "Type of disclosure document"]
  "created_date" TIMESTAMPTZ [not null, note: "When the disclosure was created"]
  "sent_date" TIMESTAMPTZ [note: "When the disclosure was sent to borrowers"]
  "received_date" TIMESTAMPTZ [note: "When signed disclosure was received back"]
  "delivery_method" mortgage_services.delivery_method [not null, note: "How disclosure was delivered"]
  "document_path" VARCHAR(500) [note: "Storage location of the disclosure document"]
  "loan_amount" NUMERIC(18,2) [not null, note: "Loan amount shown on disclosure"]
  "interest_rate" NUMERIC(6,3) [not null, note: "Interest rate shown on disclosure"]
  "monthly_payment" NUMERIC(18,2) [not null, note: "Monthly payment shown on disclosure"]
  "total_closing_costs" NUMERIC(18,2) [not null, note: "Total closing costs shown on disclosure"]
  "cash_to_close" NUMERIC(18,2) [not null, note: "Cash to close shown on disclosure"]

  note: "Manages closing disclosure documents required by regulations"
}

// Create enum for appointment status
Enum "mortgage_services"."appointment_status" {
  SCHEDULED [note: 'Appointment has been scheduled but not yet occurred']
  RESCHEDULED [note: 'Appointment has been rescheduled from its original date/time']
  CONFIRMED [note: 'Appointment has been confirmed by all required parties']
  IN_PROGRESS [note: 'Appointment is currently underway']
  COMPLETED [note: 'Appointment has taken place successfully']
  CANCELLED [note: 'Appointment was cancelled and not rescheduled']
  MISSED [note: 'Scheduled appointment was missed by one or more parties']
  PENDING [note: 'Appointment is waiting for confirmation']
}

// Create enum for closing types
Enum "mortgage_services"."closing_type" {
  IN_PERSON [note: 'Traditional in-person closing with all parties present']
  HYBRID [note: 'Some parties attend in person while others participate remotely']
  REMOTE [note: 'All parties participate remotely through electronic means']
  MAIL_AWAY [note: 'Documents are sent by mail for signature and return']
  ESCROW [note: 'Closing handled through an escrow process']
  POWER_OF_ATTORNEY [note: 'Closing conducted by authorized representative with power of attorney']
  DRY_CLOSING [note: 'Documents are signed but funds are not yet disbursed']
  WET_CLOSING [note: 'Documents are signed and funds are disbursed on the same day']
}

// Now update the closing_appointments table to use these enums
Table "mortgage_services"."closing_appointments" {
  "mortgage_services_appointment_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each appointment"]
  "mortgage_services_loan_id" INTEGER [not null, ref: > mortgage_services.loans.mortgage_services_loan_id, note: "Reference to the loan this closing is for"]
  "scheduled_date" TIMESTAMPTZ [not null, note: "When the closing is scheduled"]
  "location_address_id" INTEGER [ref: > enterprise.addresses.enterprise_address_id, note: "References the address where closing will occur"]
  "status" mortgage_services.appointment_status [not null, note: "Current status of the closing appointment"]
  "closing_type" mortgage_services.closing_type [not null, note: "Type of closing process being used"]
  "closing_agent" VARCHAR(100) [note: "Name of the closing agent"]
  "closing_company" VARCHAR(100) [note: "Company handling the closing"]
  "closing_fee" NUMERIC(10,2) [note: "Fee charged for closing services"]
  "actual_closing_date" TIMESTAMPTZ [note: "When the closing actually occurred"]
  "notes" TEXT [note: "Additional information about the closing"]

  note: "Schedules and tracks mortgage closing appointments"
}

Table "mortgage_services"."closed_loans" {
  "mortgage_services_closed_loan_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each closed loan record"]
  "mortgage_services_loan_id" INTEGER [not null, ref: > mortgage_services.loans.mortgage_services_loan_id, note: "References the loan that was closed"]
  "closing_date" DATE [not null, note: "When loan documents were signed"]
  "funding_date" DATE [not null, note: "When loan funds were disbursed"]
  "final_loan_amount" NUMERIC(18,2) [not null, note: "Final principal amount of the loan"]
  "final_interest_rate" NUMERIC(6,3) [not null, note: "Final interest rate of the loan"]
  "final_monthly_payment" NUMERIC(18,2) [not null, note: "Final principal and interest payment"]
  "final_cash_to_close" NUMERIC(18,2) [not null, note: "Final amount borrower paid at closing"]
  "disbursement_date" DATE [note: "When funds were disbursed to relevant parties"]
  "first_payment_date" DATE [not null, note: "When first loan payment is due"]
  "maturity_date" DATE [not null, note: "When loan is scheduled to be fully paid off"]
  "recording_date" DATE [note: "When mortgage was recorded with government office"]
  "settlement_agent" VARCHAR(100) [note: "Name of the settlement agent"]
  "settlement_company" VARCHAR(100) [note: "Company handling the settlement"]

  note: "Records final details of closed mortgage loans"
}

Enum "mortgage_services"."servicing_account_status" {
  ACTIVE [note: 'Loan is in good standing and being actively serviced']
  DELINQUENT [note: 'Loan payments are past due but not yet in default']
  DEFAULT [note: 'Loan is in default due to extended payment delinquency']
  FORECLOSURE [note: 'Loan is in foreclosure process']
  BANKRUPTCY [note: 'Borrower has filed for bankruptcy protection']
  PAID_OFF [note: 'Loan has been completely paid off']
  TRANSFERRED [note: 'Servicing has been transferred to another servicer']
  MODIFICATION_IN_PROCESS [note: 'Loan terms are currently being modified']
  LOSS_MITIGATION [note: 'Account is in active loss mitigation process']
  FORBEARANCE [note: 'Temporary suspension of payment requirements']
  REO [note: 'Real Estate Owned - property has been foreclosed and is now owned by the lender']
  SHORT_SALE [note: 'Property is being sold for less than the amount owed']
  CHARGE_OFF [note: 'Loan has been deemed uncollectible and charged off']
  SATISFIED [note: 'Loan obligation has been satisfied']
  SUSPENDED [note: 'Servicing activities temporarily suspended']
}

Table "mortgage_services"."servicing_accounts" {
  "mortgage_services_servicing_account_id" SERIAL [pk, note: "Unique identifier for each servicing account"]
  "mortgage_services_loan_id" INTEGER [not null, ref: > mortgage_services.loans.mortgage_services_loan_id, note: "References the originated loan"]
  "status" mortgage_services.servicing_account_status [not null, note: "Current status of the loan being serviced"]
  "current_principal_balance" NUMERIC(18,2) [not null, note: "Current remaining principal balance"]
  "original_principal_balance" NUMERIC(18,2) [not null, note: "Original loan amount at closing"]
  "current_interest_rate" NUMERIC(6,3) [not null, note: "Current applicable interest rate"]
  "escrow_balance" NUMERIC(18,2) [note: "Current balance in escrow account"]
  "next_payment_due_date" DATE [note: "When next payment is due"]
  "next_payment_amount" NUMERIC(18,2) [note: "Amount due for next payment"]
  "last_payment_date" DATE [note: "When last payment was received"]
  "last_payment_amount" NUMERIC(18,2) [note: "Amount of last payment received"]
  "interest_paid_ytd" NUMERIC(18,2) [note: "Interest paid year-to-date"]
  "principal_paid_ytd" NUMERIC(18,2) [note: "Principal paid year-to-date"]
  "escrow_paid_ytd" NUMERIC(18,2) [note: "Escrow paid year-to-date"]
  "property_tax_due_date" DATE [note: "When next property tax payment is due"]
  "homeowners_insurance_due_date" DATE [note: "When next insurance payment is due"]
  "servicing_transferred_date" DATE [note: "When servicing was transferred to current servicer"]

  note: "Manages ongoing servicing of closed mortgage loans"
}

Enum "mortgage_services"."payment_type" {
  PRINCIPAL_AND_INTEREST [note: 'Regular payment covering both principal and interest portions']
  PRINCIPAL_ONLY [note: 'Payment applied only to the principal balance']
  INTEREST_ONLY [note: 'Payment applied only to accrued interest']
  ESCROW [note: 'Payment specifically for the escrow account (taxes, insurance)']
  LATE_FEE [note: 'Payment to cover late payment fees']
  PREPAYMENT_PENALTY [note: 'Payment for early loan payoff penalties']
  FULL_PAYOFF [note: 'Complete loan payoff payment']
  PARTIAL_PAYMENT [note: 'Incomplete regular payment']
  BIWEEKLY [note: 'Payment made on a biweekly schedule']
  FORBEARANCE [note: 'Reduced payment during forbearance period']
  LOAN_MODIFICATION [note: 'Payment under modified loan terms']
  BALLOON [note: 'Large final payment at loan maturity']
  SERVICING_FEE [note: 'Payment for loan servicing fees']
  EXTENSION_FEE [note: 'Payment for loan term extension fees']
  OTHER [note: 'Payment type not covered by standard categories']
}

Table "mortgage_services"."payments" {
  "mortgage_services_payment_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each payment"]
  "mortgage_services_servicing_account_id" INTEGER [not null, ref: > mortgage_services.servicing_accounts.mortgage_services_servicing_account_id, note: "References the servicing account receiving the payment"]
  "payment_date" TIMESTAMPTZ [not null, note: "When the payment was made"]
  "payment_type" mortgage_services.payment_type [not null, note: "Type of payment (e.g., Regular, Extra Principal, Escrow Only)"]
  "payment_method" VARCHAR(30) [not null, note: "Method used to make payment (e.g., ACH, Check, Online)"]
  "payment_amount" NUMERIC(18,2) [not null, note: "Total amount of the payment"]
  "principal_amount" NUMERIC(18,2) [not null, note: "Portion of payment applied to principal"]
  "interest_amount" NUMERIC(18,2) [not null, note: "Portion of payment applied to interest"]
  "escrow_amount" NUMERIC(18,2) [note: "Portion of payment applied to escrow"]
  "late_fee_amount" NUMERIC(10,2) [note: "Portion of payment applied to late fees"]
  "other_fee_amount" NUMERIC(10,2) [note: "Portion of payment applied to other fees"]
  "transaction_id" VARCHAR(30) [note: "Financial transaction identifier"]
  "confirmation_number" VARCHAR(50) [note: "Confirmation number provided to customer"]
  "status" VARCHAR(20) [not null, note: "Current status of the payment (e.g., Pending, Completed)"]

  note: "Tracks mortgage loan payments made by borrowers"
}

Enum "mortgage_services"."disbursement_type" {
  PROPERTY_TAX [note: 'Payment for property tax obligations']
  HOMEOWNERS_INSURANCE [note: 'Payment for homeowners insurance premiums']
  MORTGAGE_INSURANCE [note: 'Payment for private mortgage insurance (PMI) premiums']
  FLOOD_INSURANCE [note: 'Payment for flood insurance premiums']
  HOA_DUES [note: 'Payment for homeowners association fees']
  HAZARD_INSURANCE [note: 'Payment for hazard insurance premiums']
  CONDO_INSURANCE [note: 'Payment for condominium insurance premiums']
  CITY_TAX [note: 'Payment for city or municipal property taxes']
  COUNTY_TAX [note: 'Payment for county property taxes']
  SCHOOL_TAX [note: 'Payment for school district taxes']
  SPECIAL_ASSESSMENT [note: 'Payment for special assessment fees or taxes']
  GROUND_RENT [note: 'Payment for ground rent in leasehold properties']
  ESCROW_REFUND [note: 'Refund of excess escrow funds to borrower']
  ESCROW_SHORTAGE [note: 'Payment to cover escrow account shortage']
  OTHER [note: 'Disbursement type not covered by standard categories']
}

Enum "mortgage_services"."disbursement_status" {
  PENDING [note: 'Disbursement is scheduled but not yet processed']
  PROCESSING [note: 'Disbursement is currently being processed']
  COMPLETED [note: 'Disbursement has been successfully processed and funds delivered']
  FAILED [note: 'Disbursement processing failed']
  RETURNED [note: 'Disbursement was returned (e.g., incorrect payee information)']
  CANCELED [note: 'Disbursement was canceled before processing']
  HOLD [note: 'Disbursement is on hold pending review or additional information']
  CLEARED [note: 'Disbursement check has been cleared by the bank']
  VOID [note: 'Disbursement was voided after issuance']
  REISSUED [note: 'Disbursement was reissued after a previous failure or return']
  PARTIAL [note: 'Only part of the disbursement amount was successfully processed']
  SCHEDULED [note: 'Disbursement is scheduled for a future date']
  SENT [note: 'Disbursement has been sent but not yet confirmed as delivered or processed']
  OTHER [note: 'Status not covered by standard categories']
}

Table "mortgage_services"."escrow_disbursements" {
  "mortgage_services_disbursement_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each disbursement"]
  "mortgage_services_servicing_account_id" INTEGER [not null, ref: > mortgage_services.servicing_accounts.mortgage_services_servicing_account_id, note: "References the servicing account for this disbursement"]
  "disbursement_date" DATE [not null, note: "When the disbursement was made"]
  "disbursement_type" mortgage_services.disbursement_type [not null, note: "Type of disbursement (e.g., Property Tax, Insurance, PMI)"]
  "amount" NUMERIC(18,2) [not null, note: "Amount of the disbursement"]
  "payee_name" VARCHAR(100) [not null, note: "Entity receiving the disbursement"]
  "payee_account_number" VARCHAR(50) [note: "Account number for electronic payments"]
  "check_number" VARCHAR(20) [note: "Check number for paper disbursements"]
  "status" mortgage_services.disbursement_status [not null, note: "Current status of the disbursement"]
  "due_date" DATE [note: "When the payment was due"]
  "coverage_start_date" DATE [note: "Start of coverage period (for insurance payments)"]
  "coverage_end_date" DATE [note: "End of coverage period (for insurance payments)"]

  note: "Tracks payments made from escrow accounts for taxes, insurance, etc."
}

Enum "mortgage_services"."escrow_analysis_status" {
  PENDING [note: 'Analysis has been initiated but not completed']
  COMPLETED [note: 'Analysis has been completed successfully']
  REVIEWED [note: 'Analysis has been reviewed by a servicing specialist']
  APPROVED [note: 'Analysis has been approved and finalized']
  REJECTED [note: 'Analysis has been rejected due to errors or issues']
  IN_PROGRESS [note: 'Analysis is currently being processed']
  CANCELLED [note: 'Analysis has been cancelled before completion']
  CUSTOMER_NOTIFIED [note: 'Customer has been notified of analysis results']
  ADJUSTMENT_PENDING [note: 'Payment adjustment is pending based on analysis']
  ADJUSTMENT_APPLIED [note: 'Payment adjustment has been applied to account']
  EXCEPTION [note: 'Analysis resulted in an exception requiring manual review']
  EXPIRED [note: 'Analysis has expired and is no longer valid']
  OTHER [note: 'Status not falling into standard categories']
}

Table "mortgage_services"."escrow_analyses" {
  "mortgage_services_analysis_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each analysis"]
  "mortgage_services_servicing_account_id" INTEGER [not null, ref: > mortgage_services.servicing_accounts.mortgage_services_servicing_account_id, note: "References the servicing account being analyzed"]
  "analysis_date" DATE [not null, note: "When the analysis was performed"]
  "effective_date" DATE [not null, note: "When the analysis results take effect"]
  "previous_monthly_escrow" NUMERIC(18,2) [note: "Previous monthly escrow payment amount"]
  "new_monthly_escrow" NUMERIC(18,2) [not null, note: "New monthly escrow payment amount"]
  "escrow_shortage" NUMERIC(18,2) [note: "Amount by which the escrow account is short"]
  "escrow_surplus" NUMERIC(18,2) [note: "Amount by which the escrow account exceeds requirements"]
  "shortage_spread_months" INTEGER [note: "Number of months to spread shortage payment"]
  "surplus_refund_amount" NUMERIC(18,2) [note: "Amount of surplus to be refunded"]
  "status" mortgage_services.escrow_analysis_status [not null, note: "Current status of the analysis"]
  "customer_notification_date" DATE [note: "When the customer was notified of the analysis results"]

  note: "Records periodic analyses of escrow accounts to determine payment adjustments"
}

Enum "mortgage_services"."insurance_policy_status" {
  ACTIVE [note: 'Policy is currently in force and providing coverage']
  PENDING [note: 'Policy has been applied for but not yet activated']
  EXPIRED [note: 'Policy term has ended without renewal']
  CANCELLED [note: 'Policy was terminated before expiration date']
  RENEWED [note: 'Policy has been renewed for another term']
  LAPSED [note: 'Policy has expired due to non-payment']
  REINSTATED [note: 'Previously lapsed policy that has been restored']
  FORCE_PLACED [note: 'Insurance placed by lender due to borrower failure to maintain coverage']
  UNDER_REVIEW [note: 'Policy is being reviewed, possibly for claims or modifications']
  CLAIM_IN_PROGRESS [note: 'Policy has an active claim being processed']
  NON_RENEWAL [note: 'Insurer has given notice they will not renew the policy']
  OTHER [note: 'Status not falling into standard categories']
}

Enum "mortgage_services"."insurance_type" {
  HAZARD [note: 'Standard homeowners insurance covering dwelling, personal property, and liability']
  FLOOD [note: 'Insurance specifically for flood damage, often required in flood zones']
  WIND [note: 'Coverage for wind damage, may be separate in hurricane-prone areas']
  EARTHQUAKE [note: 'Coverage for earthquake damage, typically a separate policy']
  PMI [note: 'Private Mortgage Insurance required for loans with less than 20% down payment']
  LENDERS_PLACED [note: 'Insurance placed by lender when borrower fails to maintain required coverage']
  OTHER [note: 'Insurance type not falling into standard categories']
}

Table "mortgage_services"."insurance_policies" {
  "mortgage_services_policy_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each policy"]
  "mortgage_services_servicing_account_id" INTEGER [not null, ref: > mortgage_services.servicing_accounts.mortgage_services_servicing_account_id, note: "References the servicing account this policy protects"]
  "insurance_type" mortgage_services.insurance_type [not null, note: "Type of insurance coverage"]
  "carrier_name" VARCHAR(100) [not null, note: "Insurance company providing coverage"]
  "policy_number" VARCHAR(50) [not null, note: "Insurance policy identifier"]
  "coverage_amount" NUMERIC(18,2) [not null, note: "Amount of insurance coverage"]
  "annual_premium" NUMERIC(18,2) [not null, note: "Annual cost of the insurance policy"]
  "effective_date" DATE [not null, note: "Start date of policy coverage"]
  "expiration_date" DATE [not null, note: "End date of policy coverage"]
  "paid_through_escrow" BOOLEAN [not null, note: "Whether premium is paid from escrow account"]
  "agent_name" VARCHAR(100) [note: "Insurance agent's name"]
  "agent_phone" VARCHAR(30) [note: "Insurance agent's contact number"]
  "status" mortgage_services.insurance_policy_status [not null, note: "Current status of the policy"]

  note: "Tracks insurance policies protecting mortgaged properties"
}

Enum "mortgage_services"."loan_modification_type" {
  RATE_REDUCTION [note: 'Lowering of the interest rate']
  TERM_EXTENSION [note: 'Extending the loan repayment period']
  PRINCIPAL_REDUCTION [note: 'Reduction of the principal balance']
  INTEREST_ONLY_PERIOD [note: 'Temporary period of interest-only payments']
  CAPITALIZATION [note: 'Adding unpaid interest to principal balance']
  PAYMENT_DEFERRAL [note: 'Temporary suspension or postponement of payments']
  FORBEARANCE [note: 'Temporary reduction or suspension of payments']
  WORKOUT [note: 'Comprehensive restructuring of loan terms']
  REFINANCE [note: 'Replacing existing loan with new loan terms']
  PRINCIPAL_FORGIVENESS [note: 'Partial forgiveness of loan principal']
  BALLOON_MODIFICATION [note: 'Modification involving a balloon payment']
  STEP_RATE [note: 'Modification with graduated interest rates over time']
  OTHER [note: 'Modification type not falling into standard categories']
}

Enum "mortgage_services"."loan_modification_status" {
  PENDING [note: 'Modification request is under review']
  APPROVED [note: 'Modification has been approved']
  DENIED [note: 'Modification request was rejected']
  COMPLETED [note: 'Modification has been fully implemented']
  IN_PROGRESS [note: 'Modification is being processed']
  SUSPENDED [note: 'Modification process is temporarily on hold']
  PARTIAL [note: 'Partial modification approved']
  CANCELED [note: 'Modification request was withdrawn or canceled']
  EXPIRED [note: 'Modification offer has expired without borrower acceptance']
  TRIAL_PERIOD [note: 'Borrower is in trial payment period before final modification']
  BORROWER_ACCEPTED [note: 'Borrower has accepted but not yet implemented']
  BORROWER_REJECTED [note: 'Borrower has rejected the offered modification']
  OTHER [note: 'Status not falling into standard categories']
}

Enum "mortgage_services"."hardship_reason" {
  FINANCIAL_HARDSHIP [note: 'General financial difficulties not otherwise specified']
  JOB_LOSS [note: 'Loss of employment or significant reduction in work hours']
  MEDICAL_ISSUES [note: 'Illness, injury, or significant medical expenses']
  NATURAL_DISASTER [note: 'Property damage or disruption due to natural disaster']
  DIVORCE [note: 'Financial impact from divorce or separation']
  INCOME_REDUCTION [note: 'Decrease in income not related to job loss']
  DEATH_IN_FAMILY [note: 'Financial impact from death of family member']
  MILITARY_SERVICE [note: 'Deployment or relocation due to military service']
  BUSINESS_FAILURE [note: 'Failure of a business owned by the borrower']
  DISABILITY [note: 'New or worsened disability affecting income']
  INCREASED_EXPENSES [note: 'Significant increase in necessary expenses']
  RELOCATION [note: 'Job transfer or necessary relocation']
  PROPERTY_ISSUES [note: 'Problems with the mortgaged property itself']
  OTHER [note: 'Hardship reason not falling into standard categories']
}

Table "mortgage_services"."loan_modifications" {
  "mortgage_services_modification_id" SERIAL [pk, increment, note: "Unique identifier for loan modification"]
  "loan_account_id" INTEGER [not null, ref: > consumer_lending.loan_accounts.loan_account_id, note: "Reference to loan account"]
  "modification_type" mortgage_services.loan_modification_type [not null, note: "Type of loan modification"]
  "request_date" DATE [not null, note: "Date modification was requested"]
  "approval_date" DATE [note: "Date modification was approved"]
  "effective_date" DATE [note: "Date modification takes effect"]
  "original_rate" NUMERIC(6,3) [note: "Interest rate before modification"]
  "new_rate" NUMERIC(6,3) [note: "Interest rate after modification"]
  "original_term_months" INTEGER [note: "Loan term before modification"]
  "new_term_months" INTEGER [note: "Loan term after modification"]
  "original_principal_balance" NUMERIC(18,2) [note: "Principal balance before modification"]
  "new_principal_balance" NUMERIC(18,2) [note: "Principal balance after modification"]
  "capitalized_amount" NUMERIC(18,2) [note: "Amount of interest or fees capitalized"]
  "status" mortgage_services.loan_modification_status [not null, note: "Current status of the modification"]
  "hardship_reason" mortgage_services.hardship_reason [not null, note: "Customer's reason for hardship"]
  "approved_by_id" INTEGER [ref: > enterprise.associates.enterprise_associate_id, note: "User who approved modification"]
  "document_path" VARCHAR(500) [note: "Path to modification agreement document"]

  note: "Tracks modifications made to existing loan accounts, such as changes to interest rates, terms, or principal balance."
}

Enum "mortgage_services"."communication_type" {
  EMAIL [note: 'Electronic mail sent to or received from customer']
  LETTER [note: 'Physical mail correspondence sent to or received from customer']
  PHONE_CALL [note: 'Verbal communication via telephone']
  SMS [note: 'Text message sent to or received from customer']
  IN_PERSON [note: 'Face-to-face meeting with customer']
  PORTAL_MESSAGE [note: 'Message sent or received through online customer portal']
  VOICEMAIL [note: 'Recorded message left for customer or by customer']
  FAX [note: 'Document transmitted via facsimile']
  VIDEO_CALL [note: 'Visual communication via video conferencing']
  CHAT [note: 'Real-time text-based conversation with customer']
  OTHER [note: 'Communication method not covered by standard categories']
}

Enum "mortgage_services"."communication_direction" {
  INBOUND [note: 'Communication initiated by the customer']
  OUTBOUND [note: 'Communication initiated by the servicer']
  INTERNAL [note: 'Communication between servicing personnel about the customer']
}

Enum "mortgage_services"."communication_status" {
  SENT [note: 'Communication has been sent but not yet confirmed delivered']
  DELIVERED [note: 'Communication successfully delivered to recipient']
  FAILED [note: 'Communication delivery attempt unsuccessful']
  RECEIVED [note: 'Communication received from customer']
  READ [note: 'Communication confirmed as read by recipient']
  PENDING [note: 'Communication scheduled but not yet sent']
  DRAFT [note: 'Communication prepared but not ready to send']
  CANCELLED [note: 'Communication cancelled before delivery']
  RETURNED [note: 'Physical communication returned as undeliverable']
  OTHER [note: 'Status not covered by standard categories']
}

Enum "mortgage_services"."communication_purpose" {
  PAYMENT_REMINDER [note: 'Reminder about upcoming or past due payment']
  PAYMENT_CONFIRMATION [note: 'Confirmation of received payment']
  ESCROW_ANALYSIS [note: 'Information regarding escrow account analysis']
  FORBEARANCE [note: 'Communication regarding forbearance request or status']
  MODIFICATION [note: 'Communication regarding loan modification']
  DOCUMENT_REQUEST [note: 'Request for documents from customer']
  DOCUMENT_RECEIPT [note: 'Confirmation of document receipt']
  STATEMENT [note: 'Regular account statement or information']
  INSURANCE [note: 'Communication regarding hazard, flood, or other insurance']
  TAXES [note: 'Communication regarding property taxes']
  DEFAULT_NOTICE [note: 'Notice of default or delinquency']
  FORECLOSURE [note: 'Communication regarding foreclosure process']
  LOSS_MITIGATION [note: 'Options for avoiding foreclosure']
  GENERAL_INQUIRY [note: 'General customer question or information request']
  COMPLAINT [note: 'Customer complaint or issue resolution']
  WELCOME [note: 'Initial communication to new customer']
  REGULATORY [note: 'Required regulatory disclosure or notice']
  OTHER [note: 'Purpose not covered by standard categories']
}

Table "mortgage_services"."customer_communications" {
  "mortgage_services_communication_id" SERIAL [pk, increment, note: "Unique identifier for each communication record"]
  "mortgage_services_servicing_account_id" INTEGER [ref: > mortgage_services.servicing_accounts.mortgage_services_servicing_account_id, note: "References the servicing account if communication is about servicing"]
  "mortgage_services_application_id" INTEGER [ref: > mortgage_services.applications.mortgage_services_application_id, note: "References the application if communication is about application"]
  "communication_date" TIMESTAMPTZ [not null, note: "When the communication occurred"]
  "communication_type" mortgage_services.communication_type [not null, note: "Method of communication"]
  "direction" mortgage_services.communication_direction [not null, note: "Whether communication was incoming or outgoing"]
  "subject" VARCHAR(255) [note: "Subject or topic of communication"]
  "content" TEXT [note: "Content of the communication"]
  "sender" VARCHAR(100) [note: "Person or system that sent the communication"]
  "recipient" VARCHAR(100) [note: "Person or entity that received the communication"]
  "template_id" VARCHAR(30) [note: "Template used for the communication if applicable"]
  "status" mortgage_services.communication_status [not null, note: "Delivery status of the communication"]
  "document_path" VARCHAR(500) [note: "Storage location for communication document if applicable"]
  "related_to" mortgage_services.communication_purpose [note: "Purpose or context of the communication"]

  note: "Tracks all communications with customers throughout application and servicing"
}

Enum "mortgage_services"."hmda_loan_purpose" {
  "1" [note: 'Home purchase']
  "2" [note: 'Home improvement']
  "3" [note: 'Refinancing']
  "4" [note: 'Cash-out refinancing']
  "5" [note: 'Other purpose']
  "31" [note: 'Reverse mortgage']
  "32" [note: 'Open-end line of credit']
  "OTHER" [note: 'Other purpose not listed']
}

Enum "mortgage_services"."hmda_preapproval" {
  "1" [note: 'Preapproval requested']
  "2" [note: 'Preapproval not requested']
  "3" [note: 'Not applicable']
}

Enum "mortgage_services"."hmda_construction_method" {
  "1" [note: 'Site-built']
  "2" [note: 'Manufactured home']
}

Enum "mortgage_services"."hmda_occupancy_type" {
  "1" [note: 'Principal residence']
  "2" [note: 'Second residence']
  "3" [note: 'Investment property']
}

Enum "mortgage_services"."hmda_action_taken" {
  "1" [note: 'Loan originated']
  "2" [note: 'Application approved but not accepted']
  "3" [note: 'Application denied']
  "4" [note: 'Application withdrawn by applicant']
  "5" [note: 'File closed for incompleteness']
  "6" [note: 'Purchased loan']
  "7" [note: 'Preapproval request denied']
  "8" [note: 'Preapproval request approved but not accepted']
}

Enum "mortgage_services"."hmda_denial_reason" {
  "1" [note: 'Debt-to-income ratio']
  "2" [note: 'Employment history']
  "3" [note: 'Credit history']
  "4" [note: 'Collateral']
  "5" [note: 'Insufficient cash']
  "6" [note: 'Unverifiable information']
  "7" [note: 'Credit application incomplete']
  "8" [note: 'Mortgage insurance denied']
  "9" [note: 'Other']
  "10" [note: 'Not applicable']
}

Enum "mortgage_services"."hmda_hoepa_status" {
  "1" [note: 'High-cost mortgage']
  "2" [note: 'Not a high-cost mortgage']
  "3" [note: 'Not applicable']
}

Enum "mortgage_services"."hmda_lien_status" {
  "1" [note: 'Secured by a first lien']
  "2" [note: 'Secured by a subordinate lien']
  "3" [note: 'Not secured by a lien']
  "4" [note: 'Not applicable']
}

Enum "mortgage_services"."hmda_credit_score_model" {
  "1" [note: 'Equifax']
  "2" [note: 'Experian']
  "3" [note: 'TransUnion']
  "4" [note: 'FICO']
  "5" [note: 'CounterScore']
  "6" [note: 'GS/GL']
  "7" [note: 'LoanPerformance']
  "8" [note: 'Other credit scoring model']
  "9" [note: 'Not applicable']
  "1111" [note: 'Purchased loan: credit score not available']
}

Enum "mortgage_services"."hmda_submission_status" {
  "PENDING" [note: 'Ready for submission but not yet sent']
  "SUBMITTED" [note: 'Submitted to regulatory agency']
  "ACCEPTED" [note: 'Accepted by regulatory agency']
  "REJECTED" [note: 'Rejected by regulatory agency, needs correction']
  "EXEMPTED" [note: 'Exempted from reporting requirements']
}

Enum "mortgage_services"."hmda_balloon_payment" {
  "1" [note: 'Yes, loan has balloon payment feature']
  "2" [note: 'No, loan does not have balloon payment feature']
}

Enum "mortgage_services"."hmda_interest_only" {
  "1" [note: 'Yes, loan has interest-only payments']
  "2" [note: 'No, loan does not have interest-only payments']
}

Enum "mortgage_services"."hmda_negative_amortization" {
  "1" [note: 'Yes, loan allows negative amortization']
  "2" [note: 'No, loan does not allow negative amortization']
}

Enum "mortgage_services"."hmda_other_non_amortizing" {
  "1" [note: 'Yes, loan has other non-amortizing features']
  "2" [note: 'No, loan does not have other non-amortizing features']
}

Enum "mortgage_services"."hmda_manufactured_home_type" {
  "1" [note: 'Manufactured home and land']
  "2" [note: 'Manufactured home only']
  "3" [note: 'Not applicable']
}

Enum "mortgage_services"."hmda_manufactured_land_property_interest" {
  "1" [note: 'Direct ownership']
  "2" [note: 'Indirect ownership']
  "3" [note: 'Paid leasehold']
  "4" [note: 'Unpaid leasehold']
  "5" [note: 'Not applicable']
}

Enum "mortgage_services"."hmda_submission_method" {
  "1" [note: 'Direct submission']
  "2" [note: 'Not direct submission']
  "3" [note: 'Not applicable']
}

Enum "mortgage_services"."hmda_aus" {
  "1" [note: 'Desktop Underwriter (DU)']
  "2" [note: 'Loan Prospector (LP) or Loan Product Advisor']
  "3" [note: 'Technology Open to Approved Lenders (TOTAL) Scorecard']
  "4" [note: 'Guaranteed Underwriting System (GUS)']
  "5" [note: 'Other AUS']
  "6" [note: 'Not applicable']
  "7" [note: 'Internal proprietary system']
  "1111" [note: 'Purchased loan: AUS data not available']
}

Enum "mortgage_services"."hmda_reverse_mortgage" {
  "1" [note: 'Yes, reverse mortgage']
  "2" [note: 'No, not a reverse mortgage']
  "1111" [note: 'Purchased loan: reverse mortgage status not available']
}

Enum "mortgage_services"."hmda_open_end_line_of_credit" {
  "1" [note: 'Yes, open-end line of credit']
  "2" [note: 'No, not an open-end line of credit']
  "1111" [note: 'Purchased loan: open-end line of credit status not available']
}

Enum "mortgage_services"."hmda_business_or_commercial_purpose" {
  "1" [note: 'Yes, primarily for a business or commercial purpose']
  "2" [note: 'No, not primarily for a business or commercial purpose']
  "1111" [note: 'Purchased loan: business or commercial purpose not available']
}

Enum "mortgage_services"."hmda_record_edit_status" {
  "NOT_STARTED" [note: 'Edits check has not been initiated']
  "IN_PROGRESS" [note: 'Edits check is currently running']
  "VALID" [note: 'Passed all required edits']
  "INVALID" [note: 'Failed one or more validity edits']
  "QUALITY_ISSUES" [note: 'Passed all validity edits but has quality issues']
  "MACRO_ISSUES" [note: 'Passed all validity and quality edits but has macro issues']
}

Table "mortgage_services"."hmda_records" {
  "mortgage_services_hmda_record_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each HMDA record"]
  "mortgage_services_application_id" INTEGER [not null, ref: > mortgage_services.applications.mortgage_services_application_id, note: "References the associated mortgage application"]
  "mortgage_services_loan_id" INTEGER [ref: > mortgage_services.loans.mortgage_services_loan_id, note: "References the associated loan if originated"]
  "reporting_year" INTEGER [not null, note: "Calendar year for HMDA reporting"]
  "lei" VARCHAR(20) [not null, note: "Legal Entity Identifier of the reporting institution"]
  "mortgage_services_loan_product_id" INTEGER [not null, ref: > mortgage_services.loan_products.mortgage_services_loan_product_id, note: "Type of mortgage loan product"]
  "loan_purpose" mortgage_services.hmda_loan_purpose [not null, note: "Code indicating loan purpose"]
  "preapproval" mortgage_services.hmda_preapproval [not null, note: "Code indicating if preapproval was requested"]
  "construction_method" mortgage_services.hmda_construction_method [not null, note: "Code indicating construction method"]
  "occupancy_type" mortgage_services.hmda_occupancy_type [not null, note: "Code indicating intended property use"]
  "loan_amount" NUMERIC(18,2) [not null, note: "Amount of the loan or application"]
  "action_taken" mortgage_services.hmda_action_taken [not null, note: "Code indicating final disposition"]
  "action_taken_date" DATE [not null, note: "Date of final action"]
  "state" VARCHAR(2) [not null, note: "Two-letter state code for property location"]
  "county" VARCHAR(5) [not null, note: "County code for property location"]
  "census_tract" VARCHAR(11) [not null, note: "Census tract for property location"]
  "rate_spread" NUMERIC(6,3) [note: "Difference between APR and average prime offer rate"]
  "hoepa_status" mortgage_services.hmda_hoepa_status [not null, note: "Code indicating if loan is subject to HOEPA"]
  "lien_status" mortgage_services.hmda_lien_status [not null, note: "Code indicating lien position"]
  "credit_score_applicant" INTEGER [note: "Credit score of primary applicant"]
  "credit_score_co_applicant" INTEGER [note: "Credit score of co-applicant if applicable"]
  "credit_score_model" mortgage_services.hmda_credit_score_model [note: "Code indicating credit scoring model used"]
  "denial_reason1" mortgage_services.hmda_denial_reason [note: "Primary reason for denial if applicable"]
  "denial_reason2" mortgage_services.hmda_denial_reason [note: "Secondary reason for denial if applicable"]
  "denial_reason3" mortgage_services.hmda_denial_reason [note: "Additional reason for denial if applicable"]
  "denial_reason4" mortgage_services.hmda_denial_reason [note: "Additional reason for denial if applicable"]
  "total_loan_costs" NUMERIC(18,2) [note: "Total loan costs as disclosed"]
  "total_points_and_fees" NUMERIC(18,2) [note: "Total points and fees charged"]
  "origination_charges" NUMERIC(18,2) [note: "Total origination charges"]
  "discount_points" NUMERIC(18,2) [note: "Discount points paid by borrower"]
  "lender_credits" NUMERIC(18,2) [note: "Credits provided by lender"]
  "loan_term" INTEGER [note: "Term of the loan in months"]
  "intro_rate_period" INTEGER [note: "Months until first rate adjustment for ARMs"]
  "balloon_payment" mortgage_services.hmda_balloon_payment [note: "Whether loan has balloon payment feature"]
  "interest_only_payment" mortgage_services.hmda_interest_only [note: "Whether loan has interest-only payments"]
  "negative_amortization" mortgage_services.hmda_negative_amortization [note: "Whether loan allows negative amortization"]
  "other_non_amortizing_features" mortgage_services.hmda_other_non_amortizing [note: "Whether loan has other non-amortizing features"]
  "property_value" NUMERIC(18,2) [note: "Value of the property securing the loan"]
  "manufactured_home_secured_property_type" mortgage_services.hmda_manufactured_home_type [note: "Code for manufactured home property type"]
  "manufactured_home_land_property_interest" mortgage_services.hmda_manufactured_land_property_interest [note: "Code for land ownership with manufactured home"]
  "total_units" INTEGER [not null, note: "Number of dwelling units in the property"]
  "multifamily_affordable_units" INTEGER [note: "Number of income-restricted units in multifamily property"]
  "submission_of_application" mortgage_services.hmda_submission_method [note: "How application was submitted"]
  "initially_payable_to_institution" BOOLEAN [note: "Whether loan was initially payable to reporting institution"]
  "aus1" mortgage_services.hmda_aus [note: "Primary automated underwriting system used"]
  "aus2" mortgage_services.hmda_aus [note: "Secondary automated underwriting system used if applicable"]
  "aus3" mortgage_services.hmda_aus [note: "Additional automated underwriting system if applicable"]
  "aus4" mortgage_services.hmda_aus [note: "Additional automated underwriting system if applicable"]
  "aus5" mortgage_services.hmda_aus [note: "Additional automated underwriting system if applicable"]
  "reverse_mortgage" mortgage_services.hmda_reverse_mortgage [note: "Whether loan is a reverse mortgage"]
  "open_end_line_of_credit" mortgage_services.hmda_open_end_line_of_credit [note: "Whether loan is an open-end line of credit"]
  "business_or_commercial_purpose" mortgage_services.hmda_business_or_commercial_purpose [note: "Whether loan is for business purpose"]
  "submission_status" mortgage_services.hmda_submission_status [not null, default: 'PENDING', note: "Status of HMDA submission for this record"]
  "last_submission_date" DATE [note: "When record was last submitted to regulators"]
  "last_modified_date" TIMESTAMPTZ [not null, note: "When record was last modified"]
  "edit_status" mortgage_services.hmda_record_edit_status [not null, default: 'NOT_STARTED', note: "Status of edit checks for this record"]

  note: "Stores data required for Home Mortgage Disclosure Act (HMDA) regulatory reporting"
}

// HMDA Ethnicity Enums
Enum "mortgage_services"."hmda_ethnicity" {
  "1" [note: 'Hispanic or Latino']
  "2" [note: 'Not Hispanic or Latino']
  "3" [note: 'Information not provided by applicant in mail, internet, or telephone application']
  "4" [note: 'Not applicable']
  "5" [note: 'No co-applicant']
}

// HMDA Ethnicity Detail Enums
Enum "mortgage_services"."hmda_ethnicity_detail" {
  "1" [note: 'Mexican']
  "2" [note: 'Puerto Rican']
  "3" [note: 'Cuban']
  "4" [note: 'Other Hispanic or Latino']
  "5" [note: 'Not Hispanic or Latino']
  "6" [note: 'Information not provided']
  "7" [note: 'Not applicable']
}

// HMDA Race Enums
Enum "mortgage_services"."hmda_race" {
  "1" [note: 'American Indian or Alaska Native']
  "2" [note: 'Asian']
  "3" [note: 'Black or African American']
  "4" [note: 'Native Hawaiian or Other Pacific Islander']
  "5" [note: 'White']
  "6" [note: 'Information not provided by applicant in mail, internet, or telephone application']
  "7" [note: 'Not applicable']
  "8" [note: 'No co-applicant']
}

// HMDA Race Detail Enums for Asian
Enum "mortgage_services"."hmda_race_asian_detail" {
  "1" [note: 'Asian Indian']
  "2" [note: 'Chinese']
  "3" [note: 'Filipino']
  "4" [note: 'Japanese']
  "5" [note: 'Korean']
  "6" [note: 'Vietnamese']
  "7" [note: 'Other Asian']
}

// HMDA Race Detail Enums for Pacific Islander
Enum "mortgage_services"."hmda_race_pacific_islander_detail" {
  "1" [note: 'Native Hawaiian']
  "2" [note: 'Guamanian or Chamorro']
  "3" [note: 'Samoan']
  "4" [note: 'Other Pacific Islander']
}

// HMDA Sex Enums
Enum "mortgage_services"."hmda_sex" {
  "1" [note: 'Male']
  "2" [note: 'Female']
  "3" [note: 'Information not provided by applicant in mail, internet, or telephone application']
  "4" [note: 'Not applicable']
  "5" [note: 'No co-applicant']
  "6" [note: 'Applicant selected both male and female']
}

// HMDA Method of Collection Enums
Enum "mortgage_services"."hmda_collection_method" {
  "1" [note: 'Visual observation or surname']
  "2" [note: 'Not collected on the basis of visual observation or surname']
  "3" [note: 'Not applicable']
}

// HMDA Age Grouping Enums (as defined in CFPB HMDA reporting)
Enum "mortgage_services"."hmda_age_group" {
  "1" [note: 'Less than 25']
  "2" [note: '25-34']
  "3" [note: '35-44']
  "4" [note: '45-54']
  "5" [note: '55-64']
  "6" [note: '65-74']
  "7" [note: 'Greater than 74']
  "8" [note: 'Information not provided']
  "9" [note: 'Not applicable']
}

// HMDA Applicant Present Enums
Enum "mortgage_services"."hmda_applicant_present" {
  "1" [note: 'Applicant present']
  "2" [note: 'No applicant present (internet, mail, or telephone application)']
  "3" [note: 'Not applicable']
}

Enum "mortgage_services"."hmda_applicant_type" {
  "PRIMARY" [note: 'Primary applicant for the mortgage']
  "CO_APPLICANT" [note: 'Co-applicant on the mortgage application']
  "BORROWER" [note: 'Main borrower after loan is originated']
  "CO_BORROWER" [note: 'Secondary borrower after loan is originated']
  "GUARANTOR" [note: 'Person guaranteeing the loan but not a primary applicant']
}

Table "mortgage_services"."hmda_applicant_demographics" {
  "mortgage_services_applicant_demographics_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each demographics record"]
  "mortgage_services_hmda_record_id" INTEGER [not null, ref: > mortgage_services.hmda_records.mortgage_services_hmda_record_id, note: "References the associated HMDA record"]
  "applicant_type" mortgage_services.hmda_applicant_type [not null, note: "Indicates if record is for primary applicant or co-applicant"]

  // Ethnicity fields
  "ethnicity_1" mortgage_services.hmda_ethnicity [note: "Primary ethnicity selection"]
  "ethnicity_2" mortgage_services.hmda_ethnicity_detail [note: "Secondary ethnicity selection if applicable"]
  "ethnicity_3" mortgage_services.hmda_ethnicity_detail [note: "Additional ethnicity selection if applicable"]
  "ethnicity_4" mortgage_services.hmda_ethnicity_detail [note: "Additional ethnicity selection if applicable"]
  "ethnicity_5" mortgage_services.hmda_ethnicity_detail [note: "Additional ethnicity selection if applicable"]
  "ethnicity_free_form" VARCHAR(100) [note: "Free-form text description of ethnicity"]
  "ethnicity_observed" mortgage_services.hmda_collection_method [note: "How ethnicity was determined if not provided by applicant"]

  // Race fields
  "race_1" mortgage_services.hmda_race [note: "Primary race selection"]
  "race_2" mortgage_services.hmda_race [note: "Secondary race selection if applicable"]
  "race_3" mortgage_services.hmda_race [note: "Additional race selection if applicable"]
  "race_4" mortgage_services.hmda_race [note: "Additional race selection if applicable"]
  "race_5" mortgage_services.hmda_race [note: "Additional race selection if applicable"]
  "race_detail_1" VARCHAR(100) [note: "Race detail for race_1 if applicable"]
  "race_detail_2" VARCHAR(100) [note: "Race detail for race_2 if applicable"]
  "race_detail_3" VARCHAR(100) [note: "Race detail for race_3 if applicable"]
  "race_detail_4" VARCHAR(100) [note: "Race detail for race_4 if applicable"]
  "race_detail_5" VARCHAR(100) [note: "Race detail for race_5 if applicable"]
  "race_free_form" VARCHAR(100) [note: "Free-form text description of race"]
  "race_observed" mortgage_services.hmda_collection_method [note: "How race was determined if not provided by applicant"]

  // Sex fields
  "sex" mortgage_services.hmda_sex [note: "Applicant's reported sex"]
  "sex_observed" mortgage_services.hmda_collection_method [note: "How sex was determined if not provided by applicant"]

  // Age fields
  "age" INTEGER [note: "Applicant's age in years"]
  "age_group" mortgage_services.hmda_age_group [note: "Applicant's age group for reporting"]

  // Income
  "income" NUMERIC(18,2) [note: "Applicant's annual income in thousands of dollars"]
  "debt_to_income_ratio" NUMERIC(6,3) [note: "Applicant's debt-to-income ratio percentage"]

  // Additional HMDA collection details
  "applicant_present" mortgage_services.hmda_applicant_present [note: "Whether applicant was present during application"]
  "created_date" TIMESTAMPTZ [not null, default: `CURRENT_TIMESTAMP`, note: "When the demographic record was created"]
  "modified_date" TIMESTAMPTZ [note: "When the demographic record was last modified"]

  note: "Stores demographic information about applicants for HMDA reporting"
}

Enum "mortgage_services"."hmda_edit_type" {
  SYNTACTICAL [note: 'Checks for data formatting and integrity issues']
  VALIDITY [note: 'Checks for compliance with data standards and required fields']
  QUALITY [note: 'Checks for potential data quality issues that may need verification']
  MACRO [note: 'Aggregate-level checks across multiple records for overall data consistency']
}

Enum "mortgage_services"."hmda_edit_status" {
  OPEN [note: 'Edit issue has been identified but not yet addressed']
  VERIFIED [note: 'Edit issue has been verified as correct despite triggering an edit check']
  CORRECTED [note: 'Edit issue has been corrected']
  IN_PROGRESS [note: 'Edit issue is currently being addressed']
  WAIVED [note: 'Edit issue has been waived by an authorized user']
}

Table "mortgage_services"."hmda_edits" {
  "mortgage_services_edit_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each edit finding"]
  "mortgage_services_hmda_record_id" INTEGER [not null, ref: > mortgage_services.hmda_records.mortgage_services_hmda_record_id, note: "References the HMDA record with the edit issue"]
  "edit_code" VARCHAR(20) [not null, note: "Standardized code identifying the specific edit rule"]
  "edit_type" mortgage_services.hmda_edit_type [not null, note: "Category of edit (SYNTACTICAL, VALIDITY, QUALITY, MACRO)"]
  "edit_description" TEXT [not null, note: "Description of the edit issue"]
  "status" mortgage_services.hmda_edit_status [not null, note: "Current status of the edit (OPEN, VERIFIED, CORRECTED)"]
  "created_date" TIMESTAMPTZ [not null, note: "When the edit was first identified"]
  "resolved_date" TIMESTAMPTZ [note: "When the edit was resolved if applicable"]
  "resolved_by_id" INTEGER [ref: > enterprise.associates.enterprise_associate_id, note: "User who resolved the edit"]
  "resolution_notes" TEXT [note: "Notes explaining how the edit was resolved"]

  note: "Tracks validation issues with HMDA data and their resolution"
}

// Reporting Period Enum
Enum "mortgage_services"."reporting_period" {
  ANNUAL [note: "Annual filing covering January 1 to December 31 data"]
  QUARTERLY_Q1 [note: "First quarter filing covering January 1 to March 31 data"]
  QUARTERLY_Q2 [note: "Second quarter filing covering April 1 to June 30 data"]
  QUARTERLY_Q3 [note: "Third quarter filing covering July 1 to September 30 data"]
}

// Submission Status Enum - with string values that look like numbers
Enum "mortgage_services"."submission_status" {
  "1" [note: "No data has been uploaded yet"]
  "2" [note: "File upload in progress"]
  "3" [note: "File uploaded but not yet parsed"]
  "4" [note: "Parsing in progress"]
  "5" [note: "File parsed with errors"]
  "6" [note: "File parsed, no errors"]
  "7" [note: "Validating file"]
  "8" [note: "File has validation errors"]
  "9" [note: "File passed validation with errors that need verification"]
  "10" [note: "File has validation errors that require correction"]
  "11" [note: "File passed validation, ready for verification"]
  "12" [note: "Verification in progress"]
  "13" [note: "Data has macro edits that need review"]
  "14" [note: "Data is ready for submission"]
  "15" [note: "Submission has been accepted"]
}

Table "mortgage_services"."hmda_submissions" {
  "mortgage_services_submission_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each submission"]
  "reporting_year" INTEGER [not null, note: "Calendar year for this submission"]
  "reporting_period" mortgage_services.reporting_period [not null, note: "Reporting period (ANNUAL, QUARTERLY_Q1, etc.)"]
  "institution_lei" VARCHAR(20) [not null, note: "Legal Entity Identifier of the reporting institution"]
  "submission_date" TIMESTAMPTZ [not null, note: "When the submission was made"]
  "submission_status" mortgage_services.submission_status [not null, note: "Current status of the submission process"]
  "file_name" VARCHAR(255) [note: "Name of the submitted file"]
  "file_size" INTEGER [note: "Size of the submitted file in bytes"]
  "record_count" INTEGER [note: "Number of records in the submission"]
  "error_count" INTEGER [note: "Number of errors found in the submission"]
  "warning_count" INTEGER [note: "Number of warnings found in the submission"]
  "submitted_by_id" INTEGER [ref: > enterprise.associates.enterprise_associate_id, note: "User who made the submission"]
  "submission_notes" TEXT [note: "Additional notes about the submission"]
  "confirmation_number" VARCHAR(50) [note: "Confirmation number provided by the regulatory agency"]
  "completion_date" TIMESTAMPTZ [note: "When the submission was accepted as complete"]

  Indexes {
    (reporting_year, reporting_period, institution_lei) [unique, note: "Ensures only one submission per period per institution"]
  }

  note: "Tracks submissions of HMDA data to regulatory agencies"
}

TableGroup "Mortgage" [color: #990D0D] {
  "mortgage_services"."applications"
  "mortgage_services"."application_borrowers"
  "mortgage_services"."borrowers"
  "mortgage_services"."borrower_employments"
  "mortgage_services"."borrower_incomes"
  "mortgage_services"."borrower_assets"
  "mortgage_services"."borrower_liabilities"
  "mortgage_services"."properties"
  "mortgage_services"."loans"

  note: "Tables related to mortgage applications and loan processing"
}

TableGroup "Loan & Products" [color: #990D0D] {
  "mortgage_services"."loan_products"
  "mortgage_services"."loan_rate_locks"

  note: "Tables related to mortgage product offerings and rate locks"
}

TableGroup "Processing & Underwriting" [color: #990D0D] {
  "mortgage_services"."documents"
  "mortgage_services"."conditions"
  "mortgage_services"."appraisals"
  "mortgage_services"."credit_reports"

  note: "Tables supporting the mortgage application review process"
}

TableGroup "Closing" [color: #990D0D] {
  "mortgage_services"."closing_disclosures"
  "mortgage_services"."closing_appointments"
  "mortgage_services"."closed_loans"

  note: "Tables related to mortgage loan closing activities"
}

TableGroup "Servicing" [color: #990D0D] {
  "mortgage_services"."servicing_accounts"
  "mortgage_services"."payments"
  "mortgage_services"."escrow_disbursements"
  "mortgage_services"."escrow_analyses"
  "mortgage_services"."insurance_policies"
  "mortgage_services"."loan_modifications"
  "mortgage_services"."customer_communications"

  note: "Tables related to ongoing management of closed mortgage loans"
}

TableGroup "Mortgage Regulatory" [color: #990D0D] {
  "mortgage_services"."hmda_records"
  "mortgage_services"."hmda_applicant_demographics"
  "mortgage_services"."hmda_edits"
  "mortgage_services"."hmda_submissions"

  note: "Tables related to regulatory reporting requirements for mortgage lending"
}

//
// CONSUMER LENDING
//

Table consumer_lending.loan_applications {
  "consumer_lending_application_id" SERIAL [pk, increment, note: "Unique identifier for the loan application"]
  "customer_id" INTEGER [not null, ref: > enterprise.accounts.enterprise_account_id, note: "Reference to enterprise.accounts"]
  "application_type" VARCHAR(50) [not null, note: "Personal, Auto, Student, Home Improvement, etc."]
  "status" VARCHAR(20) [not null, note: "Draft, Submitted, In Review, Approved, Denied, Cancelled"]
  "creation_date_time" TIMESTAMPTZ [not null, note: "When application was initially created"]
  "submission_date_time" TIMESTAMPTZ [note: "When application was submitted by customer"]
  "last_updated_date_time" TIMESTAMPTZ [not null, note: "Last modification timestamp"]
  "requested_amount" NUMERIC(18,2) [not null, note: "Amount requested by applicant"]
  "requested_term_months" INTEGER [not null, note: "Loan term in months requested by applicant"]
  "loan_purpose" VARCHAR(100) [not null, note: "Purpose for the loan"]
  "estimated_credit_score" INTEGER [note: "Estimated or self-reported credit score"]
  "application_channel" VARCHAR(50) [note: "Online, Mobile, Branch, Phone"]
  "referral_source" VARCHAR(100) [note: "Marketing channel or referral source"]
  "decision_date_time" TIMESTAMPTZ [note: "When final decision was made"]
  "decision_reason" VARCHAR(100) [note: "Primary reason for approval/denial"]
  "officer_id" INTEGER [ref: > enterprise.associates.enterprise_associate_id, note: "Loan officer assigned to application"]
  "branch_id" INTEGER [ref: > enterprise.buildings.enterprise_building_id, note: "Branch where application was processed"]

  note: "Stores consumer lending applications for non-mortgage loans"
}

Table "consumer_lending"."application_applicants" {
  "consumer_lending_application_applicant_id" SERIAL [pk, increment, note: "Unique identifier for application-applicant relationship"]
  "consumer_lending_application_id" INTEGER [not null, ref:> consumer_lending.loan_applications.consumer_lending_application_id, note: "Reference to loan application"]
  "consumer_lending_applicant_id" INTEGER [not null, ref: > consumer_lending.applicants.consumer_lending_applicant_id, note: "Reference to applicant"]
  "applicant_type" VARCHAR(20) [not null, note: "Primary, Co-Applicant, Guarantor"]
  "relationship_to_primary" VARCHAR(50) [note: "Spouse, Relative, Friend, etc."]
  "contribution_percentage" NUMERIC(5,2) [note: "Percentage of loan responsibility"]

  Indexes {
    (consumer_lending_application_id, consumer_lending_applicant_id) [unique, note: "Ensures applicant only appears once per application"]
  }

  note: "Links loan applications to individual applicants, allowing for multiple applicants per application."
}

Enum "consumer_lending"."housing_status" {
  OWN [note: 'Applicant owns their residence']
  RENT [note: 'Applicant rents their residence']
  LIVE_WITH_PARENTS [note: 'Applicant lives with parents or family']
  MILITARY_HOUSING [note: 'Applicant resides in military-provided housing']
  EMPLOYER_PROVIDED [note: 'Housing provided by employer']
  STUDENT_HOUSING [note: 'Housing associated with educational institution']
  SHARED_HOUSING [note: 'Applicant shares housing with roommates']
  TEMPORARY [note: 'Temporary or transitional housing']
  HOMELESS [note: 'No fixed residential address']
  OTHER [note: 'Housing status not captured by other categories']
}

Table "consumer_lending"."applicants" {
  "consumer_lending_applicant_id" SERIAL [pk, increment, note: "Unique identifier for applicant, may link to parties table"]
  "first_name" VARCHAR(100) [not null, note: "Applicant's legal first name"]
  "middle_name" VARCHAR(100) [note: "Applicant's middle name"]
  "last_name" VARCHAR(100) [not null, note: "Applicant's legal last name"]
  "date_of_birth" DATE [not null, note: "Applicant's date of birth"]
  "ssn" VARCHAR(11) [not null, note: "Social Security Number, stored encrypted"]
  "marital_status" enterprise.marital_status [note: "Married, Single, Divorced, etc."]
  "email" VARCHAR(255) [not null, note: "Primary email address"]
  "phone" VARCHAR(30) [not null, note: "Primary phone number"]
  "mobile_phone" VARCHAR(30) [note: "Mobile phone number if different from primary"]
  "citizenship_status" enterprise.citizenship_status [not null, note: "US Citizen, Permanent Resident, etc."]
  "years_at_current_address" INTEGER [note: "Years at current residence"]
  "housing_status" consumer_lending.housing_status [not null, note: "Current housing situation"]
  "monthly_housing_expense" NUMERIC(10,2) [note: "Monthly housing payment amount"]
  "current_address_id" INTEGER [ref: > enterprise.addresses.enterprise_address_id, note: "Reference to enterprise.addresses"]
  "mailing_address_id" INTEGER [ref: > enterprise.addresses.enterprise_address_id, note: "Reference to enterprise.addresses if different from current"]
  "previous_address_id" INTEGER [ref: > enterprise.addresses.enterprise_address_id, note: "Reference to enterprise.addresses for previous residence"]

  note: "Stores personal and contact information for loan applicants."
}

Table "consumer_lending"."applicant_employments" {
  "consumer_lending_employment_id" SERIAL [pk, increment, note: "Unique identifier for employment record"]
  "consumer_lending_applicant_id" INTEGER [not null, ref: > consumer_lending.applicants.consumer_lending_applicant_id, note: "Reference to applicant"]
  "employer_name" VARCHAR(150) [not null, note: "Name of employer"]
  "position" VARCHAR(100) [not null, note: "Job title or position"]
  "enterprise_address_id" INTEGER [ref: > enterprise.addresses.enterprise_address_id, note: "Reference to enterprise.addresses for employer location"]
  "phone" VARCHAR(20) [note: "Employer phone number"]
  "employment_type" VARCHAR(30) [not null, note: "Full-time, Part-time, Self-employed"]
  "start_date" DATE [not null, note: "Employment start date"]
  "end_date" DATE [note: "Employment end date if applicable"]
  "is_current" BOOLEAN [not null, note: "Indicates if this is current employer"]
  "years_in_profession" INTEGER [note: "Total years in this profession/industry"]
  "monthly_income" NUMERIC(18,2) [not null, note: "Gross monthly income"]

  note: "Stores employment history and income details for loan applicants."
}

Enum "consumer_lending"."income_type" {
  SALARY [note: 'Regular wages from employment']
  SELF_EMPLOYMENT [note: 'Income from own business or freelance work']
  RENTAL_INCOME [note: 'Income from property rentals']
  ALIMONY [note: 'Court-ordered spousal support payments']
  CHILD_SUPPORT [note: 'Court-ordered child support payments']
  PENSION [note: 'Retirement income from pension']
  SOCIAL_SECURITY [note: 'Social Security benefits']
  DISABILITY_INCOME [note: 'Income from disability benefits']
  INVESTMENT_INCOME [note: 'Income from investments, dividends, interest']
  COMMISSION [note: 'Income based on sales or performance commissions']
  BONUS [note: 'Additional compensation beyond regular salary']
  ROYALTIES [note: 'Income from intellectual property or natural resources']
  ANNUITY [note: 'Regular payments from an insurance or investment product']
  MILITARY_PAY [note: 'Income from military service']
  TIPS [note: 'Gratuity-based income']
  OTHER [note: 'Income from sources not otherwise specified']
}

Table "consumer_lending"."applicant_incomes" {
  "consumer_lending_income_id" SERIAL [pk, increment, note: "Unique identifier for income record"]
  "consumer_lending_applicant_id" INTEGER [not null, ref: > consumer_lending.applicants.consumer_lending_applicant_id, note: "Reference to applicant"]
  "income_type" consumer_lending.income_type [not null, note: "Type of income source"]
  "amount" NUMERIC(18,2) [not null, note: "Income amount"]
  "frequency" VARCHAR(20) [not null, note: "Monthly, Annual, etc."]
  "verification_status" VARCHAR(20) [not null, note: "Self-reported, Verified, Failed"]
  "verification_date" DATE [note: "Date income was verified"]

  note: "Tracks various income sources for loan applicants, including employment and other income types."
}

Enum "consumer_lending"."asset_type" {
  CHECKING_ACCOUNT [note: 'Checking bank account']
  SAVINGS_ACCOUNT [note: 'Savings bank account']
  MONEY_MARKET_ACCOUNT [note: 'Money market deposit account']
  CERTIFICATE_OF_DEPOSIT [note: 'CD or time deposit']
  INVESTMENT_ACCOUNT [note: 'Brokerage or investment account']
  RETIREMENT_ACCOUNT [note: 'Retirement savings (401k, IRA, etc.)']
  STOCKS [note: 'Individual stock holdings']
  BONDS [note: 'Bond investments']
  MUTUAL_FUNDS [note: 'Mutual fund investments']
  REAL_ESTATE [note: 'Residential or commercial property']
  VACANT_LAND [note: 'Undeveloped land']
  VEHICLE [note: 'Automobile or other vehicle']
  BUSINESS_OWNERSHIP [note: 'Ownership stake in a business']
  CRYPTOCURRENCY [note: 'Digital currency assets']
  PRECIOUS_METALS [note: 'Gold, silver, or other precious metals']
  LIFE_INSURANCE_CASH_VALUE [note: 'Cash value of life insurance policy']
  OTHER [note: 'Assets not falling into other categories']
}

Table "consumer_lending"."applicant_assets" {
  "consumer_lending_asset_id" SERIAL [pk, increment, note: "Unique identifier for asset record"]
  "consumer_lending_applicant_id" INTEGER [not null, ref: > consumer_lending.applicants.consumer_lending_applicant_id, note: "Reference to applicant"]
  "asset_type" consumer_lending.asset_type [not null, note: "Type of asset"]
  "institution_name" VARCHAR(100) [note: "Financial institution holding the asset"]
  "account_number" VARCHAR(50) [note: "Account number, stored encrypted"]
  "current_value" NUMERIC(18,2) [not null, note: "Current market value of asset"]
  "verification_status" consumer_lending.verification_status [not null, note: "Self-reported, Verified, Failed"]
  "verification_date" DATE [note: "Date asset was verified"]
  "property_address_id" INTEGER [ref: > enterprise.addresses.enterprise_address_id, note: "Reference to enterprise.addresses if asset is property"]

  note: "Records assets owned by loan applicants, including financial accounts and property."
}

Enum "consumer_lending"."liability_type" {
  CREDIT_CARD [note: 'Revolving credit card debt']
  AUTO_LOAN [note: 'Loan for vehicle purchase']
  STUDENT_LOAN [note: 'Educational loan']
  PERSONAL_LOAN [note: 'Unsecured personal loan']
  MORTGAGE [note: 'Home mortgage loan']
  HOME_EQUITY_LOAN [note: 'Loan secured by home equity']
  HOME_EQUITY_LINE_OF_CREDIT [note: 'Revolving line of credit secured by home equity']
  MEDICAL_DEBT [note: 'Outstanding medical bills or healthcare-related debt']
  BUSINESS_LOAN [note: 'Loan for business purposes']
  PERSONAL_LINE_OF_CREDIT [note: 'Revolving line of credit']
  INSTALLMENT_LOAN [note: 'Fixed-term loan with regular payments']
  PAYDAY_LOAN [note: 'Short-term, high-interest loan']
  RENT_TO_OWN [note: 'Contractual agreement for purchasing an item through installments']
  ALIMONY [note: 'Court-ordered spousal support payments']
  CHILD_SUPPORT [note: 'Court-ordered child support payments']
  TAX_DEBT [note: 'Outstanding tax liabilities']
  OTHER [note: 'Liabilities not falling into other categories']
}

Enum "consumer_lending"."verification_status" {
  SELF_REPORTED [note: 'Information provided by applicant, not yet verified']
  VERIFIED [note: 'Information confirmed through external sources']
  FAILED [note: 'Verification process could not confirm the information']
  PENDING [note: 'Verification process is currently in progress']
  PARTIALLY_VERIFIED [note: 'Some aspects of the information have been confirmed']
  UNABLE_TO_VERIFY [note: 'Unable to verify due to lack of information or access']
}

Table "consumer_lending"."applicant_liabilities" {
  "consumer_lending_liability_id" SERIAL [pk, increment, note: "Unique identifier for liability record"]
  "consumer_lending_applicant_id" INTEGER [not null, ref: > consumer_lending.applicants.consumer_lending_applicant_id, note: "Reference to applicant"]
  "liability_type" consumer_lending.liability_type [not null, note: "Type of liability"]
  "creditor_name" VARCHAR(100) [not null, note: "Name of creditor"]
  "account_number" VARCHAR(50) [note: "Account number, stored encrypted"]
  "monthly_payment" NUMERIC(18,2) [not null, note: "Required monthly payment amount"]
  "current_balance" NUMERIC(18,2) [not null, note: "Current outstanding balance"]
  "original_amount" NUMERIC(18,2) [note: "Original loan or credit amount"]
  "interest_rate" NUMERIC(6,3) [note: "Current interest rate percentage"]
  "origination_date" DATE [note: "When debt was originated"]
  "maturity_date" DATE [note: "When debt will be paid off"]
  "verification_status" consumer_lending.verification_status [not null, note: "Status of liability verification"]
  "verification_date" DATE [note: "Date liability was verified"]
  "will_be_paid_off" BOOLEAN [default: false, note: "Indicates if debt will be paid off with loan"]

  note: "Tracks liabilities and debt obligations of loan applicants."
}

Enum "consumer_lending"."loan_type" {
  PERSONAL [note: 'Unsecured personal loan for various purposes']
  AUTO [note: 'Loan for vehicle purchase']
  STUDENT [note: 'Educational loan for tuition and expenses']
  HOME_IMPROVEMENT [note: 'Loan for home renovation or repair']
  DEBT_CONSOLIDATION [note: 'Loan to combine multiple debts']
  MEDICAL [note: 'Loan for medical expenses']
  BUSINESS [note: 'Loan for small business needs']
  RECREATIONAL_VEHICLE [note: 'Loan for RVs, boats, or other recreational vehicles']
  MOTORCYCLE [note: 'Loan specifically for motorcycle purchase']
  BOAT [note: 'Loan for boat or marine vessel purchase']
  WEDDING [note: 'Loan for wedding expenses']
  VACATION [note: 'Loan for travel or vacation expenses']
  GREEN_ENERGY [note: 'Loan for eco-friendly home improvements or renewable energy equipment']
  OTHER [note: 'Loan type not falling into other categories']
}

Enum "consumer_lending"."interest_rate_type" {
  FIXED [note: 'Interest rate remains constant throughout loan term']
  VARIABLE [note: 'Interest rate can change based on market conditions']
  ADJUSTABLE [note: 'Interest rate can be adjusted at specific intervals']
  HYBRID [note: 'Combines fixed and variable rate periods']
}

Enum "consumer_lending"."fee_type" {
  FLAT [note: 'Fixed dollar amount fee']
  PERCENTAGE [note: 'Fee calculated as a percentage of loan amount or transaction']
  TIERED [note: 'Fee varies based on loan amount or other criteria']
}

Enum "consumer_lending"."disbursement_option" {
  DIRECT_DEPOSIT [note: 'Funds transferred directly to bank account']
  CHECK [note: 'Physical check issued']
  DEALER_DIRECT [note: 'Funds sent directly to dealer (often for auto loans)']
  WIRE_TRANSFER [note: 'Electronic funds transfer']
  CASH [note: 'Cash payment']
  CREDIT_TO_ACCOUNT [note: 'Funds credited to existing account']
  OTHER [note: 'Disbursement method not listed']
}

Table "consumer_lending"."loan_products" {
  "consumer_lending_loan_product_id" SERIAL [pk, increment, note: "Unique identifier for loan product"]
  "product_name" VARCHAR(100) [not null, note: "Marketing name of the product"]
  "product_code" VARCHAR(20) [not null, note: "Internal code for the product"]
  "loan_type" consumer_lending.loan_type [not null, note: "Type of loan product"]
  "description" TEXT [note: "Detailed product description"]
  "interest_rate_type" consumer_lending.interest_rate_type [not null, note: "Type of interest rate"]
  "base_interest_rate" NUMERIC(6,3) [not null, note: "Starting interest rate before adjustments"]
  "min_term_months" INTEGER [not null, note: "Minimum allowed term in months"]
  "max_term_months" INTEGER [not null, note: "Maximum allowed term in months"]
  "min_loan_amount" NUMERIC(18,2) [note: "Minimum allowed loan amount"]
  "max_loan_amount" NUMERIC(18,2) [note: "Maximum allowed loan amount"]
  "min_credit_score" INTEGER [note: "Minimum required credit score"]
  "origination_fee_type" consumer_lending.fee_type [note: "Type of origination fee"]
  "origination_fee_amount" NUMERIC(10,2) [note: "Amount or percentage of origination fee"]
  "late_fee_type" consumer_lending.fee_type [note: "Type of late fee"]
  "late_fee_amount" NUMERIC(10,2) [note: "Amount or percentage of late fee"]
  "is_active" BOOLEAN [not null, default: true, note: "Whether product is currently offered"]
  "required_collateral" BOOLEAN [not null, default: false, note: "Whether collateral is required"]
  "early_repayment_penalty" BOOLEAN [not null, default: false, note: "Whether penalty applies for early payoff"]
  "disbursement_options" consumer_lending.disbursement_option [note: "Method of loan disbursement"]

  note: "Defines the various loan products offered to consumers, including their terms, fees, and features."
}

Enum "consumer_lending"."eligibility_criteria_type" {
  CREDIT_SCORE [note: 'Minimum or maximum credit score requirement']
  INCOME [note: 'Minimum or maximum annual income requirement']
  DEBT_TO_INCOME_RATIO [note: 'Maximum debt-to-income ratio allowed']
  EMPLOYMENT_STATUS [note: 'Required employment status or type']
  TIME_IN_BUSINESS [note: 'Minimum time in business for self-employed applicants']
  AGE [note: 'Minimum or maximum age requirement']
  CITIZENSHIP [note: 'Citizenship or residency requirements']
  EXISTING_DEBT [note: 'Maximum existing debt levels']
  BANKRUPTCY_HISTORY [note: 'Restrictions based on past bankruptcy']
  COLLATERAL_VALUE [note: 'Minimum or maximum value of collateral']
  INDUSTRY [note: 'Specific industry or sector requirements']
  GEOGRAPHIC_LOCATION [note: 'Location-based eligibility criteria']
  EDUCATION_LEVEL [note: 'Minimum education requirements']
  NET_WORTH [note: 'Minimum net worth requirement']
  OTHER [note: 'Eligibility criteria not falling into other categories']
}

Table "consumer_lending"."product_eligibility_criteria" {
  "consumer_lending_criteria_id" SERIAL [pk, increment, note: "Unique identifier for eligibility criteria"]
  "consumer_lending_loan_product_id" INTEGER [not null, ref: > consumer_lending.loan_products.consumer_lending_loan_product_id, note: "Reference to loan product"]
  "criteria_type" consumer_lending.eligibility_criteria_type [not null, note: "Type of eligibility criteria"]
  "min_value" VARCHAR(50) [note: "Minimum value for eligibility"]
  "max_value" VARCHAR(50) [note: "Maximum value for eligibility"]
  "required" BOOLEAN [not null, note: "Whether this criteria is required"]
  "description" TEXT [note: "Description of the eligibility criteria"]

  note: "Specifies the eligibility criteria for each loan product, such as credit score, income, and employment requirements."
}

Table "consumer_lending"."risk_based_pricing_tiers" {
  "consumer_lending_pricing_tier_id" SERIAL [pk, increment, note: "Unique identifier for pricing tier"]
  "consumer_lending_loan_product_id" INTEGER [not null, ref: > consumer_lending.loan_products.consumer_lending_loan_product_id, note: "Reference to loan product"]
  "tier_name" VARCHAR(50) [not null, note: "A, B, C, D, etc."]
  "min_credit_score" INTEGER [note: "Minimum credit score for this tier"]
  "max_credit_score" INTEGER [note: "Maximum credit score for this tier"]
  "interest_rate_adjustment" NUMERIC(4,2) [not null, note: "Added to base rate"]
  "min_loan_amount" NUMERIC(18,2) [note: "Minimum loan amount for this tier"]
  "max_loan_amount" NUMERIC(18,2) [note: "Maximum loan amount for this tier"]
  "max_dti_ratio" NUMERIC(5,2) [note: "Maximum debt-to-income ratio allowed"]
  "is_active" BOOLEAN [not null, note: "Whether tier is currently in use"]

  note: "Defines pricing tiers based on risk factors, such as credit score and debt-to-income ratio, for loan products."
}

Enum "consumer_lending"."credit_report_type" {
  TRI_MERGE [note: 'Credit report combining data from all three major bureaus']
  SINGLE_BUREAU [note: 'Credit report from a single credit bureau']
  MERGED_BUREAU [note: 'Credit report merging data from two bureaus']
  EXPANDED [note: 'Comprehensive report with additional details']
  CUSTOM [note: 'Customized report with specific requirements']
  OTHER [note: 'Report type not falling into standard categories']
}

Enum "consumer_lending"."credit_bureau" {
  EQUIFAX [note: 'Equifax credit reporting agency']
  EXPERIAN [note: 'Experian credit reporting agency']
  TRANSUNION [note: 'TransUnion credit reporting agency']
  INNOVIS [note: 'Innovis credit reporting agency']
  CLEAR_REPORT [note: 'Alternative credit reporting service']
  OTHER [note: 'Credit bureau not listed']
}

Enum "consumer_lending"."credit_report_status" {
  COMPLETED [note: 'Credit report successfully retrieved and processed']
  FAILED [note: 'Attempt to retrieve credit report was unsuccessful']
  PENDING [note: 'Credit report retrieval is in progress']
  PARTIALLY_RETRIEVED [note: 'Only partial credit report information obtained']
  EXPIRED [note: 'Credit report is no longer valid']
  UNDER_REVIEW [note: 'Credit report is being reviewed or verified']
  ERROR [note: 'Technical error occurred during report retrieval']
  OTHER [note: 'Status not falling into standard categories']
}

Table "consumer_lending"."credit_reports" {
  "consumer_lending_credit_report_id" SERIAL [pk, increment, note: "Unique identifier for credit report"]
  "consumer_lending_application_id" INTEGER [not null, ref:> consumer_lending.loan_applications.consumer_lending_application_id, note: "Reference to loan application"]
  "consumer_lending_applicant_id" INTEGER [not null, ref: > consumer_lending.applicants.consumer_lending_applicant_id, note: "Reference to applicant"]
  "report_date" TIMESTAMPTZ [not null, note: "When report was pulled"]
  "expiration_date" DATE [not null, note: "When report expires"]
  "credit_score" INTEGER [note: "Primary credit score from report"]
  "report_type" consumer_lending.credit_report_type [not null, note: "Type of credit report"]
  "bureau_name" consumer_lending.credit_bureau [note: "Credit bureau providing the report"]
  "report_reference" VARCHAR(100) [note: "External reference ID from bureau"]
  "report_path" VARCHAR(500) [note: "Path to stored report file"]
  "status" consumer_lending.credit_report_status [not null, note: "Status of credit report retrieval"]

  note: "Stores credit reports obtained for loan applicants, including credit scores and other relevant information."
}

Enum "consumer_lending"."account_type" {
  MORTGAGE [note: 'Home mortgage loan account']
  INSTALLMENT [note: 'Fixed-term loan with regular payments']
  REVOLVING [note: 'Credit account with variable balance and payments']
  AUTO_LOAN [note: 'Vehicle financing loan']
  STUDENT_LOAN [note: 'Educational loan account']
  PERSONAL_LOAN [note: 'Unsecured personal loan']
  CREDIT_CARD [note: 'Revolving credit card account']
  HOME_EQUITY [note: 'Home equity loan or line of credit']
  BUSINESS_LOAN [note: 'Commercial or business loan']
  LEASE [note: 'Leasing agreement']
  MEDICAL_DEBT [note: 'Medical bill or healthcare-related debt']
  COLLECTION [note: 'Account in collections']
  CHARGE_ACCOUNT [note: 'Retail or merchant charge account']
  OTHER [note: 'Account type not falling into standard categories']
}

Enum "consumer_lending"."payment_status" {
  CURRENT [note: 'Account is up to date with no missed payments']
  DAYS_30_LATE [note: 'Payment is 30 days past due']
  DAYS_60_LATE [note: 'Payment is 60 days past due']
  DAYS_90_LATE [note: 'Payment is 90 days past due']
  DAYS_120_LATE [note: 'Payment is 120 days past due']
  DAYS_150_LATE [note: 'Payment is 150 days past due']
  CHARGED_OFF [note: 'Account has been written off as a loss']
  IN_COLLECTIONS [note: 'Account has been sent to collections']
  SETTLED [note: 'Account balance has been negotiated and settled']
  REPOSSESSION [note: 'Collateral has been repossessed']
  FORECLOSURE [note: 'Property has been foreclosed']
  BANKRUPTCY [note: 'Account included in bankruptcy filing']
  OTHER [note: 'Payment status not falling into standard categories']
}

Enum "consumer_lending"."delinquency_severity" {
  NONE [note: 'No delinquency recorded']
  MINOR [note: 'Slight delay in payment, less than 30 days']
  MODERATE [note: 'Payment 30-60 days late']
  SERIOUS [note: 'Payment 60-90 days late']
  SEVERE [note: 'Payment over 90 days late']
  CRITICAL [note: 'Account charged off or in collections']
  LEGAL_ACTION [note: 'Legal proceedings initiated']
  BANKRUPTCY [note: 'Delinquency related to bankruptcy']
  OTHER [note: 'Delinquency type not falling into standard categories']
}

Table "consumer_lending"."credit_report_tradelines" {
  "consumer_lending_tradeline_id" SERIAL [pk, increment, note: "Unique identifier for tradeline"]
  "consumer_lending_credit_report_id" INTEGER [not null, ref: > consumer_lending.credit_reports.consumer_lending_credit_report_id, note: "Reference to credit report"]
  "account_type" consumer_lending.account_type [not null, note: "Type of credit account"]
  "creditor_name" VARCHAR(100) [not null, note: "Name of creditor"]
  "account_number" VARCHAR(50) [note: "Masked account number"]
  "open_date" DATE [note: "When account was opened"]
  "current_balance" NUMERIC(18,2) [note: "Current balance on account"]
  "high_credit" NUMERIC(18,2) [note: "Highest balance or credit limit"]
  "credit_limit" NUMERIC(18,2) [note: "Credit limit if applicable"]
  "monthly_payment" NUMERIC(18,2) [note: "Monthly payment amount"]
  "payment_status" consumer_lending.payment_status [note: "Current status of account payments"]
  "days_past_due" INTEGER [note: "Current days past due"]
  "worst_delinquency" consumer_lending.delinquency_severity [note: "Worst historical delinquency"]
  "worst_delinquency_date" DATE [note: "Date of worst delinquency"]

  note: "Contains details of individual tradelines (credit accounts) reported on a credit report."
}

Enum "consumer_lending"."inquiry_type" {
  HARD [note: 'Credit inquiry that may impact credit score, typically for credit applications']
  SOFT [note: 'Credit inquiry that does not affect credit score, often for pre-approvals or background checks']
  PRE_APPROVAL [note: 'Preliminary credit check for potential offers']
  ACCOUNT_REVIEW [note: 'Periodic review of existing account by current creditor']
  EMPLOYMENT_VERIFICATION [note: 'Credit check for employment purposes']
  INSURANCE_QUOTE [note: 'Credit check for insurance underwriting']
  TENANT_SCREENING [note: 'Credit check for rental application']
  PROMOTIONAL [note: 'Inquiry for marketing or promotional purposes']
  COLLECTION [note: 'Inquiry related to debt collection efforts']
  FRAUD_PREVENTION [note: 'Credit check for fraud detection and prevention']
  OTHER [note: 'Inquiry type not falling into standard categories']
}

Table "consumer_lending"."credit_inquiries" {
  "consumer_lending_inquiry_id" SERIAL [pk, increment, note: "Unique identifier for inquiry record"]
  "consumer_lending_credit_report_id" INTEGER [not null, ref: > consumer_lending.credit_reports.consumer_lending_credit_report_id, note: "Reference to credit report"]
  "inquiry_date" DATE [not null, note: "Date of credit inquiry"]
  "creditor_name" VARCHAR(100) [not null, note: "Institution that made inquiry"]
  "inquiry_type" consumer_lending.inquiry_type [note: "Type of credit inquiry"]

  note: "Records inquiries made on a credit report, indicating potential credit applications or checks."
}

Enum "consumer_lending"."public_record_type" {
  BANKRUPTCY [note: 'Legal proceeding for debt relief or restructuring']
  TAX_LIEN [note: 'Government claim against assets for unpaid taxes']
  JUDGMENT [note: 'Court ruling requiring payment or action']
  FORECLOSURE [note: 'Legal process of repossessing property due to default']
  REPOSSESSION [note: 'Seizure of property due to non-payment']
  WAGE_GARNISHMENT [note: 'Court-ordered withholding of wages for debt payment']
  CIVIL_LAWSUIT [note: 'Legal action for monetary damages']
  SMALL_CLAIMS [note: 'Court judgment for relatively small monetary disputes']
  CHILD_SUPPORT_LIEN [note: 'Legal claim related to unpaid child support']
  FEDERAL_TAX_LIEN [note: 'Federal government tax debt claim']
  STATE_TAX_LIEN [note: 'State government tax debt claim']
  OTHER [note: 'Public record type not falling into standard categories']
}

Enum "consumer_lending"."public_record_status" {
  ACTIVE [note: 'Public record is current and unresolved']
  SATISFIED [note: 'Debt or obligation has been fully paid']
  DISCHARGED [note: 'Legally released from obligation, typically in bankruptcy']
  SETTLED [note: 'Partial resolution or negotiated settlement']
  VACATED [note: 'Court ruling has been overturned or nullified']
  PENDING [note: 'Currently in process or awaiting final determination']
  RELEASED [note: 'Officially removed or cleared']
  EXPIRED [note: 'Time-limit for record has passed']
  OTHER [note: 'Status not falling into standard categories']
}

Table "consumer_lending"."public_records" {
  "consumer_lending_record_id" SERIAL [pk, increment, note: "Unique identifier for public record"]
  "consumer_lending_credit_report_id" INTEGER [not null, ref: > consumer_lending.credit_reports.consumer_lending_credit_report_id, note: "Reference to credit report"]
  "record_type" consumer_lending.public_record_type [not null, note: "Type of public record"]
  "status" consumer_lending.public_record_status [not null, note: "Current status of the public record"]
  "filing_date" DATE [not null, note: "Date record was filed"]
  "amount" NUMERIC(18,2) [note: "Amount of judgment or lien"]
  "reference_number" VARCHAR(100) [note: "Court or filing reference number"]

  note: "Stores public records, such as bankruptcies, liens, and judgments, associated with a credit report."
}

Enum "consumer_lending"."decision_model_type" {
  CREDIT_SCORE [note: 'Model for calculating credit worthiness']
  INCOME_VERIFICATION [note: 'Model for verifying and assessing income']
  FRAUD_DETECTION [note: 'Model for identifying potential fraudulent applications']
  RISK_ASSESSMENT [note: 'Comprehensive model for evaluating overall lending risk']
  DEBT_TO_INCOME_ANALYSIS [note: 'Model for analyzing debt-to-income ratio']
  BEHAVIORAL_SCORING [note: 'Model based on past financial behavior']
  MACHINE_LEARNING_PREDICTIVE [note: 'Advanced predictive model using machine learning']
  ALTERNATIVE_CREDIT_SCORING [note: 'Model using non-traditional credit data']
  EMPLOYMENT_VERIFICATION [note: 'Model for assessing employment stability']
  COLLATERAL_VALUATION [note: 'Model for evaluating collateral value']
  REGULATORY_COMPLIANCE [note: 'Model for ensuring lending regulation compliance']
  PRICING_MODEL [note: 'Model for determining loan pricing and terms']
  OTHER [note: 'Decision model type not falling into standard categories']
}

Table "consumer_lending"."decision_models" {
  "consumer_lending_model_id" SERIAL [pk, increment, note: "Unique identifier for decision model"]
  "model_name" VARCHAR(100) [not null, note: "Name of the model"]
  "model_version" VARCHAR(20) [not null, note: "Version of the model"]
  "model_type" consumer_lending.decision_model_type [not null, note: "Type of decision model"]
  "is_active" BOOLEAN [not null, note: "Whether model is in active use"]
  "effective_date" DATE [not null, note: "When model became effective"]
  "expiration_date" DATE [note: "When model expires"]
  "description" TEXT [note: "Description of the model and its purpose"]

  note: "Contains information about the decision models used to evaluate loan applications, including credit scoring, income verification, and fraud detection models."
}

Enum "consumer_lending"."decision_type" {
  PREQUALIFICATION [note: 'Preliminary assessment of loan eligibility']
  INITIAL [note: 'First formal review of loan application']
  FINAL [note: 'Conclusive decision after complete review']
  RECONSIDERATION [note: 'Review of a previously made decision']
  COUNTER_OFFER [note: 'Alternative loan terms proposed']
  CONDITIONAL [note: 'Decision with specific conditions to be met']
  ADMINISTRATIVE_REVIEW [note: 'Internal administrative review']
  OTHER [note: 'Decision type not falling into standard categories']
}

Enum "consumer_lending"."decision_result" {
  APPROVED [note: 'Loan application fully approved']
  DENIED [note: 'Loan application rejected']
  PENDING_REVIEW [note: 'Application under active review']
  SUSPENDED [note: 'Application temporarily halted']
  INCOMPLETE [note: 'Application lacks required information']
  REFERRED [note: 'Requires additional manual review']
  COUNTER_OFFER [note: 'Alternative terms proposed']
  WITHDRAWN [note: 'Applicant withdrew the application']
  OTHER [note: 'Decision result not falling into standard categories']
}

Table "consumer_lending"."application_decisions" {
  "consumer_lending_decision_id" SERIAL [pk, increment, note: "Unique identifier for decision"]
  "consumer_lending_application_id" INTEGER [not null, ref:> consumer_lending.loan_applications.consumer_lending_application_id, note: "Reference to loan application"]
  "decision_type" consumer_lending.decision_type [not null, note: "Type of decision"]
  "decision_result" consumer_lending.decision_result [not null, note: "Result of the decision"]
  "decision_date_time" TIMESTAMPTZ [not null, note: "When decision was made"]
  "decision_by_id" INTEGER [ref: > enterprise.associates.enterprise_associate_id, note: "User that made decision"]
  "consumer_lending_model_id" INTEGER [ref: > consumer_lending.decision_models.consumer_lending_model_id, note: "Reference to decision model used"]
  "decision_score" NUMERIC(10,2) [note: "Numeric score from decision model"]
  "consumer_lending_pricing_tier_id" INTEGER [ref: > consumer_lending.risk_based_pricing_tiers.consumer_lending_pricing_tier_id, note: "Reference to pricing tier if approved"]
  "approved_amount" NUMERIC(18,2) [note: "Approved loan amount"]
  "approved_term_months" INTEGER [note: "Approved loan term in months"]
  "approved_interest_rate" NUMERIC(6,3) [note: "Approved interest rate"]
  "approved_monthly_payment" NUMERIC(18,2) [note: "Estimated monthly payment"]
  "conditional_approval" BOOLEAN [note: "Whether approval has conditions"]
  "expires_date" DATE [note: "When approval or prequalification expires"]
  "notes" TEXT [note: "Additional decision notes"]

  note: "Records the decisions made on loan applications, including approvals, denials, and pre-qualifications."
}

Enum "consumer_lending"."decision_reason_code" {
  INSUFFICIENT_INCOME [note: 'Applicant\'s income does not meet minimum requirements']
  HIGH_DEBT_TO_INCOME [note: 'Debt-to-income ratio exceeds acceptable limits']
  LOW_CREDIT_SCORE [note: 'Credit score below minimum threshold']
  INSUFFICIENT_CREDIT_HISTORY [note: 'Limited or no established credit history']
  RECENT_BANKRUPTCY [note: 'Bankruptcy within recent time period']
  OUTSTANDING_COLLECTIONS [note: 'Unresolved collection accounts']
  INCOMPLETE_APPLICATION [note: 'Application missing required information']
  NEGATIVE_PAYMENT_HISTORY [note: 'History of late payments or defaults']
  INSUFFICIENT_COLLATERAL [note: 'Inadequate collateral for secured loans']
  EMPLOYMENT_INSTABILITY [note: 'Inconsistent or unstable employment']
  FRAUD_RISK [note: 'Potential fraud detected in application']
  REGULATORY_RESTRICTIONS [note: 'Fails to meet regulatory lending requirements']
  GEOGRAPHIC_RESTRICTION [note: 'Does not meet geographic lending criteria']
  UNVERIFIABLE_INFORMATION [note: 'Unable to verify provided information']
  INSUFFICIENT_ASSETS [note: 'Lack of sufficient liquid assets']
  AGE_REQUIREMENTS [note: 'Does not meet age criteria for the loan']
  EXISTING_RELATIONSHIP [note: 'Issues with existing financial relationships']
  RISK_TIER_INELIGIBILITY [note: 'Does not qualify for any risk-based pricing tier']
  OTHER [note: 'Reason not falling into standard categories']
}

Table "consumer_lending"."decision_reasons" {
  "consumer_lending_decision_reason_id" SERIAL [pk, increment, note: "Unique identifier for decision reason"]
  "consumer_lending_decision_id" INTEGER [not null, ref: > consumer_lending.application_decisions.consumer_lending_decision_id, note: "Reference to application decision"]
  "reason_code" consumer_lending.decision_reason_code [not null, note: "Standard reason code for decision"]
  "reason_description" VARCHAR(255) [not null, note: "Description of reason"]
  "sequence" INTEGER [not null, note: "Order of importance for reason"]

  note: "Provides specific reasons for the decisions made on loan applications, linked to the application_decisions table."
}

Enum "consumer_lending"."delivery_method" {
  EMAIL [note: 'Notice sent via electronic mail']
  MAIL [note: 'Physical notice sent through postal service']
  PORTAL [note: 'Notice delivered through online customer portal']
  SMS [note: 'Notice sent via text message']
  PHONE [note: 'Notice communicated via phone call']
  FAX [note: 'Notice sent via facsimile']
  IN_PERSON [note: 'Notice delivered in person']
  OTHER [note: 'Delivery method not falling into standard categories']
}

Enum "consumer_lending"."adverse_action_notice_status" {
  GENERATED [note: 'Notice has been created but not yet sent']
  SENT [note: 'Notice has been transmitted to the applicant']
  DELIVERED [note: 'Notice has been confirmed as received by the applicant']
  FAILED [note: 'Attempt to send notice was unsuccessful']
  PENDING [note: 'Notice is in process of being sent']
  READ [note: 'Notice has been opened and read by the applicant']
  RETURNED [note: 'Notice was returned undeliverable']
  OTHER [note: 'Notice status not falling into standard categories']
}

Table "consumer_lending"."adverse_action_notices" {
  "consumer_lending_notice_id" SERIAL [pk, increment, note: "Unique identifier for notice"]
  "consumer_lending_application_id" INTEGER [not null, ref:> consumer_lending.loan_applications.consumer_lending_application_id, note: "Reference to loan application"]
  "generated_date" TIMESTAMPTZ [not null, note: "When notice was generated"]
  "sent_date" TIMESTAMPTZ [note: "When notice was sent to applicant"]
  "delivery_method" consumer_lending.delivery_method [not null, note: "Method of delivering the notice"]
  "notice_path" VARCHAR(500) [note: "Path to stored notice document"]
  "status" consumer_lending.adverse_action_notice_status [not null, note: "Current status of the notice"]

  note: "Tracks adverse action notices sent to applicants when their loan applications are denied."
}

Enum "consumer_lending"."vehicle_condition" {
  NEW [note: 'Brand new vehicle, never previously registered']
  USED [note: 'Previously owned or registered vehicle']
  CERTIFIED_PRE_OWNED [note: 'Used vehicle that has been inspected and certified by manufacturer']
  DEMO [note: 'Demonstrator vehicle used by dealership']
  SALVAGE [note: 'Vehicle with significant previous damage']
  RECONSTRUCTED [note: 'Rebuilt after major damage']
  OTHER [note: 'Vehicle condition not falling into standard categories']
}

Enum "consumer_lending"."valuation_source" {
  KELLEY_BLUE_BOOK [note: 'Valuation from Kelley Blue Book']
  NADA_GUIDES [note: 'Valuation from NADA Guides']
  EDMUNDS [note: 'Valuation from Edmunds']
  BLACK_BOOK [note: 'Valuation from Black Book']
  CARFAX [note: 'Valuation from Carfax']
  DEALER_APPRAISAL [note: 'Valuation provided by dealership']
  INDEPENDENT_APPRAISAL [note: 'Valuation from independent appraiser']
  MANHEIM [note: 'Valuation from Manheim automotive marketplace']
  OTHER [note: 'Valuation source not falling into standard categories']
}

Table "consumer_lending"."vehicles" {
  "vehicle_id" SERIAL [pk, increment, note: "Unique identifier for vehicle"]
  "consumer_lending_application_id" INTEGER [not null, ref:> consumer_lending.loan_applications.consumer_lending_application_id, note: "Reference to loan application"]
  "year" INTEGER [not null, note: "Vehicle model year"]
  "make" VARCHAR(50) [not null, note: "Vehicle manufacturer"]
  "model" VARCHAR(50) [not null, note: "Vehicle model"]
  "trim" VARCHAR(50) [note: "Vehicle trim level"]
  "vin" VARCHAR(17) [note: "Vehicle Identification Number"]
  "vehicle_type" consumer_lending.vehicle_condition [not null, note: "Condition of the vehicle"]
  "mileage" INTEGER [note: "Current odometer reading"]
  "purchase_price" NUMERIC(18,2) [not null, note: "Agreed purchase price"]
  "down_payment" NUMERIC(18,2) [note: "Down payment amount"]
  "trade_in_value" NUMERIC(18,2) [note: "Value of trade-in vehicle"]
  "trade_in_balance_owed" NUMERIC(18,2) [note: "Loan balance on trade-in"]
  "dealer_name" VARCHAR(100) [note: "Name of dealership"]
  "dealer_address_id" INTEGER [ref: > enterprise.addresses.enterprise_address_id, note: "Reference to enterprise.addresses"]
  "is_private_sale" BOOLEAN [not null, default: false, note: "Whether private sale or dealer"]
  "valuation_source" consumer_lending.valuation_source [note: "Source of vehicle valuation"]
  "valuation_amount" NUMERIC(18,2) [note: "Third-party valuation amount"]
  "valuation_date" DATE [note: "Date of valuation"]

  note: "Stores information about vehicles involved in auto loan applications, including details like make, model, and purchase price."
}

Table "consumer_lending"."loan_accounts" {
  "loan_account_id" SERIAL [pk, increment, note: "Unique identifier for loan account"]
  "consumer_lending_application_id" INTEGER [not null, ref:> consumer_lending.loan_applications.consumer_lending_application_id, note: "Reference to loan application"]
  "consumer_lending_loan_product_id" INTEGER [not null, ref: > consumer_lending.loan_products.consumer_lending_loan_product_id, note: "Reference to loan product"]
  "account_number" VARCHAR(30) [not null, unique, note: "Customer-facing account number"]
  "status" VARCHAR(20) [not null, note: "Active, Paid Off, Charged Off, etc."]
  "origination_date" DATE [not null, note: "Date loan was originated"]
  "funding_date" DATE [not null, note: "Date loan was funded"]
  "maturity_date" DATE [not null, note: "Scheduled loan payoff date"]
  "first_payment_date" DATE [not null, note: "Date first payment is due"]
  "original_principal_balance" NUMERIC(18,2) [not null, note: "Initial loan amount"]
  "current_principal_balance" NUMERIC(18,2) [not null, note: "Current principal balance"]
  "original_interest_rate" NUMERIC(6,3) [not null, note: "Interest rate at origination"]
  "current_interest_rate" NUMERIC(6,3) [not null, note: "Current interest rate"]
  "original_term_months" INTEGER [not null, note: "Original loan term in months"]
  "remaining_term_months" INTEGER [not null, note: "Remaining months on loan"]
  "payment_amount" NUMERIC(18,2) [not null, note: "Regular payment amount"]
  "payment_frequency" VARCHAR(20) [not null, note: "Monthly, Bi-weekly"]
  "next_payment_date" DATE [not null, note: "Next payment due date"]
  "next_payment_amount" NUMERIC(18,2) [not null, note: "Amount due for next payment"]
  "past_due_amount" NUMERIC(18,2) [not null, default: 0, note: "Current past due amount"]
  "days_past_due" INTEGER [not null, default: 0, note: "Current days past due"]
  "total_fees_charged" NUMERIC(18,2) [not null, default: 0, note: "Sum of all fees charged"]
  "total_fees_paid" NUMERIC(18,2) [not null, default: 0, note: "Sum of all fees paid"]
  "accrued_interest" NUMERIC(18,2) [not null, default: 0, note: "Current accrued unpaid interest"]
  "interest_paid_ytd" NUMERIC(18,2) [not null, default: 0, note: "Interest paid year to date"]
  "principal_paid_ytd" NUMERIC(18,2) [not null, default: 0, note: "Principal paid year to date"]
  "interest_paid_total" NUMERIC(18,2) [not null, default: 0, note: "Total interest paid life of loan"]
  "principal_paid_total" NUMERIC(18,2) [not null, default: 0, note: "Total principal paid life of loan"]
  "late_count_30" INTEGER [not null, default: 0, note: "Count of 30+ day late payments"]
  "late_count_60" INTEGER [not null, default: 0, note: "Count of 60+ day late payments"]
  "late_count_90" INTEGER [not null, default: 0, note: "Count of 90+ day late payments"]
  "auto_pay_enabled" BOOLEAN [not null, default: false, note: "Whether automatic payments are active"]
  "servicing_transferred_date" DATE [note: "Date servicing was transferred if applicable"]

  note: "Stores information about active loan accounts, including loan details, payment history, and current status."
}

Enum "consumer_lending"."payment_schedule_status" {
  SCHEDULED [note: 'Payment is planned but not yet due']
  PAID [note: 'Payment has been successfully completed']
  PAST_DUE [note: 'Payment is overdue and not yet made']
  PARTIALLY_PAID [note: 'Payment made but not for full amount']
  SKIPPED [note: 'Payment intentionally skipped or deferred']
  LATE_PROCESSED [note: 'Payment processed after scheduled date']
  CANCELED [note: 'Scheduled payment was canceled']
  PENDING [note: 'Payment is in process of being made']
  FAILED [note: 'Payment attempt was unsuccessful']
  OTHER [note: 'Payment status not falling into standard categories']
}

Table "consumer_lending"."payment_schedules" {
  "payment_schedule_id" SERIAL [pk, increment, note: "Unique identifier for schedule entry"]
  "consumer_lending_loan_account_id" INTEGER [not null, ref: > consumer_lending.loan_accounts.loan_account_id, note: "Reference to loan account"]
  "payment_number" INTEGER [not null, note: "Sequential payment number"]
  "scheduled_date" DATE [not null, note: "Date payment is scheduled"]
  "payment_amount" NUMERIC(18,2) [not null, note: "Total payment amount due"]
  "principal_amount" NUMERIC(18,2) [not null, note: "Portion applied to principal"]
  "interest_amount" NUMERIC(18,2) [not null, note: "Portion applied to interest"]
  "beginning_balance" NUMERIC(18,2) [not null, note: "Principal balance before payment"]
  "ending_balance" NUMERIC(18,2) [not null, note: "Principal balance after payment"]
  "status" consumer_lending.payment_schedule_status [not null, note: "Current status of the payment schedule entry"]
  "actual_payment_date" DATE [note: "Date payment was actually made"]
  "actual_payment_id" INTEGER [ref: > consumer_lending.loan_payments.consumer_lending_payment_id, note: "Reference to loan_payments if paid"]

  Indexes {
    (consumer_lending_loan_account_id, payment_number) [unique, note: "Ensures unique payment numbers per loan"]
  }

  note: "Contains the payment schedule for each loan account, including scheduled dates, amounts, and payment status."
}

Table "consumer_lending"."disbursements" {
  "disbursement_id" SERIAL [pk, increment, note: "Unique identifier for disbursement"]
  "consumer_lending_loan_account_id" INTEGER [not null, ref: > consumer_lending.loan_accounts.loan_account_id, note: "Reference to loan account"]
  "disbursement_date" DATE [not null, note: "Date funds were disbursed"]
  "disbursement_amount" NUMERIC(18,2) [not null, note: "Amount disbursed"]
  "disbursement_method" VARCHAR(50) [not null, note: "ACH, Check, Wire"]
  "disbursement_status" VARCHAR(20) [not null, note: "Pending, Completed, Failed"]
  "recipient_name" VARCHAR(100) [not null, note: "Name of recipient"]
  "recipient_account_type" VARCHAR(20) [note: "Checking, Savings"]
  "recipient_account_number" VARCHAR(50) [note: "Recipient account number, encrypted"]
  "recipient_routing_number" VARCHAR(9) [note: "Recipient routing number"]
  "check_number" VARCHAR(20) [note: "Check number if applicable"]
  "tracking_number" VARCHAR(50) [note: "Tracking or reference number"]
  "notes" TEXT [note: "Additional disbursement notes"]

  note: "Tracks the disbursement of funds for loan accounts, including the date, amount, method, and recipient information."
}

Enum "consumer_lending"."payment_type" {
  REGULAR [note: 'Scheduled monthly payment']
  EXTRA_PRINCIPAL [note: 'Additional payment applied directly to principal']
  LATE [note: 'Payment made after scheduled due date']
  FULL_PAYOFF [note: 'Complete loan payoff']
  PARTIAL [note: 'Partial payment of scheduled amount']
  CATCH_UP [note: 'Payment to bring account current after missed payments']
  PREPAYMENT [note: 'Payment made before scheduled date']
  REFINANCE [note: 'Payment related to loan refinancing']
  OTHER [note: 'Payment type not falling into standard categories']
}

Enum "consumer_lending"."payment_method" {
  ACH [note: 'Automated Clearing House electronic transfer']
  CHECK [note: 'Physical paper check']
  ONLINE [note: 'Payment made through online banking platform']
  CREDIT_CARD [note: 'Payment made using credit card']
  DEBIT_CARD [note: 'Payment made using debit card']
  WIRE_TRANSFER [note: 'Electronic wire transfer']
  CASH [note: 'Cash payment']
  MONEY_ORDER [note: 'Payment via money order']
  MOBILE_APP [note: 'Payment through mobile banking application']
  IN_PERSON [note: 'Payment made at physical branch or location']
  AUTOMATIC [note: 'Automatic recurring payment']
  OTHER [note: 'Payment method not falling into standard categories']
}

Enum "consumer_lending"."loan_payment_status" {
  PENDING [note: 'Payment is being processed']
  COMPLETED [note: 'Payment successfully processed']
  RETURNED [note: 'Payment was returned or rejected']
  CANCELED [note: 'Payment was canceled before processing']
  REVERSED [note: 'Payment was reversed after initial processing']
  FAILED [note: 'Payment attempt was unsuccessful']
  PARTIAL [note: 'Payment was only partially processed']
  SUSPENDED [note: 'Payment processing is temporarily on hold']
  OTHER [note: 'Payment status not falling into standard categories']
}

Table "consumer_lending"."loan_payments" {
  "consumer_lending_payment_id" SERIAL [pk, increment, note: "Unique identifier for payment"]
  "consumer_lending_loan_account_id" INTEGER [not null, ref: > consumer_lending.loan_accounts.loan_account_id, note: "Reference to loan account"]
  "payment_date" TIMESTAMPTZ [not null, note: "Date/time payment was received"]
  "payment_effective_date" DATE [not null, note: "Date payment is effective"]
  "payment_type" consumer_lending.payment_type [not null, note: "Type of payment"]
  "payment_method" consumer_lending.payment_method [not null, note: "Method used to make payment"]
  "payment_amount" NUMERIC(18,2) [not null, note: "Total payment amount"]
  "principal_amount" NUMERIC(18,2) [not null, note: "Amount applied to principal"]
  "interest_amount" NUMERIC(18,2) [not null, note: "Amount applied to interest"]
  "late_fee_amount" NUMERIC(10,2) [not null, default: 0, note: "Amount applied to late fees"]
  "other_fee_amount" NUMERIC(10,2) [not null, default: 0, note: "Amount applied to other fees"]
  "transaction_id" VARCHAR(50) [note: "External transaction identifier"]
  "confirmation_number" VARCHAR(50) [note: "Payment confirmation number"]
  "payment_status" consumer_lending.loan_payment_status [not null, note: "Current status of the payment"]
  "returned_reason" VARCHAR(100) [note: "Reason for payment return if applicable"]
  "returned_date" DATE [note: "Date payment was returned if applicable"]

  note: "Records payments made on loan accounts, including payment date, amount, method, and status."
}

Enum "consumer_lending"."loan_fee_type" {
  LATE_FEE [note: 'Fee charged for late payment']
  NSF_FEE [note: 'Non-sufficient funds fee']
  ORIGINATION_FEE [note: 'Fee charged for processing a new loan']
  PREPAYMENT_PENALTY [note: 'Fee for paying off loan early']
  UNDERWRITING_FEE [note: 'Fee for loan underwriting process']
  DOCUMENTATION_FEE [note: 'Fee for document preparation']
  APPLICATION_FEE [note: 'Fee charged for loan application processing']
  ANNUAL_FEE [note: 'Recurring annual fee for loan maintenance']
  WIRE_TRANSFER_FEE [note: 'Fee for wire transfer transactions']
  RETURNED_CHECK_FEE [note: 'Fee for returned or bounced checks']
  MODIFICATION_FEE [note: 'Fee for changing loan terms']
  EXTENSION_FEE [note: 'Fee for extending loan term']
  COLLECTION_FEE [note: 'Fee associated with collection efforts']
  OTHER [note: 'Fee type not falling into standard categories']
}

Enum "consumer_lending"."loan_fee_status" {
  PENDING [note: 'Fee has been assessed but not yet processed']
  CHARGED [note: 'Fee has been applied to the account']
  WAIVED [note: 'Fee has been forgiven and will not be collected']
  PAID [note: 'Fee has been successfully paid']
  PARTIALLY_PAID [note: 'Fee has been partially paid']
  REVERSED [note: 'Fee has been removed or canceled']
  DISPUTED [note: 'Fee is under review or challenge']
  WRITTEN_OFF [note: 'Fee has been removed from active collection']
  OTHER [note: 'Fee status not falling into standard categories']
}

Table "consumer_lending"."loan_fees" {
  "consumer_lending_fee_id" SERIAL [pk, increment, note: "Unique identifier for fee"]
  "consumer_lending_loan_account_id" INTEGER [not null, ref: > consumer_lending.loan_accounts.loan_account_id, note: "Reference to loan account"]
  "fee_type" consumer_lending.loan_fee_type [not null, note: "Type of fee charged"]
  "fee_date" DATE [not null, note: "Date fee was assessed"]
  "fee_amount" NUMERIC(10,2) [not null, note: "Fee amount"]
  "fee_status" consumer_lending.loan_fee_status [not null, note: "Current status of the fee"]
  "waived_date" DATE [note: "Date fee was waived if applicable"]
  "waived_by_id" INTEGER [ref: > enterprise.associates.enterprise_associate_id, note: "User who waived the fee"]
  "waiver_reason" VARCHAR(255) [note: "Reason fee was waived"]
  "paid_date" DATE [note: "Date fee was paid"]
  "consumer_lending_payment_id" INTEGER [ref: > consumer_lending.loan_payments.consumer_lending_payment_id, note: "Reference to loan_payments if paid"]

  note: "Tracks fees charged to loan accounts, including fee type, amount, status, and payment details."
}

Enum "consumer_lending"."collateral_type" {
  VEHICLE [note: 'Automobile or other motor vehicle used as collateral']
  REAL_ESTATE [note: 'Residential or commercial property']
  DEPOSIT_ACCOUNT [note: 'Savings or other deposit account']
  INVESTMENT_SECURITIES [note: 'Stocks, bonds, or other investment securities']
  EQUIPMENT [note: 'Business or personal equipment']
  BOAT [note: 'Watercraft used as collateral']
  RECREATIONAL_VEHICLE [note: 'RV, camper, or similar vehicle']
  MACHINERY [note: 'Industrial or agricultural machinery']
  INVENTORY [note: 'Business inventory or stock']
  ACCOUNTS_RECEIVABLE [note: 'Outstanding invoices or expected payments']
  LIFE_INSURANCE_POLICY [note: 'Cash value of a life insurance policy']
  JEWELRY [note: 'Precious metals or valuable jewelry']
  FARM_ASSETS [note: 'Agricultural land or farm-related assets']
  OTHER [note: 'Collateral type not falling into standard categories']
}

Table "consumer_lending"."loan_collateral" {
  "consumer_lending_collateral_id" SERIAL [pk, increment, note: "Unique identifier for collateral"]
  "loan_account_id" INTEGER [not null, ref: > consumer_lending.loan_accounts.loan_account_id, note: "Reference to loan account"]
  "collateral_type" consumer_lending.collateral_type [not null, note: "Type of collateral"]
  "description" VARCHAR(255) [not null, note: "Description of collateral"]
  "value" NUMERIC(18,2) [not null, note: "Estimated value of collateral"]
  "valuation_date" DATE [not null, note: "Date of valuation"]
  "vehicle_id" INTEGER [ref: > consumer_lending.vehicles.vehicle_id, note: "Reference to vehicles table if applicable"]
  "property_address_id" INTEGER [ref: > enterprise.addresses.enterprise_address_id, note: "Reference to enterprise.addresses if property"]
  "deposit_account_id" INTEGER [ref: > enterprise.accounts.enterprise_account_id, note: "Reference to enterprise.accounts if deposit"]
  "lien_position" INTEGER [note: "Priority of lien"]
  "lien_recording_date" DATE [note: "Date lien was recorded"]
  "lien_recording_number" VARCHAR(50) [note: "Lien recording reference number"]
  "insurance_required" BOOLEAN [not null, note: "Whether insurance is required"]
  "insurance_expiration_date" DATE [note: "Expiration date of insurance policy"]

  note: "Stores information about collateral used to secure loans, including type, value, and insurance requirements."
}

Enum "consumer_lending"."insurance_type" {
  AUTO [note: 'Insurance specifically for vehicle loans']
  HAZARD [note: 'Property damage insurance']
  CREDIT_LIFE [note: 'Insurance that pays off loan if borrower dies']
  DISABILITY [note: 'Insurance covering loan payments if borrower becomes disabled']
  COMPREHENSIVE [note: 'All-inclusive insurance coverage']
  COLLISION [note: 'Insurance covering damage from vehicle collisions']
  PROPERTY [note: 'Insurance for real estate or physical property']
  TITLE [note: 'Insurance protecting against property ownership disputes']
  LIFE [note: 'Life insurance policy']
  UNEMPLOYMENT [note: 'Insurance covering loan payments during job loss']
  MARINE [note: 'Insurance for watercraft or marine-related loans']
  EQUIPMENT [note: 'Insurance for machinery or equipment loans']
  OTHER [note: 'Insurance type not falling into standard categories']
}

Enum "consumer_lending"."premium_frequency" {
  ANNUAL [note: 'Premium paid once per year']
  MONTHLY [note: 'Premium paid monthly']
  QUARTERLY [note: 'Premium paid every three months']
  SEMI_ANNUAL [note: 'Premium paid twice per year']
  ONE_TIME [note: 'Single premium payment']
  OTHER [note: 'Premium frequency not falling into standard categories']
}

Enum "consumer_lending"."insurance_status" {
  ACTIVE [note: 'Insurance policy is currently in force']
  LAPSED [note: 'Policy has expired due to non-payment']
  CANCELED [note: 'Policy has been intentionally terminated']
  PENDING [note: 'Policy is in process of being activated']
  SUSPENDED [note: 'Policy temporarily not in effect']
  EXPIRED [note: 'Policy has reached its end date']
  IN_GRACE_PERIOD [note: 'Policy is in a grace period']
  OTHER [note: 'Insurance status not falling into standard categories']
}

Table "consumer_lending"."loan_insurance" {
  "consumer_lending_insurance_id" SERIAL [pk, increment, note: "Unique identifier for insurance record"]
  "consumer_lending_loan_account_id" INTEGER [not null, ref: > consumer_lending.loan_accounts.loan_account_id, note: "Reference to loan account"]
  "consumer_lending_collateral_id" INTEGER [ref: > consumer_lending.loan_collateral.consumer_lending_collateral_id, note: "Reference to loan_collateral if associated with specific collateral"]
  "insurance_type" consumer_lending.insurance_type [not null, note: "Type of insurance"]
  "carrier_name" VARCHAR(100) [not null, note: "Name of insurance company"]
  "policy_number" VARCHAR(50) [not null, note: "Insurance policy number"]
  "coverage_amount" NUMERIC(18,2) [not null, note: "Amount of coverage"]
  "premium_amount" NUMERIC(18,2) [not null, note: "Cost of insurance premium"]
  "premium_frequency" consumer_lending.premium_frequency [not null, note: "Frequency of premium payments"]
  "effective_date" DATE [not null, note: "Policy start date"]
  "expiration_date" DATE [not null, note: "Policy end date"]
  "beneficiary" VARCHAR(100) [note: "Named beneficiary if applicable"]
  "status" consumer_lending.insurance_status [not null, note: "Current status of the insurance policy"]

  note: "Stores information about insurance policies associated with loan accounts or collateral."
}

Enum "consumer_lending"."document_type" {
  APPLICATION [note: 'Initial loan application form']
  CONTRACT [note: 'Signed loan agreement or contract']
  STATEMENT [note: 'Account statement or billing document']
  INCOME_VERIFICATION [note: 'Documents proving income (W2, pay stubs)']
  TAX_RETURN [note: 'Personal or business tax return']
  BANK_STATEMENT [note: 'Bank account statements']
  IDENTIFICATION [note: 'Government-issued ID or passport']
  PROOF_OF_ADDRESS [note: 'Utility bill or lease agreement']
  CREDIT_REPORT [note: 'Credit report document']
  COLLATERAL_DOCUMENT [note: 'Documents related to collateral']
  INSURANCE_DOCUMENT [note: 'Insurance policy or coverage documents']
  PROMISSORY_NOTE [note: 'Legal promise to repay the loan']
  CLOSING_DISCLOSURE [note: 'Loan closing and terms disclosure']
  RECEIPT [note: 'Payment or transaction receipt']
  COMMUNICATION [note: 'Correspondence related to the loan']
  OTHER [note: 'Document type not falling into standard categories']
}

Enum "consumer_lending"."document_status" {
  PENDING [note: 'Document awaiting initial review']
  REVIEWED [note: 'Document has been examined']
  ACCEPTED [note: 'Document has been approved and accepted']
  REJECTED [note: 'Document was not accepted']
  REQUIRES_REVISION [note: 'Document needs updates or corrections']
  IN_REVIEW [note: 'Document is currently being reviewed']
  ARCHIVED [note: 'Document has been filed and stored']
  EXPIRED [note: 'Document is no longer valid']
  OTHER [note: 'Document status not falling into standard categories']
}

Table "consumer_lending"."loan_documents" {
  "consumer_lending_document_id" SERIAL [pk, increment, note: "Unique identifier for document"]
  "consumer_lending_application_id" INTEGER [ref: > consumer_lending.loan_applications.consumer_lending_application_id, note: "Reference to loan application if applicable"]
  "loan_account_id" INTEGER [ref: > consumer_lending.loan_accounts.loan_account_id, note: "Reference to loan account if applicable"]
  "document_type" consumer_lending.document_type [not null, note: "Type of document"]
  "document_name" VARCHAR(255) [not null, note: "File name or title"]
  "document_path" VARCHAR(500) [not null, note: "Path to stored document"]
  "upload_date" TIMESTAMPTZ [not null, note: "When document was created/uploaded"]
  "status" consumer_lending.document_status [not null, note: "Current status of the document"]
  "review_date" TIMESTAMPTZ [note: "When document was reviewed"]
  "reviewer_id" INTEGER [note: "User who reviewed document"]
  "expiration_date" DATE [note: "Document expiration date if applicable"]
  "notes" TEXT [note: "Additional document notes"]

  note: "Tracks documents related to loan applications and accounts, including application forms, contracts, and statements."
}

Enum "consumer_lending"."communication_type" {
  EMAIL [note: 'Electronic mail communication']
  LETTER [note: 'Physical mail correspondence']
  PHONE_CALL [note: 'Telephone conversation']
  TEXT_MESSAGE [note: 'SMS or instant message']
  VOICEMAIL [note: 'Voice message left']
  CHAT [note: 'Online chat or messaging platform']
  VIDEO_CALL [note: 'Video conference or call']
  FAX [note: 'Facsimile transmission']
  IN_PERSON [note: 'Face-to-face communication']
  OTHER [note: 'Communication type not falling into standard categories']
}

Enum "consumer_lending"."communication_direction" {
  INBOUND [note: 'Communication received by the organization']
  OUTBOUND [note: 'Communication sent by the organization']
  INTERNAL [note: 'Communication within the organization']
  OTHER [note: 'Communication direction not falling into standard categories']
}

Enum "consumer_lending"."communication_status" {
  SENT [note: 'Communication has been sent']
  DELIVERED [note: 'Communication successfully reached recipient']
  FAILED [note: 'Communication attempt was unsuccessful']
  RECEIVED [note: 'Communication has been received and processed']
  PENDING [note: 'Communication is in process of being sent']
  READ [note: 'Communication has been read by recipient']
  PARTIALLY_DELIVERED [note: 'Communication partially reached recipient']
  OTHER [note: 'Communication status not falling into standard categories']
}

Enum "consumer_lending"."communication_context" {
  PAYMENT_REMINDER [note: 'Communication related to upcoming or missed payment']
  STATEMENT [note: 'Statement-related communication']
  NOTICE [note: 'Official notice or communication']
  APPLICATION_STATUS [note: 'Update on loan application status']
  DOCUMENT_REQUEST [note: 'Request for additional documents']
  ACCOUNT_REVIEW [note: 'Communication about account review']
  COLLECTION [note: 'Communication related to debt collection']
  VERIFICATION [note: 'Request for information verification']
  MARKETING [note: 'Promotional or marketing communication']
  CUSTOMER_SERVICE [note: 'General customer service inquiry']
  OTHER [note: 'Communication context not falling into standard categories']
}

Table "consumer_lending"."loan_communications" {
  "consumer_lending_communication_id" SERIAL [pk, increment, note: "Unique identifier for communication"]
  "consumer_lending_application_id" INTEGER [ref: > consumer_lending.loan_applications.consumer_lending_application_id, note: "Reference to loan application if applicable"]
  "loan_account_id" INTEGER [ref: > consumer_lending.loan_accounts.loan_account_id, note: "Reference to loan account if applicable"]
  "communication_date" TIMESTAMPTZ [not null, note: "Date/time of communication"]
  "communication_type" consumer_lending.communication_type [not null, note: "Method of communication"]
  "direction" consumer_lending.communication_direction [not null, note: "Direction of communication"]
  "subject" VARCHAR(255) [note: "Communication subject"]
  "content" TEXT [note: "Communication content or transcript"]
  "sender" VARCHAR(100) [note: "Person or system that sent communication"]
  "recipient" VARCHAR(100) [note: "Person who received communication"]
  "template_id" VARCHAR(50) [note: "Reference to template if applicable"]
  "status" consumer_lending.communication_status [not null, note: "Current status of communication"]
  "document_path" VARCHAR(500) [note: "Path to stored communication document"]
  "related_to" consumer_lending.communication_context [note: "Context or purpose of communication"]

  note: "Logs various communications related to loan applications and accounts, such as emails, letters, and phone calls."
}

Enum "consumer_lending"."statement_delivery_method" {
  EMAIL [note: 'Statement sent via electronic mail']
  MAIL [note: 'Physical statement sent through postal service']
  PORTAL [note: 'Statement made available through online customer portal']
  SMS [note: 'Statement link sent via text message']
  MOBILE_APP [note: 'Statement delivered through mobile banking application']
  FAX [note: 'Statement sent via facsimile']
  PRINT_AT_BRANCH [note: 'Statement printed and available at physical branch']
  OTHER [note: 'Delivery method not falling into standard categories']
}

Table "consumer_lending"."loan_statements" {
  "consumer_lending_statement_id" SERIAL [pk, increment, note: "Unique identifier for statement"]
  "loan_account_id" INTEGER [not null, ref: > consumer_lending.loan_accounts.loan_account_id, note: "Reference to loan account"]
  "statement_date" DATE [not null, note: "Date statement was generated"]
  "statement_period_start" DATE [not null, note: "Start date of statement period"]
  "statement_period_end" DATE [not null, note: "End date of statement period"]
  "opening_balance" NUMERIC(18,2) [not null, note: "Balance at start of period"]
  "closing_balance" NUMERIC(18,2) [not null, note: "Balance at end of period"]
  "total_payments" NUMERIC(18,2) [not null, note: "Sum of payments in period"]
  "principal_paid" NUMERIC(18,2) [not null, note: "Principal paid in period"]
  "interest_paid" NUMERIC(18,2) [not null, note: "Interest paid in period"]
  "fees_charged" NUMERIC(18,2) [not null, note: "Fees charged in period"]
  "fees_paid" NUMERIC(18,2) [not null, note: "Fees paid in period"]
  "amount_due" NUMERIC(18,2) [not null, note: "Amount due for next payment"]
  "due_date" DATE [not null, note: "Next payment due date"]
  "document_path" VARCHAR(500) [note: "Path to stored statement document"]
  "sent_date" DATE [note: "Date statement was sent to customer"]
  "delivery_method" consumer_lending.statement_delivery_method [note: "Method of statement delivery"]

  note: "Stores periodic loan statements, providing a summary of account activity, balances, and payments."
}

Enum "consumer_lending"."collection_status" {
  ACTIVE [note: 'Account is currently in active collection process']
  RESOLVED [note: 'Collection process has been successfully completed']
  CHARGED_OFF [note: 'Account has been written off as a loss']
  NEGOTIATING [note: 'In negotiation for repayment or settlement']
  SUSPENDED [note: 'Collection efforts temporarily paused']
  LEGAL_PROCEEDINGS [note: 'Account is in legal collection process']
  PAYMENT_PLAN [note: 'Account is on a structured payment plan']
  OTHER [note: 'Collection status not falling into standard categories']
}

Enum "consumer_lending"."collection_priority" {
  HIGH [note: 'Urgent collection account requiring immediate attention']
  MEDIUM [note: 'Standard priority collection account']
  LOW [note: 'Lower risk or lower balance collection account']
  CRITICAL [note: 'Highest priority account with significant risk']
  MINIMAL [note: 'Lowest priority account with minimal collection risk']
  OTHER [note: 'Collection priority not falling into standard categories']
}

Enum "consumer_lending"."collection_resolution_type" {
  PAID_IN_FULL [note: 'Account fully paid off']
  SETTLEMENT [note: 'Partial payment accepted to resolve debt']
  MODIFICATION [note: 'Loan terms modified to facilitate repayment']
  CHARGE_OFF [note: 'Debt written off as uncollectible']
  BANKRUPTCY [note: 'Resolution through bankruptcy proceedings']
  DEBT_CONSOLIDATION [note: 'Debt consolidated into new arrangement']
  PAYMENT_PLAN [note: 'Structured repayment plan established']
  LEGAL_JUDGMENT [note: 'Resolved through court judgment']
  FORGIVEN [note: 'Debt completely forgiven']
  OTHER [note: 'Resolution type not falling into standard categories']
}

Table "consumer_lending"."collection_accounts" {
  "consumer_lending_collection_id" SERIAL [pk, increment, note: "Unique identifier for collection record"]
  "loan_account_id" INTEGER [not null, ref: > consumer_lending.loan_accounts.loan_account_id, note: "Reference to loan account"]
  "assigned_date" DATE [not null, note: "Date account was placed in collections"]
  "status" consumer_lending.collection_status [not null, note: "Current status of collection account"]
  "delinquency_reason" VARCHAR(100) [note: "Customer-provided reason for delinquency"]
  "delinquency_date" DATE [not null, note: "First date of delinquency"]
  "days_delinquent" INTEGER [not null, note: "Current days delinquent"]
  "amount_past_due" NUMERIC(18,2) [not null, note: "Total amount past due"]
  "assigned_to" VARCHAR(50) [note: "Collector assigned to account"]
  "priority" consumer_lending.collection_priority [note: "Priority level of the collection account"]
  "next_action_date" DATE [note: "Date of next scheduled action"]
  "last_action_date" DATE [note: "Date of most recent action taken"]
  "resolution_date" DATE [note: "Date collection was resolved"]
  "resolution_type" consumer_lending.collection_resolution_type [note: "Type of resolution for the collection account"]

  note: "Tracks accounts that have been placed in collections, including delinquency details and collection actions."
}

Enum "consumer_lending"."collection_action_type" {
  CALL [note: 'Telephone communication']
  LETTER [note: 'Written correspondence via mail']
  EMAIL [note: 'Electronic mail communication']
  FIELD_VISIT [note: 'In-person visit to collect or discuss debt']
  SMS [note: 'Text message communication']
  VOICEMAIL [note: 'Voice message left']
  LEGAL_NOTICE [note: 'Formal legal communication']
  ONLINE_MESSAGE [note: 'Communication through online portal']
  AUTOMATED_MESSAGE [note: 'Automated communication system']
  OTHER [note: 'Action type not falling into standard categories']
}

Enum "consumer_lending"."collection_action_result" {
  CONTACT_MADE [note: 'Successfully spoke with debtor']
  LEFT_MESSAGE [note: 'Message left with debtor or representative']
  NO_ANSWER [note: 'No response or contact made']
  WRONG_NUMBER [note: 'Contact information proved incorrect']
  PROMISE_TO_PAY [note: 'Debtor committed to making a payment']
  PARTIAL_PAYMENT [note: 'Partial payment received']
  DISPUTE_RAISED [note: 'Debtor disputed the debt']
  REFERRED_TO_LEGAL [note: 'Account referred to legal department']
  UNABLE_TO_LOCATE [note: 'Unable to find or contact debtor']
  OTHER [note: 'Action result not falling into standard categories']
}

Enum "consumer_lending"."next_collection_action_type" {
  FOLLOW_UP_CALL [note: 'Scheduled follow-up telephone call']
  SEND_DEMAND_LETTER [note: 'Formal written demand for payment']
  ESCALATE_TO_LEGAL [note: 'Refer to legal department for further action']
  SKIP_TRACE [note: 'Attempt to locate debtor']
  NEGOTIATE_SETTLEMENT [note: 'Attempt to arrange debt settlement']
  PAYMENT_PLAN_DISCUSSION [note: 'Discuss potential payment arrangement']
  CREDIT_REPORTING [note: 'Report to credit bureaus']
  ASSET_INVESTIGATION [note: 'Investigate potential asset recovery']
  SUSPEND_COLLECTION [note: 'Temporarily halt collection efforts']
  OTHER [note: 'Next action type not falling into standard categories']
}

Table "consumer_lending"."collection_actions" {
  "consumer_lending_action_id" SERIAL [pk, increment, note: "Unique identifier for collection action"]
  "consumer_lending_collection_id" INTEGER [not null, ref: > consumer_lending.collection_accounts.consumer_lending_collection_id, note: "Reference to collection account"]
  "action_date" TIMESTAMPTZ [not null, note: "Date/time action was taken"]
  "action_type" consumer_lending.collection_action_type [not null, note: "Type of collection action"]
  "action_result" consumer_lending.collection_action_result [note: "Result of the collection action"]
  "action_by_id" INTEGER [ref: > enterprise.associates.enterprise_associate_id, not null, note: "User who performed action"]
  "notes" TEXT [note: "Details of action and outcome"]
  "next_action_type" consumer_lending.next_collection_action_type [note: "Type of next planned action"]
  "next_action_date" DATE [note: "Date for next planned action"]
  "promise_to_pay_amount" NUMERIC(18,2) [note: "Amount customer promised to pay"]
  "promise_to_pay_date" DATE [note: "Date customer promised to pay by"]

  note: "Logs specific actions taken to collect on delinquent loan accounts, such as calls, letters, and emails."
}

Enum "consumer_lending"."payment_arrangement_status" {
  ACTIVE [note: 'Payment arrangement is currently in effect']
  COMPLETED [note: 'All payments under the arrangement have been made']
  BROKEN [note: 'Arrangement has been violated or defaulted']
  SUSPENDED [note: 'Arrangement temporarily paused']
  PENDING [note: 'Arrangement is being processed but not yet active']
  NEGOTIATING [note: 'Arrangement terms are still being discussed']
  CANCELED [note: 'Arrangement was terminated before completion']
  OTHER [note: 'Status not falling into standard categories']
}

Enum "consumer_lending"."payment_frequency" {
  WEEKLY [note: 'Payments made once per week']
  BI_WEEKLY [note: 'Payments made every two weeks']
  MONTHLY [note: 'Payments made once per month']
  SEMI_MONTHLY [note: 'Payments made twice per month']
  QUARTERLY [note: 'Payments made every three months']
  SEMI_ANNUALLY [note: 'Payments made twice per year']
  ANNUALLY [note: 'Payments made once per year']
  CUSTOM [note: 'Non-standard payment frequency']
  OTHER [note: 'Frequency not falling into standard categories']
}

Table "consumer_lending"."payment_arrangements" {
  "consumer_lending_arrangement_id" SERIAL [pk, increment, note: "Unique identifier for payment arrangement"]
  "consumer_lending_collection_id" INTEGER [not null, ref: > consumer_lending.collection_accounts.consumer_lending_collection_id, note: "Reference to collection account"]
  "arrangement_date" DATE [not null, note: "Date arrangement was created"]
  "status" consumer_lending.payment_arrangement_status [not null, note: "Current status of payment arrangement"]
  "total_amount" NUMERIC(18,2) [not null, note: "Total amount to be paid"]
  "number_of_payments" INTEGER [not null, note: "Number of payments in arrangement"]
  "first_payment_date" DATE [not null, note: "Date first payment is due"]
  "payment_frequency" consumer_lending.payment_frequency [not null, note: "Frequency of payments"]
  "payment_amount" NUMERIC(18,2) [not null, note: "Amount of each payment"]
  "approved_by_id" INTEGER [ref: > enterprise.associates.enterprise_associate_id, note: "User who approved arrangement"]
  "notes" TEXT [note: "Additional arrangement notes"]

  note: "Records payment arrangements made with borrowers to resolve delinquent accounts."
}

Enum "consumer_lending"."loan_modification_type" {
  RATE_REDUCTION [note: 'Lowering of the interest rate']
  TERM_EXTENSION [note: 'Extending the loan repayment period']
  PRINCIPAL_REDUCTION [note: 'Reduction of the principal balance']
  INTEREST_ONLY_PERIOD [note: 'Temporary period of interest-only payments']
  CAPITALIZATION [note: 'Adding unpaid interest to principal balance']
  PAYMENT_DEFERRAL [note: 'Temporary suspension or postponement of payments']
  FORBEARANCE [note: 'Temporary reduction or suspension of payments']
  WORKOUT [note: 'Comprehensive restructuring of loan terms']
  REFINANCE [note: 'Replacing existing loan with new loan terms']
  OTHER [note: 'Modification type not falling into standard categories']
}

Enum "consumer_lending"."loan_modification_status" {
  PENDING [note: 'Modification request is under review']
  APPROVED [note: 'Modification has been approved']
  DENIED [note: 'Modification request was rejected']
  COMPLETED [note: 'Modification has been fully implemented']
  IN_PROGRESS [note: 'Modification is being processed']
  SUSPENDED [note: 'Modification process is temporarily on hold']
  PARTIAL [note: 'Partial modification approved']
  CANCELED [note: 'Modification request was withdrawn or canceled']
  OTHER [note: 'Status not falling into standard categories']
}

Table "consumer_lending"."loan_modifications" {
  "consumer_lending_modification_id" SERIAL [pk, increment, note: "Unique identifier for loan modification"]
  "loan_account_id" INTEGER [not null, ref: > consumer_lending.loan_accounts.loan_account_id, note: "Reference to loan account"]
  "modification_type" consumer_lending.loan_modification_type [not null, note: "Type of loan modification"]
  "request_date" DATE [not null, note: "Date modification was requested"]
  "approval_date" DATE [note: "Date modification was approved"]
  "effective_date" DATE [note: "Date modification takes effect"]
  "original_rate" NUMERIC(6,3) [note: "Interest rate before modification"]
  "new_rate" NUMERIC(6,3) [note: "Interest rate after modification"]
  "original_term_months" INTEGER [note: "Loan term before modification"]
  "new_term_months" INTEGER [note: "Loan term after modification"]
  "original_principal_balance" NUMERIC(18,2) [note: "Principal balance before modification"]
  "new_principal_balance" NUMERIC(18,2) [note: "Principal balance after modification"]
  "capitalized_amount" NUMERIC(18,2) [note: "Amount of interest or fees capitalized"]
  "status" consumer_lending.loan_modification_status [not null, note: "Current status of the modification"]
  "hardship_reason" VARCHAR(100) [note: "Customer's reason for hardship"]
  "approved_by_id" INTEGER [ref: > enterprise.associates.enterprise_associate_id, note: "User who approved modification"]
  "document_path" VARCHAR(500) [note: "Path to modification agreement document"]

  note: "Tracks modifications made to existing loan accounts, such as changes to interest rates, terms, or principal balance."
}

Enum "consumer_lending"."disclosure_type" {
  INITIAL_TIL [note: 'Initial Truth in Lending disclosure']
  LOAN_ESTIMATE [note: 'Estimated loan terms and costs']
  CLOSING_DISCLOSURE [note: 'Final loan terms and closing costs']
  CHANGE_IN_TERMS [note: 'Notification of changes to loan terms']
  PERIODIC_STATEMENT [note: 'Periodic statement of loan details']
  PAYMENT_NOTICE [note: 'Notice of upcoming payment or changes']
  INTEREST_RATE_ADJUSTMENT [note: 'Notification of interest rate change']
  PRE_QUALIFICATION [note: 'Initial loan pre-qualification disclosure']
  ADVERSE_ACTION [note: 'Disclosure related to loan denial']
  REFINANCE_NOTICE [note: 'Disclosure for refinancing terms']
  OTHER [note: 'Disclosure type not falling into standard categories']
}

Enum "consumer_lending"."disclosure_delivery_method" {
  EMAIL [note: 'Disclosure sent via electronic mail']
  MAIL [note: 'Physical document sent through postal service']
  IN_PERSON [note: 'Disclosed directly in a face-to-face meeting']
  ELECTRONIC [note: 'Electronic delivery through secure portal']
  SMS [note: 'Disclosure link sent via text message']
  FAX [note: 'Disclosure sent via facsimile']
  MOBILE_APP [note: 'Delivered through mobile banking application']
  BRANCH_PICKUP [note: 'Document available for pickup at branch']
  OTHER [note: 'Delivery method not falling into standard categories']
}

Table "consumer_lending"."reg_z_disclosures" {
  "consumer_lending_disclosure_id" SERIAL [pk, increment, note: "Unique identifier for disclosure"]
  "consumer_lending_application_id" INTEGER [not null, ref: > consumer_lending.loan_applications.consumer_lending_application_id, note: "Reference to loan application"]
  "loan_account_id" INTEGER [ref: > consumer_lending.loan_accounts.loan_account_id, note: "Reference to loan account if originated"]
  "disclosure_type" consumer_lending.disclosure_type [not null, note: "Type of Regulation Z disclosure"]
  "disclosure_date" TIMESTAMPTZ [not null, note: "Date disclosure was generated"]
  "sent_date" TIMESTAMPTZ [note: "Date disclosure was sent to applicant"]
  "delivery_method" consumer_lending.disclosure_delivery_method [not null, note: "Method of delivering the disclosure"]
  "annual_percentage_rate" NUMERIC(6,3) [not null, note: "APR disclosed"]
  "finance_charge" NUMERIC(18,2) [not null, note: "Total finance charge disclosed"]
  "amount_financed" NUMERIC(18,2) [not null, note: "Amount financed disclosed"]
  "total_of_payments" NUMERIC(18,2) [not null, note: "Total of payments disclosed"]
  "payment_schedule" TEXT [note: "Summary of payment schedule"]
  "security_interest" TEXT [note: "Description of security interest"]
  "late_payment_fee" NUMERIC(10,2) [note: "Late payment fee disclosed"]
  "prepayment_penalty" TEXT [note: "Description of prepayment penalty if any"]
  "document_path" VARCHAR(500) [note: "Path to stored disclosure document"]
  "received_by_customer" BOOLEAN [note: "Whether receipt confirmed"]
  "receipt_date" TIMESTAMPTZ [note: "Date receipt was confirmed"]
  "user_id" INTEGER [note: "User who generated disclosure"]
  "version" INTEGER [not null, note: "Version number if multiple disclosures of same type"]

  note: "Stores disclosures required by the Truth in Lending Act (Regulation Z), such as Loan Estimates and Closing Disclosures."
}

Enum "consumer_lending"."ecoa_reason_code" {
  "01" [note: 'Insufficient number of credit references']
  "02" [note: 'No recent credit references']
  "03" [note: 'Lack of recent credit performance']
  "04" [note: 'Serious delinquency']
  "05" [note: 'Serious derogatory credit history']
  "10" [note: 'Insufficient income for requested credit']
  "11" [note: 'Debt-to-income ratio too high']
  "12" [note: 'Unable to verify income']
  "20" [note: 'Low credit score']
  "21" [note: 'Lack of credit score']
  "22" [note: 'Insufficient credit score']
  "23" [note: 'Insufficient credit bureau file']
  "30" [note: 'Insufficient length of employment']
  "31" [note: 'Unemployed']
  "32" [note: 'Unable to verify employment']
  "40" [note: 'Insufficient collateral']
  "41" [note: 'Unacceptable collateral']
  "50" [note: 'Incomplete application']
  "51" [note: 'Unable to verify residence']
  "52" [note: 'Unable to verify other information']
  "60" [note: 'Bankruptcy']
  "61" [note: 'Foreclosure']
  "62" [note: 'Repossession']
  "63" [note: 'Collection activity']
  "64" [note: 'Legal judgment']
  "65" [note: 'Charge-off']
}

Enum "consumer_lending"."fcra_reason_code" {
  "A1" [note: 'Too many inquiries in the last 12 months']
  "A2" [note: 'Serious delinquency in past 12-24 months']
  "A3" [note: 'Serious delinquency in past 24+ months']
  "A4" [note: 'Bankruptcy filed in last 12-24 months']
  "A5" [note: 'Bankruptcy filed in past 24+ months']
  "A6" [note: 'Foreclosure in last 12-24 months']
  "A7" [note: 'Foreclosure in past 24+ months']
  "A8" [note: 'Collection accounts']
  "A9" [note: 'Charge-offs']
  "B1" [note: 'Length of credit history too short']
  "B2" [note: 'No recent credit card activity']
  "B3" [note: 'No recent installment loan activity']
  "B4" [note: 'No recent revolving credit activity']
  "C1" [note: 'High credit card utilization']
  "C2" [note: 'High total debt balance']
  "C3" [note: 'High ratio of balance to credit limit']
  "D1" [note: 'Public record or collection indicates serious credit problems']
  "D2" [note: 'Wage garnishment']
  "D3" [note: 'Tax lien']
}

Table "consumer_lending"."adverse_action_details" {
  "consumer_lending_adverse_action_id" SERIAL [pk, increment, note: "Unique identifier for adverse action record"]
  "consumer_lending_notice_id" INTEGER [not null, ref: > consumer_lending.adverse_action_notices.consumer_lending_notice_id, note: "Reference to adverse_action_notices"]
  "ecoa_reason_code" consumer_lending.ecoa_reason_code [not null, note: "Standard ECOA reason code"]
  "fcra_reason_code" consumer_lending.fcra_reason_code [note: "Standard FCRA reason code if applicable"]
  "reason_description" VARCHAR(255) [not null, note: "Description of reason for adverse action"]
  "credit_score_disclosed" INTEGER [note: "Credit score disclosed to applicant"]
  "credit_score_range_min" INTEGER [note: "Minimum score in range"]
  "credit_score_range_max" INTEGER [note: "Maximum score in range"]
  "credit_score_factors" TEXT [note: "Key factors affecting score"]
  "credit_bureau_name" consumer_lending.credit_bureau [note: "Credit bureau providing the report"]
  "generated_date" TIMESTAMPTZ [not null, note: "Date details were generated"]
  "user_id" INTEGER [ref: > enterprise.associates.enterprise_associate_id, note: "User who generated adverse action"]
  "sequence" INTEGER [not null, note: "Order of importance for reason"]

  note: "Provides detailed information about adverse action taken on loan applications, including reasons and credit information."
}

Enum "consumer_lending"."information_method" {
  "SELF_REPORTED" [note: 'Information provided by the applicant']
  "OBSERVED" [note: 'Information determined by observation']
  "NOT_PROVIDED" [note: 'Information was not provided']
}

Enum "consumer_lending"."action_taken" {
  "APPROVED" [note: 'Loan application was approved']
  "DENIED" [note: 'Loan application was denied']
  "WITHDRAWN" [note: 'Applicant withdrew the application']
  "INCOMPLETE" [note: 'Application is incomplete']
}

Table "consumer_lending"."ecoa_monitoring" {
  "consumer_lending_monitoring_id" SERIAL [pk, increment, note: "Unique identifier for monitoring record"]
  "consumer_lending_application_id" INTEGER [not null, ref: > consumer_lending.loan_applications.consumer_lending_application_id, note: "Reference to loan application"]
  "consumer_lending_applicant_id" INTEGER [not null, ref: > consumer_lending.applicants.consumer_lending_applicant_id, note: "Reference to applicant"]
  "ethnicity" VARCHAR(50) [note: "Self-reported ethnicity"]
  "race" VARCHAR(50) [note: "Self-reported race"]
  "sex" VARCHAR(10) [note: "Self-reported sex"]
  "age" INTEGER [note: "Applicant age"]
  "marital_status" enterprise.marital_status [note: "Marital status"]
  "information_method" consumer_lending.information_method [not null, note: "Method of obtaining information"]
  "income_monitored" NUMERIC(18,2) [note: "Income used for decision"]
  "action_taken" consumer_lending.action_taken [not null, note: "Action taken on the loan application"]
  "action_date" DATE [not null, note: "Date of action"]
  "submission_date" DATE [not null, note: "Date monitoring info submitted"]
  "submitted_by_id" INTEGER [ref: > enterprise.associates.enterprise_associate_id, note: "User who submitted monitoring info"]

  note: "Tracks information related to the Equal Credit Opportunity Act (ECOA) for monitoring and compliance purposes."
}

Enum "consumer_lending"."analysis_type" {
  "PRICING" [note: 'Analysis of pricing disparities']
  "UNDERWRITING" [note: 'Analysis of underwriting decision processes']
  "MARKETING" [note: 'Analysis of marketing practices']
  "PRODUCT_DESIGN" [note: 'Analysis of loan product design']
  "PORTFOLIO_REVIEW" [note: 'Comprehensive portfolio-level analysis']
  "GEOGRAPHIC" [note: 'Analysis of geographic lending patterns']
}

Enum "consumer_lending"."protected_class" {
  "RACE" [note: 'Racial classification']
  "ETHNICITY" [note: 'Ethnic background']
  "SEX" [note: 'Gender classification']
  "AGE" [note: 'Age group']
  "NATIONAL_ORIGIN" [note: 'National origin']
  "DISABILITY_STATUS" [note: 'Disability classification']
  "MARITAL_STATUS" [note: 'Marital status']
  "RELIGION" [note: 'Religious affiliation']
  "VETERAN_STATUS" [note: 'Military veteran status']
}

Enum "consumer_lending"."outcome_variable" {
  "APPROVAL_RATE" [note: 'Loan application approval percentage']
  "APR" [note: 'Annual Percentage Rate']
  "FEES" [note: 'Loan-related fees']
  "LOAN_AMOUNT" [note: 'Approved loan amount']
  "INTEREST_RATE" [note: 'Interest rate offered']
  "LOAN_TERMS" [note: 'Loan repayment terms']
  "COLLATERAL_REQUIREMENTS" [note: 'Collateral conditions']
}

Enum "consumer_lending"."statistical_test" {
  "T_TEST" [note: 'Statistical test comparing means']
  "CHI_SQUARE" [note: 'Test of independence between categorical variables']
  "REGRESSION" [note: 'Regression analysis']
  "ANOVA" [note: 'Analysis of variance']
  "LOGISTIC_REGRESSION" [note: 'Regression for binary outcome']
  "WILCOXON" [note: 'Non-parametric test comparing two groups']
}

Table "consumer_lending"."fairlending_analysis" {
  "consumer_lending_analysis_id" SERIAL [pk, increment, note: "Unique identifier for analysis record"]
  "analysis_date" DATE [not null, note: "Date analysis was performed"]
  "analysis_type" consumer_lending.analysis_type [not null, note: "Type of fair lending analysis"]
  "consumer_lending_loan_product_id" INTEGER [not null, ref: > consumer_lending.loan_products.consumer_lending_loan_product_id, note: "Loan product analyzed if specific product"]
  "time_period_start" DATE [not null, note: "Start of analysis period"]
  "time_period_end" DATE [not null, note: "End of analysis period"]
  "protected_class" consumer_lending.protected_class [not null, note: "Protected class being analyzed"]
  "control_group" VARCHAR(50) [not null, note: "Reference group for comparison"]
  "test_group" VARCHAR(50) [not null, note: "Group being tested for disparities"]
  "sample_size_control" INTEGER [not null, note: "Number in control group"]
  "sample_size_test" INTEGER [not null, note: "Number in test group"]
  "outcome_variable" consumer_lending.outcome_variable [not null, note: "Outcome being measured"]
  "statistical_test" consumer_lending.statistical_test [note: "Statistical method used"]
  "disparity_ratio" NUMERIC(8,3) [note: "Ratio of outcomes between groups"]
  "p_value" NUMERIC(8,6) [note: "Statistical significance level"]
  "statistically_significant" BOOLEAN [note: "Whether result is statistically significant"]
  "controls_applied" TEXT [note: "Variables controlled for in analysis"]
  "findings" TEXT [note: "Summary of findings"]
  "analyst" INTEGER [ref: > enterprise.associates.enterprise_associate_id, note: "Person who performed analysis"]
  "reviewer" INTEGER [ref: > enterprise.associates.enterprise_associate_id, note: "Person who reviewed analysis"]
  "action_recommended" TEXT [note: "Recommended actions based on findings"]
  "report_path" VARCHAR(500) [note: "Path to full analysis report"]

  note: "Records fair lending analysis conducted to identify and address potential disparities in lending practices."
}

Enum "consumer_lending"."reg_b_notice_type" {
  "INCOMPLETENESS" [note: 'Notice of incomplete application']
  "COUNTEROFFER" [note: 'Proposed alternative loan terms']
  "ACTION_TAKEN" [note: 'Notice of final action on loan application']
  "PRE_ADVERSE_ACTION" [note: 'Preliminary notice before adverse action']
  "ADVERSE_ACTION" [note: 'Formal notice of application denial']
  "REQUEST_FOR_INFORMATION" [note: 'Request for additional applicant information']
  "CONDITIONAL_APPROVAL" [note: 'Approval with specific conditions']
}

Table "consumer_lending"."reg_b_notices" {
  "consumer_lending_notice_id" SERIAL [pk, increment, note: "Unique identifier for Reg B notice"]
  "consumer_lending_application_id" INTEGER [not null, ref: > consumer_lending.loan_applications.consumer_lending_application_id, note: "Reference to loan application"]
  "notice_type" consumer_lending.reg_b_notice_type [not null, note: "Type of Regulation B notice"]
  "generated_date" TIMESTAMPTZ [not null, note: "Date notice was generated"]
  "sent_date" TIMESTAMPTZ [not null, note: "Date notice was sent"]
  "delivery_method" consumer_lending.delivery_method [not null, note: "Method of delivering the notice"]
  "incomplete_items" TEXT [note: "Items needed if incompleteness notice"]
  "deadline_date" DATE [note: "Deadline for response if applicable"]
  "counteroffer_terms" TEXT [note: "Terms of counteroffer if applicable"]
  "appraisal_notice_included" BOOLEAN [not null, default: false, note: "Whether appraisal notice included"]
  "document_path" VARCHAR(500) [note: "Path to stored notice document"]
  "user_id" INTEGER [ref: > enterprise.associates.enterprise_associate_id, note: "User who generated notice"]

  note: "Tracks notices and disclosures required by Regulation B (Equal Credit Opportunity Act), such as notices of incomplete applications or adverse action."
}

Table "consumer_lending"."appraisal_disclosures" {
  "consumer_lending_disclosure_id" SERIAL [pk, increment, note: "Unique identifier for appraisal disclosure"]
  "consumer_lending_application_id" INTEGER [not null, ref: > consumer_lending.loan_applications.consumer_lending_application_id, note: "Reference to loan application"]
  "property_address_id" INTEGER [not null, ref: > enterprise.addresses.enterprise_address_id, note: "Reference to enterprise.addresses"]
  "disclosure_type" VARCHAR(50) [not null, note: "Initial Disclosure, Final Disclosure"]
  "disclosure_date" TIMESTAMPTZ [not null, note: "Date disclosure was generated"]
  "sent_date" TIMESTAMPTZ [not null, note: "Date disclosure was sent"]
  "delivery_method" VARCHAR(30) [not null, note: "Email, Mail, Electronic"]
  "appraisal_type" VARCHAR(50) [note: "Full Appraisal, AVM, BPO, etc."]
  "appraisal_ordered_date" DATE [note: "Date appraisal was ordered"]
  "appraisal_received_date" DATE [note: "Date appraisal was received"]
  "appraisal_provided_date" DATE [note: "Date appraisal was provided to applicant"]
  "appraisal_value" NUMERIC(18,2) [note: "Appraised value if known"]
  "document_path" VARCHAR(500) [note: "Path to stored disclosure document"]
  "appraisal_waiver" BOOLEAN [not null, default: false, note: "Whether appraisal was waived"]
  "waiver_reason" VARCHAR(100) [note: "Reason for waiver if applicable"]
  "user_id" INTEGER [ref: > enterprise.associates.enterprise_associate_id, note: "User who generated disclosure"]

  note: "Manages appraisal disclosures provided to loan applicants, including the type of appraisal and its value."
}

Table "consumer_lending"."military_lending_checks" {
  "consumer_lending_check_id" SERIAL [pk, increment, note: "Unique identifier for MLA check"]
  "consumer_lending_application_id" INTEGER [not null, ref: > consumer_lending.loan_applications.consumer_lending_application_id, note: "Reference to loan application"]
  "consumer_lending_applicant_id" INTEGER [not null, ref: > consumer_lending.applicants.consumer_lending_applicant_id, note: "Reference to applicant"]
  "check_date" TIMESTAMPTZ [not null, note: "Date MLA status was checked"]
  "covered_borrower" BOOLEAN [not null, note: "Whether applicant is a covered borrower"]
  "verification_method" VARCHAR(50) [not null, note: "MLA Database, Credit Report Flag"]
  "military_status" VARCHAR(30) [note: "Active Duty, Dependent, Not Military"]
  "certificate_date" DATE [note: "Date on covered borrower certificate"]
  "document_path" VARCHAR(500) [note: "Path to stored verification document"]
  "mapr_calculated" NUMERIC(6,3) [note: "Military Annual Percentage Rate if calculated"]
  "mapr_disclosure_provided" BOOLEAN [note: "Whether MAPR disclosure was provided"]
  "user_id" INTEGER [ref: > enterprise.associates.enterprise_associate_id, note: "User who performed check"]

  note: "Tracks compliance with the Military Lending Act (MLA), including verification of military status and MAPR calculations."
}

Table "consumer_lending"."high_cost_mortgage_tests" {
  "consumer_lending_test_id" SERIAL [pk, increment, note: "Unique identifier for HOEPA test"]
  "consumer_lending_application_id" INTEGER [not null, ref: > consumer_lending.loan_applications.consumer_lending_application_id, note: "Reference to loan application"]
  "test_date" DATE [not null, note: "Date test was performed"]
  "test_type" VARCHAR(30) [not null, note: "APR Test, Points and Fees Test"]
  "loan_amount" NUMERIC(18,2) [not null, note: "Amount used for test"]
  "apr" NUMERIC(6,3) [not null, note: "APR used for test"]
  "points_and_fees" NUMERIC(18,2) [not null, note: "Total points and fees"]
  "points_and_fees_percentage" NUMERIC(6,3) [not null, note: "Points and fees as percentage of loan"]
  "points_and_fees_threshold" NUMERIC(18,2) [not null, note: "Threshold for points and fees test"]
  "apr_threshold" NUMERIC(6,3) [not null, note: "Threshold for APR test"]
  "apor" NUMERIC(6,3) [note: "Average Prime Offer Rate used"]
  "apor_date" DATE [note: "Date of APOR used"]
  "high_cost_mortgage" BOOLEAN [not null, note: "Whether loan is high-cost"]
  "additional_disclosures_required" BOOLEAN [not null, note: "Whether additional disclosures required"]
  "user_id" INTEGER [ref: > enterprise.associates.enterprise_associate_id, note: "User who performed test"]
  "notes" TEXT [note: "Additional test notes"]

  note: "Records the results of high-cost mortgage tests performed under the Home Ownership and Equity Protection Act (HOEPA)."
}

Table "consumer_lending"."compliance_exceptions" {
  "consumer_lending_exception_id" SERIAL [pk, increment, note: "Unique identifier for exception"]
  "consumer_lending_application_id" INTEGER [ref: > consumer_lending.loan_applications.consumer_lending_application_id, note: "Reference to loan application if applicable"]
  "loan_account_id" INTEGER [ref: > consumer_lending.loan_accounts.loan_account_id, note: "Reference to loan account if applicable"]
  "exception_date" TIMESTAMPTZ [not null, note: "Date exception was identified"]
  "exception_type" VARCHAR(50) [not null, note: "Documentation, Disclosure, Timing, etc."]
  "regulation" VARCHAR(50) [not null, note: "Reg Z, Reg B, FCRA, etc."]
  "severity" VARCHAR(20) [not null, note: "High, Medium, Low"]
  "description" TEXT [not null, note: "Detailed description of exception"]
  "identified_by_id" INTEGER [ref: > enterprise.associates.enterprise_associate_id, not null, note: "Person that identified exception"]
  "status" VARCHAR(20) [not null, note: "Open, In Remediation, Closed"]
  "remediation_plan" TEXT [note: "Plan to address exception"]
  "remediation_date" DATE [note: "Date remediation completed"]
  "remediated_by_id" INTEGER [ref: > enterprise.associates.enterprise_associate_id, note: "Person who remediated exception"]
  "root_cause" TEXT [note: "Identified root cause"]
  "preventive_action" TEXT [note: "Action to prevent recurrence"]
  "notes" TEXT [note: "Additional exception notes"]

  note: "Tracks compliance exceptions and issues encountered during the lending process, including remediation efforts."
}

TableGroup "Loan Applications" {
  "consumer_lending"."loan_applications"
  "consumer_lending"."application_applicants"
  "consumer_lending"."applicants"
  "consumer_lending"."applicant_employments"
  "consumer_lending"."applicant_incomes"
  "consumer_lending"."applicant_assets"
  "consumer_lending"."applicant_liabilities"
}

TableGroup "Loan Products & Pricing" {
  "consumer_lending"."loan_products"
  "consumer_lending"."product_eligibility_criteria"
  "consumer_lending"."risk_based_pricing_tiers"
}

TableGroup "Credit & Decisioning" {
  "consumer_lending"."credit_reports"
  "consumer_lending"."credit_report_tradelines"
  "consumer_lending"."credit_inquiries"
  "consumer_lending"."public_records"
  "consumer_lending"."decision_models"
  "consumer_lending"."application_decisions"
  "consumer_lending"."decision_reasons"
  "consumer_lending"."adverse_action_notices"
}

TableGroup "Auto Loans" {
  "consumer_lending"."vehicles"
}

TableGroup "Origination & Servicing" {
  "consumer_lending"."loan_accounts"
  "consumer_lending"."payment_schedules"
  "consumer_lending"."disbursements"
  "consumer_lending"."loan_payments"
  "consumer_lending"."loan_fees"
  "consumer_lending"."loan_collateral"
  "consumer_lending"."loan_insurance"
}

TableGroup "Documents & Communications" {
  "consumer_lending"."loan_documents"
  "consumer_lending"."loan_communications"
  "consumer_lending"."loan_statements"
}

TableGroup "Collections & Loss Mitigation" {
  "consumer_lending"."collection_accounts"
  "consumer_lending"."collection_actions"
  "consumer_lending"."payment_arrangements"
  "consumer_lending"."loan_modifications"
}

TableGroup "Consumer Lending Regulatory" {
  "consumer_lending"."reg_z_disclosures"
  "consumer_lending"."adverse_action_details"
  "consumer_lending"."ecoa_monitoring"
  "consumer_lending"."fairlending_analysis"
  "consumer_lending"."reg_b_notices"
  "consumer_lending"."appraisal_disclosures"
  "consumer_lending"."military_lending_checks"
  "consumer_lending"."high_cost_mortgage_tests"
  "consumer_lending"."compliance_exceptions"
}

//
// CREDIT CARDS
//

Table "credit_cards"."card_products" {
  "credit_cards_product_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each card product"]
  "product_name" VARCHAR(100) [not null, note: "Marketing name of the card product"]
  "product_code" VARCHAR(20) [not null, note: "Internal code identifying the card product"]
  "card_network" VARCHAR(20) [not null, note: "Card network (Visa, Mastercard, Amex, Discover)"]
  "card_type" VARCHAR(20) [not null, note: "Type of card (Debit, Credit, Prepaid, Charge)"]
  "card_tier" VARCHAR(20) [not null, note: "Card tier (Standard, Gold, Platinum, etc.)"]
  "is_secured" BOOLEAN [not null, default: false, note: "Whether card requires a security deposit"]
  "annual_fee" NUMERIC(10,2) [note: "Annual fee for the card"]
  "is_annual_fee_waived_first_year" BOOLEAN [default: false, note: "Whether annual fee is waived first year"]
  "base_interest_rate" NUMERIC(6,3) [note: "Standard purchase APR (annual percentage rate)"]
  "cash_advance_rate" NUMERIC(6,3) [note: "APR for cash advances"]
  "penalty_rate" NUMERIC(6,3) [note: "Penalty APR applied after late payments"]
  "balance_transfer_rate" NUMERIC(6,3) [note: "APR for balance transfers"]
  "intro_rate" NUMERIC(6,3) [note: "Introductory APR if offered"]
  "intro_rate_period_months" INTEGER [note: "Duration of introductory rate"]
  "grace_period_days" INTEGER [note: "Interest-free grace period in days"]
  "min_credit_score" INTEGER [note: "Minimum credit score typically required"]
  "min_credit_limit" NUMERIC(10,2) [note: "Minimum credit limit offered"]
  "max_credit_limit" NUMERIC(10,2) [note: "Maximum credit limit offered"]
  "reward_program" VARCHAR(100) [note: "Description of reward program if any"]
  "base_reward_rate" NUMERIC(5,2) [note: "Base reward earning rate (e.g., 1.5% cashback)"]
  "foreign_transaction_fee" NUMERIC(5,2) [note: "Fee percentage for foreign transactions"]
  "late_payment_fee" NUMERIC(10,2) [note: "Fee charged for late payments"]
  "overlimit_fee" NUMERIC(10,2) [note: "Fee charged for exceeding credit limit"]
  "cash_advance_fee_percent" NUMERIC(5,2) [note: "Percentage fee for cash advances"]
  "cash_advance_fee_min" NUMERIC(10,2) [note: "Minimum fee amount for cash advances"]
  "balance_transfer_fee_percent" NUMERIC(5,2) [note: "Percentage fee for balance transfers"]
  "balance_transfer_fee_min" NUMERIC(10,2) [note: "Minimum fee amount for balance transfers"]
  "return_payment_fee" NUMERIC(10,2) [note: "Fee charged for returned payments"]
  "is_active" BOOLEAN [not null, default: true, note: "Whether product is currently offered"]
  "launch_date" DATE [note: "Date when product was launched"]
  "discontinue_date" DATE [note: "Date when product was discontinued if applicable"]
  "terms_and_conditions_url" VARCHAR(255) [note: "URL to terms and conditions document"]
  "image_url" VARCHAR(255) [note: "URL to card image for marketing"]

  note: "Defines credit card products offered by the institution"
}

Table "credit_cards"."fraud_cases" {
  "credit_cards_case_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each fraud case"]
  "credit_cards_card_account_id" INTEGER [not null, ref: > credit_cards.card_accounts.credit_cards_card_account_id, note: "Reference to card_accounts"]
  "credit_cards_card_id" INTEGER [ref: > credit_cards.cards.credit_cards_card_id, note: "Reference to specific card if applicable"]
  "report_date" TIMESTAMPTZ [not null, note: "Date and time fraud was reported"]
  "case_type" VARCHAR(30) [not null, note: "Type of fraud (Card Fraud, Account Takeover, Application Fraud)"]
  "status" VARCHAR(20) [not null, note: "Status of case (Open, Investigation, Closed)"]
  "reported_by" VARCHAR(20) [not null, note: "Who reported fraud (Customer, Bank, Merchant)"]
  "description" TEXT [note: "Description of fraud incident"]
  "total_disputed_amount" NUMERIC(10,2) [note: "Total amount of fraudulent transactions"]
  "provisional_credit_issued" BOOLEAN [note: "Whether provisional credit was issued"]
  "resolution" VARCHAR(30) [note: "Final resolution of case"]
  "resolution_date" DATE [note: "Date case was resolved"]
  "new_card_issued" BOOLEAN [not null, default: false, note: "Whether replacement card was issued"]
  "police_report_filed" BOOLEAN [not null, default: false, note: "Whether police report was filed"]
  "investigator_id" INTEGER [ref: > enterprise.associates.enterprise_associate_id, note: "User ID of fraud investigator"]

  note: "Tracks fraud cases related to card accounts"
}

Table "credit_cards"."fraud_transactions" {
  "credit_cards_fraud_transaction_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each linked transaction"]
  "credit_cards_case_id" INTEGER [not null, ref: > credit_cards.fraud_cases.credit_cards_case_id, note: "Reference to fraud_cases"]
  "credit_cards_transaction_id" INTEGER [not null, ref: > credit_cards.transactions.credit_cards_transaction_id, note: "Reference to transactions"]
  "is_confirmed_fraud" BOOLEAN [not null, default: true, note: "Whether transaction is confirmed fraudulent"]

  note: "Junction table linking fraud cases to specific transactions"
}

Table "credit_cards"."security_blocks" {
  "credit_cards_block_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each security block"]
  "credit_cards_card_id" INTEGER [not null, ref: > credit_cards.cards.credit_cards_card_id, note: "Reference to specific card"]
  "block_type" VARCHAR(30) [not null, note: "Type of block (Temporary, Permanent, Geographic)"]
  "reason" VARCHAR(100) [not null, note: "Reason for security block"]
  "start_date" TIMESTAMPTZ [not null, note: "When block began"]
  "end_date" TIMESTAMPTZ [note: "When block ends if temporary"]
  "geographic_restriction" VARCHAR(100) [note: "Geographic area blocked if applicable"]
  "transaction_type_restricted" VARCHAR(30) [note: "Transaction types blocked if specific"]
  "requested_by" VARCHAR(20) [not null, note: "Who requested the block (Customer, Bank, Fraud System)"]
  "status" VARCHAR(20) [not null, note: "Status of block (Active, Removed)"]
  "removed_by_id" INTEGER [ref: > enterprise.associates.enterprise_associate_id, note: "User who removed the block"]
  "removed_date" TIMESTAMPTZ [note: "When block was removed"]

  note: "Tracks security blocks placed on cards"
}

Table "credit_cards"."credit_card_applications_hmda" {
  "credit_cards_record_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each HMDA record"]
  "credit_cards_application_id" INTEGER [not null, ref: > credit_cards.applications.credit_cards_application_id, note: "Reference to applications"]
  "reporting_year" INTEGER [not null, note: "Year for HMDA reporting"]
  "ethnicity" VARCHAR(20) [note: "Applicant's ethnicity per HMDA categories"]
  "race" VARCHAR(20) [note: "Applicant's race per HMDA categories"]
  "sex" VARCHAR(10) [note: "Applicant's sex per HMDA categories"]
  "age" INTEGER [note: "Applicant's age at time of application"]
  "income" NUMERIC(18,2) [note: "Applicant's annual income in thousands"]
  "rate_spread" NUMERIC(6,3) [note: "Difference between APR and average prime offer rate"]
  "hoepa_status" VARCHAR(10) [note: "Whether subject to HOEPA (Yes, No)"]
  "action_taken" VARCHAR(20) [not null, note: "Final disposition (Approved, Denied, etc.)"]
  "action_taken_date" DATE [not null, note: "Date of final action"]
  "denial_reason1" VARCHAR(30) [note: "Primary reason for denial if applicable"]
  "denial_reason2" VARCHAR(30) [note: "Secondary reason for denial if applicable"]
  "submission_status" VARCHAR(20) [not null, default: 'PENDING', note: "Status of HMDA submission"]

  note: "Regulatory reporting data for credit card applications under HMDA"
}

Table "credit_cards"."reg_z_credit_card_disclosures" {
  "credit_cards_disclosure_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each disclosure"]
  "credit_cards_application_id" INTEGER [ref: > credit_cards.applications.credit_cards_application_id, note: "Reference to applications if pre-account opening"]
  "credit_cards_card_account_id" INTEGER [ref: > credit_cards.card_accounts.credit_cards_card_account_id, note: "Reference to card_accounts if post-account opening"]
  "disclosure_type" VARCHAR(50) [not null, note: "Type of Reg Z disclosure (Solicitation, Application, Account-Opening, Periodic Statement)"]
  "disclosure_date" TIMESTAMPTZ [not null, note: "Date disclosure was generated"]
  "delivery_method" VARCHAR(30) [not null, note: "How disclosure was delivered (Mail, Electronic)"]
  "annual_percentage_rate" NUMERIC(6,3) [note: "APR disclosed"]
  "variable_rate_indicator" BOOLEAN [note: "Whether rate is variable"]
  "annual_fee" NUMERIC(10,2) [note: "Annual fee disclosed"]
  "transaction_fee_purchases" NUMERIC(10,2) [note: "Fee for purchases if any"]
  "transaction_fee_balance_transfers" NUMERIC(10,2) [note: "Fee for balance transfers"]
  "transaction_fee_cash_advance" NUMERIC(10,2) [note: "Fee for cash advances"]
  "late_payment_fee" NUMERIC(10,2) [note: "Late payment fee disclosed"]
  "over_limit_fee" NUMERIC(10,2) [note: "Over-limit fee disclosed"]
  "grace_period_disclosure" TEXT [note: "Grace period disclosure text"]
  "balance_computation_method" VARCHAR(50) [note: "Method used to calculate balance"]
  "document_path" VARCHAR(500) [note: "Path to stored disclosure document"]

  note: "Tracks Truth in Lending Act disclosures required for credit cards"
}

Table "credit_cards"."ability_to_pay_assessments" {
  "credit_cards_assessment_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each assessment"]
  "credit_cards_application_id" INTEGER [not null, ref: > credit_cards.applications.credit_cards_application_id, note: "Reference to applications"]
  "assessment_date" DATE [not null, note: "Date of ability to pay assessment"]
  "income_verified" BOOLEAN [not null, note: "Whether income was verified"]
  "income_source" VARCHAR(50) [not null, note: "Source of income verification"]
  "income_amount" NUMERIC(18,2) [not null, note: "Income amount used in assessment"]
  "debt_obligations" NUMERIC(18,2) [note: "Existing debt obligations considered"]
  "living_expenses" NUMERIC(18,2) [note: "Basic living expenses considered"]
  "dti_ratio" NUMERIC(5,2) [note: "Debt-to-income ratio calculated"]
  "max_supportable_payment" NUMERIC(10,2) [note: "Maximum monthly payment calculated as supportable"]
  "passed_assessment" BOOLEAN [not null, note: "Whether applicant passed ability to pay test"]
  "performed_by_id" INTEGER [ref: > enterprise.associates.enterprise_associate_id, note: "User who performed assessment"]
  "notes" TEXT [note: "Additional assessment notes"]

  note: "Documents ability to pay assessments required by Reg Z"
}

Table "credit_cards"."consumer_complaints" {
  "credit_cards_complaint_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each complaint"]
  "credit_cards_card_account_id" INTEGER [not null, ref: > credit_cards.card_accounts.credit_cards_card_account_id, note: "Reference to card_accounts"]
  "receipt_date" TIMESTAMPTZ [not null, note: "Date complaint was received"]
  "source" VARCHAR(30) [not null, note: "Source of complaint (Direct, CFPB, BBB, Social Media)"]
  "complaint_type" VARCHAR(50) [not null, note: "Type of complaint (Billing, Fees, Interest, Customer Service)"]
  "issue" VARCHAR(100) [not null, note: "Specific issue raised"]
  "description" TEXT [note: "Detailed description of complaint"]
  "status" VARCHAR(20) [not null, note: "Status of complaint (New, In Progress, Resolved)"]
  "response_sent_date" DATE [note: "Date response was sent to consumer"]
  "resolution" TEXT [note: "Description of how complaint was resolved"]
  "resolution_date" DATE [note: "Date complaint was resolved"]
  "cfpb_case_number" VARCHAR(30) [note: "CFPB case number if applicable"]
  "monetary_relief_amount" NUMERIC(10,2) [note: "Amount of monetary relief provided"]
  "regulatory_violation_found" BOOLEAN [note: "Whether regulatory violation was identified"]
  "regulation_violated" VARCHAR(50) [note: "Specific regulation violated if applicable"]

  note: "Tracks customer complaints about credit card accounts"
}

Table "credit_cards"."card_product_features" {
  "credit_cards_feature_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each feature"]
  "credit_cards_product_id" INTEGER [not null, ref: > credit_cards.card_products.credit_cards_product_id, note: "Reference to card_products"]
  "feature_name" VARCHAR(100) [not null, note: "Name of the feature"]
  "feature_description" TEXT [not null, note: "Detailed description of the feature"]
  "is_premium" BOOLEAN [not null, default: false, note: "Whether this is a premium feature"]
  "is_limited_time" BOOLEAN [not null, default: false, note: "Whether feature is limited-time offer"]
  "start_date" DATE [note: "When feature becomes available"]
  "end_date" DATE [note: "When feature expires if limited time"]

  note: "Stores features and benefits associated with card products"
}

Table "credit_cards"."card_product_reward_categories" {
  "credit_cards_category_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each reward category"]
  "credit_cards_product_id" INTEGER [not null, ref: > credit_cards.card_products.credit_cards_product_id, note: "Reference to card_products"]
  "category_name" VARCHAR(50) [not null, note: "Category name (e.g., Dining, Travel, Gas)"]
  "reward_rate" NUMERIC(5,2) [not null, note: "Reward rate for this category (e.g., 3% cashback)"]
  "is_quarterly" BOOLEAN [not null, default: false, note: "Whether category rotates quarterly"]
  "is_capped" BOOLEAN [not null, default: false, note: "Whether rewards are capped"]
  "cap_amount" NUMERIC(10,2) [note: "Spending cap for elevated rewards if applicable"]
  "cap_period" VARCHAR(20) [note: "Period for cap (e.g., Monthly, Quarterly, Annually)"]
  "start_date" DATE [note: "Start date for category if temporary"]
  "end_date" DATE [note: "End date for category if temporary"]

  note: "Defines reward earning categories for card products"
}

Table "credit_cards"."applications" {
  "credit_cards_application_id" INTEGER [pk, note: "Unique identifier for card application"]
  "customer_id" INTEGER [not null, ref: > enterprise.accounts.enterprise_account_id, note: "Reference to enterprise.accounts"]
  "credit_cards_product_id" INTEGER [not null, ref: > credit_cards.card_products.credit_cards_product_id, note: "Reference to card_products"]
  "application_date" TIMESTAMPTZ [not null, note: "When application was submitted"]
  "application_channel" VARCHAR(30) [not null, note: "Channel used for application (Online, Branch, Mail, Phone)"]
  "status" VARCHAR(20) [not null, note: "Current status (Pending, Approved, Denied, Canceled)"]
  "requested_credit_limit" NUMERIC(10,2) [note: "Credit limit requested by applicant"]
  "approved_credit_limit" NUMERIC(10,2) [note: "Credit limit approved by issuer"]
  "approved_interest_rate" NUMERIC(6,3) [note: "Interest rate approved for account"]
  "decision_date" TIMESTAMPTZ [note: "When decision was made"]
  "decision_method" VARCHAR(20) [note: "Automated or Manual decision"]
  "decision_reason" VARCHAR(100) [note: "Primary reason for decision"]
  "offer_code" VARCHAR(30) [note: "Promotional offer code if applicable"]
  "referring_source" VARCHAR(50) [note: "Marketing source or referral"]
  "is_preapproved" BOOLEAN [not null, default: false, note: "Whether application was pre-approved"]
  "is_secured" BOOLEAN [not null, default: false, note: "Whether card requires security deposit"]
  "security_deposit_amount" NUMERIC(10,2) [note: "Amount of security deposit if secured card"]
  "balance_transfer_requested" BOOLEAN [not null, default: false, note: "Whether balance transfer was requested"]
  "authorized_users_requested" INTEGER [note: "Number of authorized users requested"]
  "annual_income" NUMERIC(18,2) [note: "Applicant's reported annual income"]
  "housing_payment" NUMERIC(10,2) [note: "Applicant's monthly housing payment"]
  "employment_status" VARCHAR(30) [note: "Applicant's employment status"]
  "approval_expiration_date" DATE [note: "Date when approval expires if not accepted"]
  "time_at_current_address_years" INTEGER [note: "Years at current address"]

  note: "Stores credit card applications and their status"
}

Table "credit_cards"."card_accounts" {
  "credit_cards_card_account_id" SERIAL [pk, increment, note: "Unique identifier for card account"]
  "customer_id" INTEGER [not null, ref: > enterprise.accounts.enterprise_account_id, note: "Reference to enterprise.accounts"]
  "enterprise_account_id" INTEGER [not null, ref: > enterprise.accounts.enterprise_account_id, note: "Reference to enterprise.accounts - the main account record"]
  "credit_cards_product_id" INTEGER [not null, ref: > credit_cards.card_products.credit_cards_product_id, note: "Reference to card_products"]
  "credit_cards_application_id" INTEGER [ref: > credit_cards.applications.credit_cards_application_id, note: "Reference to original application if applicable"]
  "account_number" VARCHAR(30) [not null, unique, note: "Masked account number"]
  "opened_date" DATE [not null, note: "When account was opened"]
  "status" VARCHAR(20) [not null, note: "Account status (Active, Inactive, Closed, Suspended)"]
  "status_update_date_time" TIMESTAMPTZ [not null, note: "When the status was last updated"]
  "credit_limit" NUMERIC(10,2) [not null, note: "Current approved credit limit"]
  "available_credit" NUMERIC(10,2) [not null, note: "Current available credit"]
  "cash_advance_limit" NUMERIC(10,2) [note: "Limit for cash advances if different"]
  "current_balance" NUMERIC(10,2) [not null, default: 0, note: "Current outstanding balance"]
  "statement_balance" NUMERIC(10,2) [not null, default: 0, note: "Balance as of last statement"]
  "minimum_payment_due" NUMERIC(10,2) [not null, default: 0, note: "Minimum payment due"]
  "payment_due_date" DATE [note: "Date payment is due"]
  "last_payment_date" DATE [note: "Date of last payment received"]
  "last_payment_amount" NUMERIC(10,2) [note: "Amount of last payment received"]
  "purchase_interest_rate" NUMERIC(6,3) [not null, note: "Current purchase APR"]
  "cash_advance_interest_rate" NUMERIC(6,3) [note: "Current cash advance APR"]
  "balance_transfer_interest_rate" NUMERIC(6,3) [note: "Current balance transfer APR"]
  "penalty_interest_rate" NUMERIC(6,3) [note: "Current penalty APR if applicable"]
  "intro_rate_expiration_date" DATE [note: "When introductory rate expires"]
  "days_past_due" INTEGER [not null, default: 0, note: "Current days past due"]
  "times_past_due_30_days" INTEGER [not null, default: 0, note: "Count of 30+ day late payments"]
  "times_past_due_60_days" INTEGER [not null, default: 0, note: "Count of 60+ day late payments"]
  "times_past_due_90_days" INTEGER [not null, default: 0, note: "Count of 90+ day late payments"]
  "overlimit_status" BOOLEAN [not null, default: false, note: "Whether account is over limit"]
  "reward_points_balance" INTEGER [not null, default: 0, note: "Current reward points/cashback balance"]
  "is_secured" BOOLEAN [not null, default: false, note: "Whether account is secured"]
  "security_deposit_amount" NUMERIC(10,2) [note: "Amount of security deposit if secured"]
  "annual_fee_next_charge_date" DATE [note: "Next date annual fee will be charged"]
  "cycle_cut_day" INTEGER [note: "Day of month when billing cycle closes"]

  note: "Stores credit card accounts and their current status"
}

Table "credit_cards"."cards" {
  "credit_cards_card_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each physical card"]
  "credit_cards_card_account_id" INTEGER [not null, ref: > credit_cards.card_accounts.credit_cards_card_account_id, note: "Reference to card_accounts"]
  "card_number" VARCHAR(19) [note: "Masked card number (last 4 digits only)"]
  "user_type" VARCHAR(20) [not null, note: "Primary or Authorized User"]
  "user_id" INTEGER [not null, ref: > enterprise.parties.enterprise_party_id, note: "Reference to parties.party_id of cardholder"]
  "card_status" VARCHAR(20) [not null, note: "Active, Inactive, Lost, Stolen, Expired, Replaced"]
  "issue_date" DATE [not null, note: "When card was issued"]
  "activation_date" DATE [note: "When card was activated"]
  "expiration_date" DATE [not null, note: "When card expires"]
  "card_design" VARCHAR(50) [note: "Design/style of physical card"]
  "is_virtual" BOOLEAN [not null, default: false, note: "Whether card is virtual only"]
  "digital_wallet_enabled" BOOLEAN [not null, default: false, note: "Whether added to digital wallet"]
  "pin_set" BOOLEAN [not null, default: false, note: "Whether PIN has been set"]
  "temporary_limits" JSONB [note: "Temporary spending limits if any"]
  "temporary_limits_expiry" DATE [note: "When temporary limits expire"]

  note: "Stores information about physical and virtual cards issued for accounts"
}

Table "credit_cards"."authorized_users" {
  "credit_cards_authorized_user_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each authorized user"]
  "credit_cards_card_account_id" INTEGER [not null, ref: > credit_cards.card_accounts.credit_cards_card_account_id, note: "Reference to card_accounts"]
  "enterprise_party_id" INTEGER [not null, ref: > enterprise.parties.enterprise_party_id, note: "Reference to parties.party_id"]
  "relationship" VARCHAR(30) [note: "Relationship to primary cardholder"]
  "status" VARCHAR(20) [not null, note: "Status of authorized user (Active, Removed)"]
  "add_date" DATE [not null, note: "When user was added"]
  "remove_date" DATE [note: "When user was removed if applicable"]
  "spending_limit" NUMERIC(10,2) [note: "Custom spending limit if applicable"]
  "limit_period" VARCHAR(20) [note: "Period for limit (Daily, Monthly, etc.)"]

  // Indexes {
  //   ("card_account_id", "party_id") [unique, note: "Ensures party can only be an authorized user once per account"]
  // }

  note: "Tracks authorized users who can use the account"
}

Table "credit_cards"."transactions" {
  "credit_cards_transaction_id" SERIAL [pk, increment, note: "Unique identifier for transaction"]
  "credit_cards_card_account_id" INTEGER [not null, ref: > credit_cards.card_accounts.credit_cards_card_account_id, note: "Reference to card_accounts"]
  "credit_cards_card_id" INTEGER [not null, ref: > credit_cards.cards.credit_cards_card_id, note: "Reference to specific card used"]
  "transaction_date" TIMESTAMPTZ [not null, note: "Date and time of transaction"]
  "post_date" DATE [not null, note: "Date transaction posted to account"]
  "transaction_type" VARCHAR(20) [not null, note: "Purchase, Cash Advance, Balance Transfer, Payment, Fee, Adjustment"]
  "amount" NUMERIC(10,2) [not null, note: "Transaction amount"]
  "description" VARCHAR(100) [not null, note: "Merchant name or transaction description"]
  "category" VARCHAR(50) [note: "Spending category (e.g., Dining, Travel, Merchandise)"]
  "mcc_code" VARCHAR(20) [note: "Merchant Category Code"]
  "is_international" BOOLEAN [not null, default: false, note: "Whether transaction is international"]
  "original_currency" enterprise.currency_code [note: "Original currency if international"]
  "original_amount" NUMERIC(10,2) [note: "Amount in original currency if international"]
  "exchange_rate" NUMERIC(10,6) [note: "Exchange rate used if international"]
  "is_recurring" BOOLEAN [note: "Whether transaction appears to be recurring"]
  "auth_code" VARCHAR(10) [note: "Authorization code"]
  "reference_number" VARCHAR(30) [note: "Transaction reference number"]
  "is_pending" BOOLEAN [not null, default: false, note: "Whether transaction is pending"]
  "status" VARCHAR(20) [not null, note: "Approved, Declined, Reversed, Disputed"]
  "decline_reason" VARCHAR(50) [note: "Reason for decline if applicable"]
  "rewards_earned" NUMERIC(10,2) [note: "Rewards points or cashback earned"]
  "is_billable" BOOLEAN [not null, default: true, note: "Whether transaction is included in statement billing"]

  note: "Stores all transaction activity on card accounts"
}

Table "credit_cards"."statements" {
  "credit_cards_statement_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each statement"]
  "credit_cards_card_account_id" INTEGER [not null, ref: > credit_cards.card_accounts.credit_cards_card_account_id, note: "Reference to card_accounts"]
  "statement_date" DATE [not null, note: "Date statement was generated"]
  "statement_period_start" DATE [not null, note: "Start date for statement period"]
  "statement_period_end" DATE [not null, note: "End date for statement period"]
  "due_date" DATE [not null, note: "Payment due date"]
  "previous_balance" NUMERIC(10,2) [not null, note: "Balance carried over from previous statement"]
  "new_charges" NUMERIC(10,2) [not null, default: 0, note: "New purchases and charges"]
  "cash_advances" NUMERIC(10,2) [not null, default: 0, note: "Cash advances in period"]
  "balance_transfers" NUMERIC(10,2) [not null, default: 0, note: "Balance transfers in period"]
  "payments" NUMERIC(10,2) [not null, default: 0, note: "Payments received in period"]
  "credits" NUMERIC(10,2) [not null, default: 0, note: "Credits/refunds in period"]
  "fees" NUMERIC(10,2) [not null, default: 0, note: "Fees charged in period"]
  "interest" NUMERIC(10,2) [not null, default: 0, note: "Interest charged in period"]
  "ending_balance" NUMERIC(10,2) [not null, note: "Ending statement balance"]
  "minimum_payment" NUMERIC(10,2) [not null, note: "Minimum payment due"]
  "payment_received" BOOLEAN [not null, default: false, note: "Whether payment was received by due date"]
  "payment_received_date" DATE [note: "Date payment was received"]
  "payment_received_amount" NUMERIC(10,2) [note: "Amount of payment received"]
  "days_in_billing_cycle" INTEGER [not null, note: "Number of days in billing cycle"]
  "document_path" VARCHAR(500) [note: "Path to stored statement document"]

  note: "Stores monthly billing statements for card accounts"
}

Table "credit_cards"."fees" {
  "credit_cards_fee_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each fee"]
  "credit_cards_card_account_id" INTEGER [not null, ref: > credit_cards.card_accounts.credit_cards_card_account_id, note: "Reference to card_accounts"]
  "credit_cards_transaction_id" INTEGER [ref: > credit_cards.transactions.credit_cards_transaction_id, note: "Reference to transactions if associated with specific transaction"]
  "fee_type" VARCHAR(30) [not null, note: "Type of fee (Annual, Late Payment, Cash Advance, Foreign Transaction, etc.)"]
  "amount" NUMERIC(10,2) [not null, note: "Fee amount"]
  "description" VARCHAR(100) [note: "Description of fee"]
  "date_assessed" DATE [not null, note: "Date fee was charged"]
  "waived" BOOLEAN [not null, default: false, note: "Whether fee was waived"]
  "waiver_reason" VARCHAR(100) [note: "Reason fee was waived if applicable"]
  "credit_cards_statement_id" INTEGER [ref: > credit_cards.statements.credit_cards_statement_id, note: "Reference to statements if included in statement"]

  note: "Tracks fees charged to card accounts"
}

Table "credit_cards"."interest_charges" {
  "credit_cards_charge_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each interest charge"]
  "credit_cards_card_account_id" INTEGER [not null, ref: > credit_cards.card_accounts.credit_cards_card_account_id, note: "Reference to card_accounts"]
  "interest_type" VARCHAR(30) [not null, note: "Type of interest (Purchase, Cash Advance, Balance Transfer, Penalty)"]
  "balance_subject_to_interest" NUMERIC(10,2) [not null, note: "Balance amount subject to interest"]
  "interest_rate" NUMERIC(6,3) [not null, note: "Interest rate applied"]
  "days_in_period" INTEGER [not null, note: "Number of days interest was calculated for"]
  "amount" NUMERIC(10,2) [not null, note: "Interest amount charged"]
  "date_assessed" DATE [not null, note: "Date interest was charged"]
  "credit_cards_statement_id" INTEGER [not null, ref: > credit_cards.statements.credit_cards_statement_id,  note: "Reference to statements"]

  note: "Tracks interest charges applied to card accounts"
}

Table "credit_cards"."rewards" {
  "credit_cards_reward_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each reward record"]
  "credit_cards_card_account_id" INTEGER [not null, ref: > credit_cards.card_accounts.credit_cards_card_account_id, note: "Reference to card_accounts"]
  "credit_cards_transaction_id" INTEGER [ref: > credit_cards.transactions.credit_cards_transaction_id, note: "Reference to transactions if earned from transaction"]
  "reward_type" VARCHAR(30) [not null, note: "Type of reward (Points, Cashback, Miles)"]
  "amount" NUMERIC(10,2) [not null, note: "Amount of reward earned or redeemed"]
  "event_type" VARCHAR(20) [not null, note: "Earned, Bonus, Redeemed, Expired, Adjusted"]
  "description" VARCHAR(100) [not null, note: "Description of reward activity"]
  "category" VARCHAR(50) [note: "Category associated with reward if applicable"]
  "date_earned" DATE [not null, note: "Date reward was earned or redeemed"]
  "expiration_date" DATE [note: "Date reward will expire if applicable"]

  note: "Tracks reward earning and redemption activity"
}

Table "credit_cards"."reward_redemptions" {
  "credit_cards_redemption_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each redemption"]
  "credit_cards_card_account_id" INTEGER [not null, ref: > credit_cards.card_accounts.credit_cards_card_account_id, note: "Reference to card_accounts"]
  "redemption_date" TIMESTAMPTZ [not null, note: "Date and time of redemption"]
  "redemption_type" VARCHAR(30) [not null, note: "Type of redemption (Cashback, Travel, Gift Card, Merchandise, Statement Credit)"]
  "points_redeemed" INTEGER [not null, note: "Number of points redeemed"]
  "cash_value" NUMERIC(10,2) [not null, note: "Cash value of redemption"]
  "description" VARCHAR(100) [not null, note: "Description of redemption"]
  "status" VARCHAR(20) [not null, note: "Status of redemption (Pending, Completed, Canceled)"]
  "confirmation_code" VARCHAR(30) [note: "Confirmation code for redemption"]
  "shipping_address_id" INTEGER [ref: > enterprise.addresses.enterprise_address_id, note: "Reference to addresses if physical item"]
  "recipient_email" VARCHAR(100) [note: "Email for digital items if applicable"]

  note: "Stores details of reward point redemptions"
}

Table "credit_cards"."promotional_offers" {
  "credit_cards_offer_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each offer"]
  "credit_cards_card_account_id" INTEGER [not null, ref: > credit_cards.card_accounts.credit_cards_card_account_id, note: "Reference to card_accounts"]
  "offer_type" VARCHAR(30) [not null, note: "Type of offer (Balance Transfer, Cash Advance, Credit Limit Increase, etc.)"]
  "description" VARCHAR(255) [not null, note: "Description of offer"]
  "offer_date" DATE [not null, note: "Date offer was made"]
  "expiration_date" DATE [not null, note: "Date offer expires"]
  "interest_rate" NUMERIC(6,3) [note: "Interest rate associated with offer"]
  "fee_percentage" NUMERIC(5,2) [note: "Fee percentage associated with offer"]
  "status" VARCHAR(20) [not null, note: "Status of offer (Active, Accepted, Declined, Expired)"]
  "response_date" DATE [note: "Date customer responded to offer"]
  "amount_offered" NUMERIC(10,2) [note: "Amount of credit offered if applicable"]
  "promo_code" VARCHAR(20) [note: "Promotional code associated with offer"]
  "terms_and_conditions" TEXT [note: "Terms and conditions of offer"]

  note: "Tracks promotional offers made to cardholders"
}

Table "credit_cards"."balance_transfers" {
  "credit_cards_transfer_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each balance transfer"]
  "credit_cards_card_account_id" INTEGER [not null, ref: > credit_cards.card_accounts.credit_cards_card_account_id, note: "Reference to card_accounts"]
  "credit_cards_transaction_id" INTEGER [ref: > credit_cards.transactions.credit_cards_transaction_id, note: "Reference to transactions"]
  "credit_cards_offer_id" INTEGER [ref: > credit_cards.promotional_offers.credit_cards_offer_id, note: "Reference to promotional_offers if applicable"]
  "creditor_name" VARCHAR(100) [not null, note: "Name of creditor being paid"]
  "account_number" VARCHAR(30) [note: "Account number at other creditor, masked"]
  "transfer_amount" NUMERIC(10,2) [not null, note: "Amount transferred"]
  "fee_amount" NUMERIC(10,2) [note: "Fee charged for transfer"]
  "interest_rate" NUMERIC(6,3) [not null, note: "Interest rate applied to transfer"]
  "promotional_rate" BOOLEAN [not null, default: false, note: "Whether rate is promotional"]
  "promotion_end_date" DATE [note: "When promotional rate ends if applicable"]
  "request_date" DATE [not null, note: "When transfer was requested"]
  "status" VARCHAR(20) [not null, note: "Status of transfer (Pending, Completed, Rejected)"]
  "completion_date" DATE [note: "When transfer was completed"]
  "current_balance" NUMERIC(10,2) [note: "Current balance remaining from transfer"]

  note: "Tracks balance transfers from other creditors"
}

Table "credit_cards"."payment_methods" {
  "credit_cards_payment_method_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each payment method"]
  "credit_cards_card_account_id" INTEGER [not null, ref: > credit_cards.card_accounts.credit_cards_card_account_id, note: "Reference to card_accounts"]
  "payment_type" VARCHAR(30) [not null, note: "Type of payment method (Bank Account, Debit Card, Check)"]
  "nickname" VARCHAR(50) [note: "User-assigned nickname for payment method"]
  "status" VARCHAR(20) [not null, note: "Status of payment method (Active, Inactive, Removed)"]
  "is_default" BOOLEAN [not null, default: false, note: "Whether this is the default payment method"]
  "bank_name" VARCHAR(100) [note: "Name of the bank if applicable"]
  "account_type" VARCHAR(20) [note: "Checking or Savings if bank account"]
  "account_number" VARCHAR(30) [note: "Masked account number"]
  "routing_number" VARCHAR(9) [note: "Routing number if bank account"]
  "expiration_date" DATE [note: "Expiration date if debit card"]
  "verification_status" VARCHAR(20) [not null, note: "Status of verification (Verified, Pending, Failed)"]

  note: "Stores payment methods for card account payments"
}

Table "credit_cards"."autopay_settings" {
  "credit_cards_autopay_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each autopay setup"]
  "credit_cards_card_account_id" INTEGER [not null, ref: > credit_cards.card_accounts.credit_cards_card_account_id, note: "Reference to card_accounts"]
  "credit_cards_payment_method_id" INTEGER [not null, ref: > credit_cards.payment_methods.credit_cards_payment_method_id, note: "Reference to payment_methods"]
  "status" VARCHAR(20) [not null, note: "Status of autopay (Active, Inactive)"]
  "payment_option" VARCHAR(30) [not null, note: "What to pay (Minimum, Statement Balance, Current Balance, Fixed Amount)"]
  "fixed_amount" NUMERIC(10,2) [note: "Fixed amount if applicable"]
  "payment_day" VARCHAR(30) [not null, note: "When to pay (Due Date, Days Before Due Date, Specific Day)"]
  "days_before_due" INTEGER [note: "Days before due date if applicable"]
  "specific_day" INTEGER [note: "Specific day of month if applicable"]
  "start_date" DATE [not null, note: "When autopay begins"]
  "end_date" DATE [note: "When autopay ends if applicable"]
  "last_payment_date" DATE [note: "Date of last autopay payment"]
  "next_payment_date" DATE [note: "Scheduled date of next payment"]

  note: "Stores automatic payment settings"
}

Table "credit_cards"."credit_limit_changes" {
  "credit_cards_change_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each limit change"]
  "credit_cards_card_account_id" INTEGER [not null, ref: > credit_cards.card_accounts.credit_cards_card_account_id, note: "Reference to card_accounts"]
  "change_date" DATE [not null, note: "Date of credit limit change"]
  "previous_limit" NUMERIC(10,2) [not null, note: "Credit limit before change"]
  "new_limit" NUMERIC(10,2) [not null, note: "Credit limit after change"]
  "change_reason" VARCHAR(50) [not null, note: "Reason for limit change"]
  "requested_by" VARCHAR(20) [not null, note: "Who requested change (Customer, Bank)"]
  "approved_by_id" INTEGER [ref: > enterprise.associates.enterprise_associate_id, note: "User who approved change"]

  note: "Tracks history of credit limit changes"
}

Table "credit_cards"."card_alerts" {
  "credit_cards_alert_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each alert"]
  "credit_cards_card_account_id" INTEGER [not null, ref: > credit_cards.card_accounts.credit_cards_card_account_id, note: "Reference to card_accounts"]
  "credit_cards_card_id" INTEGER [ref: > credit_cards.cards.credit_cards_card_id, note: "Reference to specific card if applicable"]
  "alert_type" VARCHAR(30) [not null, note: "Type of alert (Payment Due, Payment Posted, Purchase, Credit Limit, Fraud)"]
  "delivery_method" VARCHAR(20) [not null, note: "How alert is delivered (Email, SMS, Push)"]
  "contact_info" VARCHAR(100) [not null, note: "Email or phone number for alert"]
  "threshold_amount" NUMERIC(10,2) [note: "Amount threshold if applicable"]
  "is_active" BOOLEAN [not null, default: true, note: "Whether alert is currently active"]
  "created_date" DATE [not null, note: "When alert was set up"]
  "modified_date" DATE [note: "When alert was last modified"]

  note: "Stores customer alert preferences"
}

Table "credit_cards"."disputed_transactions" {
  "credit_cards_dispute_id" SERIAL [pk, increment, note: "Auto-incrementing identifier for each dispute"]
  "credit_cards_transaction_id" INTEGER [not null, ref: > credit_cards.transactions.credit_cards_transaction_id, note: "Reference to transactions"]
  "credit_cards_card_account_id" INTEGER [not null, ref: > credit_cards.card_accounts.credit_cards_card_account_id, note: "Reference to card_accounts"]
  "dispute_date" TIMESTAMPTZ [not null, note: "Date and time dispute was filed"]
  "dispute_reason" VARCHAR(50) [not null, note: "Reason for dispute (Fraud, Product Issue, Duplicate Charge, etc.)"]
  "disputed_amount" NUMERIC(10,2) [not null, note: "Amount being disputed"]
  "description" TEXT [note: "Customer description of dispute"]
  "status" VARCHAR(20) [not null, note: "Status of dispute (Filed, Processing, Resolved, Declined)"]
  "resolution" VARCHAR(20) [note: "Final resolution (Customer Favor, Merchant Favor)"]
  "resolution_date" DATE [note: "Date dispute was resolved"]
  "provisional_credit_date" DATE [note: "Date provisional credit was issued if applicable"]
  "provisional_credit_amount" NUMERIC(10,2) [note: "Amount of provisional credit"]
  "documentation_received" BOOLEAN [not null, default: false, note: "Whether documentation was received"]
  "case_number" VARCHAR(30) [not null, note: "Dispute case identifier"]

  note: "Tracks disputed transactions and their resolution"
}

// Table Groups for better organization
TableGroup "Credit Card Products" {
  "credit_cards"."card_products"
  "credit_cards"."card_product_features"
  "credit_cards"."card_product_reward_categories"

  note: "Tables related to credit card product definitions"
}

TableGroup "Credit Card Accounts" {
  "credit_cards"."applications"
  "credit_cards"."card_accounts"
  "credit_cards"."cards"
  "credit_cards"."authorized_users"

  note: "Tables related to credit card applications and accounts"
}

TableGroup "Transactions and Billing" {
  "credit_cards"."transactions"
  "credit_cards"."statements"
  "credit_cards"."fees"
  "credit_cards"."interest_charges"

  note: "Tables related to credit card transactions and billing"
}

TableGroup "Rewards and Offers" {
  "credit_cards"."rewards"
  "credit_cards"."reward_redemptions"
  "credit_cards"."promotional_offers"

  note: "Tables related to rewards programs and promotional offers"
}

TableGroup "Account Services" {
  "credit_cards"."balance_transfers"
  "credit_cards"."payment_methods"
  "credit_cards"."autopay_settings"
  "credit_cards"."credit_limit_changes"
  "credit_cards"."card_alerts"

  note: "Tables related to credit card account services"
}

TableGroup "Disputes and Fraud" {
  "credit_cards"."disputed_transactions"
  "credit_cards"."fraud_cases"
  "credit_cards"."fraud_transactions"
  "credit_cards"."security_blocks"

  note: "Tables related to disputes, fraud, and security"
}

TableGroup "Credit Card Compliance" {
  "credit_cards"."credit_card_applications_hmda"
  "credit_cards"."reg_z_credit_card_disclosures"
  "credit_cards"."ability_to_pay_assessments"
  "credit_cards"."consumer_complaints"

  note: "Tables related to regulatory compliance for credit cards"
}

//
// SMALL BUSINESS BANKING
//

Table "small_business_banking"."businesses" {
  "small_business_banking_business_id" SERIAL [pk, increment, note: "Unique identifier for each business entity"]
  "enterprise_party_id" INTEGER [not null, ref: > "enterprise"."parties"."enterprise_party_id", note: "Reference to the enterprise party record representing this business"]
  "business_name" VARCHAR(350) [not null, note: "Operating name of the business"]
  "tax_id" VARCHAR(50) [not null, note: "Tax identification number for the business (e.g., EIN)"]
  "business_type" VARCHAR(50) [not null, note: "Type of business entity (e.g., LLC, Corporation, Sole Proprietorship)"]
  "industry_code" VARCHAR(10) [not null, note: "Standard industry classification code for the business"]
  "establishment_date" DATE [note: "Date the business was established"]
  "annual_revenue" DECIMAL(18,2) [note: "Annual revenue amount for the business"]
  "employee_count" INTEGER [note: "Number of employees in the business"]
  "website" VARCHAR(255) [note: "Business website URL"]
  "status" VARCHAR(20) [not null, default: "active", note: "Current status of the business (active, inactive, suspended, etc.)"]

  Indexes {
    "tax_id" [unique, note: "Ensures tax ID is unique across businesses"]
  }

  note: "Stores core information about small businesses that are customers of the bank"
}

Table "small_business_banking"."business_owners" {
  "small_business_banking_business_owner_id" SERIAL [pk, increment, note: "Unique identifier for each business owner record"]
  "small_business_banking_business_id" INTEGER [not null, ref: > "small_business_banking"."businesses"."small_business_banking_business_id", note: "Reference to the business the person owns or controls"]
  "enterprise_party_id" INTEGER [not null, ref: > "enterprise"."parties"."enterprise_party_id", note: "Reference to the enterprise party record representing this individual"]
  "ownership_percentage" DECIMAL(5,2) [not null, note: "Percentage of business ownership (0-100)"]
  "role" VARCHAR(100) [not null, note: "Role in the business (e.g., CEO, CFO, Managing Partner)"]
  "is_guarantor" BOOLEAN [not null, default: false, note: "Indicates if this owner serves as a loan guarantor"]

  Indexes {
    ("small_business_banking_business_id", "enterprise_party_id") [unique, note: "Ensures a party can only be listed once as an owner for a given business"]
  }

  note: "Identifies individuals who own or have significant control over a business entity"
}

Table "small_business_banking"."accounts" {
  "small_business_banking_account_id" SERIAL [pk, increment, note: "Unique identifier for each business account"]
  "enterprise_account_id" INTEGER [not null, ref: > enterprise.accounts.enterprise_account_id, note: "References the main account"]
  "small_business_banking_business_id" INTEGER [not null, ref: > "small_business_banking"."businesses"."small_business_banking_business_id", note: "Reference to the business that owns this account"]
  "account_number" VARCHAR(50) [not null, note: "Unique account number visible to customers"]
  "account_type" VARCHAR(50) [not null, note: "Type of account (checking, savings, money market, etc.)"]
  "small_business_banking_product_id" INTEGER [not null, ref: > "small_business_banking"."products"."small_business_banking_product_id", note: "Reference to the product this account is based on"]
  "status" VARCHAR(40) [not null, default: "active", note: "Current status of the account (active, inactive, frozen, closed)"]
  "status_update_date_time" TIMESTAMPTZ [not null, note: "When the status was last updated"]
  "balance" DECIMAL(18,2) [not null, default: 0.00, note: "Current balance of the account"]
  "available_balance" DECIMAL(18,2) [not null, default: 0.00, note: "Available balance after holds and pending transactions"]
  "currency" enterprise.currency_code [not null, default: "USD", note: "ISO currency code for the account"]
  "overdraft_limit" DECIMAL(18,2) [not null, default: 0.00, note: "Maximum allowed overdraft amount"]
  "interest_rate" DECIMAL(6,4) [note: "Current interest rate applied to the account (if applicable)"]
  "statement_frequency" VARCHAR(20) [not null, default: "monthly", note: "Frequency of account statements (daily, weekly, monthly)"]
  "statement_day" INTEGER [note: "Day of month/week when statements are generated"]
  "last_statement_date" DATE [note: "Date when the last statement was generated"]
  "opened_date" DATE [not null, note: "Date when the account was opened"]

  Indexes {
    "account_number" [unique, note: "Ensures account numbers are unique"]
  }

  note: "Stores the business deposit and transaction accounts managed by the bank"
}

Table "small_business_banking"."products" {
  "small_business_banking_product_id" SERIAL [pk, increment, note: "Unique identifier for each product"]
  "product_code" VARCHAR(20) [not null, note: "Internal code for the product"]
  "product_name" VARCHAR(100) [not null, note: "Display name for the product"]
  "product_type" VARCHAR(50) [not null, note: "Type of product (checking, savings, loan, credit line, credit card)"]
  "description" TEXT [note: "Detailed product description"]
  "min_opening_deposit" DECIMAL(18,2) [note: "Minimum amount required to open an account of this product type"]
  "monthly_fee" DECIMAL(10,2) [note: "Standard monthly maintenance fee"]
  "transaction_limit" INTEGER [note: "Number of free transactions per statement period"]
  "transaction_fee" DECIMAL(10,2) [note: "Fee charged per transaction beyond the limit"]
  "min_balance" DECIMAL(18,2) [note: "Minimum balance to avoid fees"]
  "is_interest_bearing" BOOLEAN [not null, default: false, note: "Indicates if the product earns interest"]
  "base_interest_rate" DECIMAL(6,4) [note: "Standard interest rate for the product (if applicable)"]
  "term_length" INTEGER [note: "Term in months (for term products)"]
  "is_active" BOOLEAN [not null, default: true, note: "Indicates if the product is currently offered"]

  Indexes {
    "product_code" [unique, note: "Ensures product codes are unique"]
  }

  note: "Defines the financial products offered to small business customers"
}

Table "small_business_banking"."account_signatories" {
  "small_business_banking_account_signatory_id" SERIAL [pk, increment, note: "Unique identifier for each account signatory record"]
  "small_business_banking_account_id" INTEGER [not null, ref: > "small_business_banking"."accounts"."small_business_banking_account_id", note: "Reference to the account"]
  "enterprise_party_id" INTEGER [not null, ref: > "enterprise"."parties"."enterprise_party_id", note: "Reference to the enterprise party who has signing authority"]
  "signatory_level" VARCHAR(20) [not null, note: "Level of signing authority (primary, secondary, view-only)"]
  "daily_limit" DECIMAL(18,2) [note: "Maximum daily transaction limit for this signatory"]
  "is_active" BOOLEAN [not null, default: true, note: "Indicates if the signing authority is currently active"]
  "start_date" DATE [not null, note: "Date when the signing authority begins"]
  "end_date" DATE [note: "Date when the signing authority expires (if applicable)"]

  Indexes {
    ("small_business_banking_account_id", "enterprise_party_id") [unique, note: "Ensures a party can only be listed once as a signatory for a given account"]
  }

  note: "Identifies individuals who have authority to sign on or manage a business account"
}

Table "small_business_banking"."loans" {
  "small_business_banking_loan_id" SERIAL [pk, increment, note: "Unique identifier for each loan"]
  "small_business_banking_business_id" INTEGER [not null, ref: > "small_business_banking"."businesses"."small_business_banking_business_id", note: "Reference to the business receiving the loan"]
  "small_business_banking_account_id" INTEGER [not null, ref: > "small_business_banking"."accounts"."small_business_banking_account_id", note: "Reference to the associated account for fund disbursement and payments"]
  "small_business_banking_product_id" INTEGER [not null, ref: > "small_business_banking"."products"."small_business_banking_product_id", note: "Reference to the loan product"]
  "loan_number" VARCHAR(50) [not null, note: "Unique loan number visible to customers"]
  "loan_amount" DECIMAL(18,2) [not null, note: "Original principal amount of the loan"]
  "outstanding_balance" DECIMAL(18,2) [not null, note: "Current balance remaining on the loan"]
  "interest_rate" DECIMAL(6,4) [not null, note: "Annual interest rate for the loan"]
  "interest_type" VARCHAR(20) [not null, note: "Type of interest rate (fixed, variable, etc.)"]
  "reference_rate" VARCHAR(50) [note: "Reference rate for variable rate loans (e.g., PRIME, SOFR)"]
  "rate_spread" DECIMAL(6,4) [note: "Spread over the reference rate for variable rate loans"]
  "term_months" INTEGER [not null, note: "Duration of the loan in months"]
  "payment_frequency" VARCHAR(20) [not null, note: "Frequency of payments (weekly, monthly, quarterly)"]
  "payment_amount" DECIMAL(18,2) [not null, note: "Regular payment amount"]
  "balloon_payment" DECIMAL(18,2) [note: "Final balloon payment amount (if applicable)"]
  "disbursal_date" DATE [note: "Date when loan funds were disbursed"]
  "first_payment_date" DATE [note: "Date when the first payment is due"]
  "maturity_date" DATE [note: "Date when the loan is scheduled to be fully paid"]
  "purpose" VARCHAR(255) [note: "Stated purpose of the loan"]
  "status" VARCHAR(20) [not null, default: "pending", note: "Current status of the loan (pending, active, paid, defaulted)"]

  Indexes {
    "loan_number" [unique, note: "Ensures loan numbers are unique"]
  }

  note: "Stores information about term loans issued to small businesses"
}

Table "small_business_banking"."credit_lines" {
  "small_business_banking_credit_line_id" SERIAL [pk, increment, note: "Unique identifier for each credit line"]
  "small_business_banking_business_id" INTEGER [not null, ref: > "small_business_banking"."businesses"."small_business_banking_business_id", note: "Reference to the business that has the credit line"]
  "small_business_banking_account_id" INTEGER [not null, ref: > "small_business_banking"."accounts"."small_business_banking_account_id", note: "Reference to the associated account for fund disbursement and payments"]
  "small_business_banking_product_id" INTEGER [not null, ref: > "small_business_banking"."products"."small_business_banking_product_id", note: "Reference to the credit line product"]
  "credit_line_number" VARCHAR(50) [not null, note: "Unique credit line number visible to customers"]
  "credit_limit" DECIMAL(18,2) [not null, note: "Maximum amount that can be borrowed"]
  "available_credit" DECIMAL(18,2) [not null, note: "Current amount available to be drawn"]
  "outstanding_balance" DECIMAL(18,2) [not null, default: 0.00, note: "Current balance owed on the credit line"]
  "interest_rate" DECIMAL(6,4) [not null, note: "Annual interest rate for the credit line"]
  "interest_type" VARCHAR(20) [not null, note: "Type of interest rate (fixed, variable)"]
  "reference_rate" VARCHAR(50) [note: "Reference rate for variable rate credit lines (e.g., PRIME, SOFR)"]
  "rate_spread" DECIMAL(6,4) [note: "Spread over the reference rate for variable rate credit lines"]
  "annual_fee" DECIMAL(10,2) [note: "Annual fee charged for maintaining the credit line"]
  "draw_period_months" INTEGER [note: "Duration in months of the draw period"]
  "repayment_period_months" INTEGER [note: "Duration in months of the repayment period"]
  "minimum_payment_percentage" DECIMAL(5,2) [not null, note: "Minimum percentage of outstanding balance required as monthly payment"]
  "minimum_payment_amount" DECIMAL(10,2) [not null, note: "Minimum fixed amount required as monthly payment"]
  "start_date" DATE [not null, note: "Date when the credit line becomes available"]
  "renewal_date" DATE [note: "Date when the credit line is up for renewal"]
  "status" VARCHAR(20) [not null, default: "active", note: "Current status of the credit line (active, inactive, frozen, closed)"]

  Indexes {
    "credit_line_number" [unique, note: "Ensures credit line numbers are unique"]
  }

  note: "Manages revolving credit facilities provided to small businesses"
}

Table "small_business_banking"."collateral" {
  "small_business_banking_collateral_id" SERIAL [pk, increment, note: "Unique identifier for each collateral item"]
  "small_business_banking_business_id" INTEGER [not null, ref: > "small_business_banking"."businesses"."small_business_banking_business_id", note: "Reference to the business that owns the collateral"]
  "collateral_type" VARCHAR(50) [not null, note: "Type of collateral (real estate, equipment, vehicle, inventory, etc.)"]
  "description" TEXT [not null, note: "Detailed description of the collateral"]
  "value" DECIMAL(18,2) [not null, note: "Estimated or appraised value of the collateral"]
  "valuation_date" DATE [not null, note: "Date when the value was determined"]
  "valuation_type" VARCHAR(50) [not null, note: "Method of valuation (appraisal, estimate, purchase price)"]
  "location" TEXT [note: "Physical location of the collateral item"]
  "identification_number" VARCHAR(100) [note: "Serial number, VIN, or other identifier for the collateral"]
  "lien_position" INTEGER [note: "Position of the bank's lien on this collateral (1st, 2nd, etc.)"]
  "lien_filing_number" VARCHAR(100) [note: "Reference number for the lien filing"]
  "insurance_provider" VARCHAR(100) [note: "Name of insurance company covering this collateral"]
  "insurance_policy_number" VARCHAR(100) [note: "Insurance policy number for this collateral"]
  "insurance_expiry_date" DATE [note: "Expiration date of the insurance policy"]
  "status" VARCHAR(20) [not null, default: "active", note: "Current status of the collateral (active, sold, repossessed)"]

  note: "Tracks assets pledged as security for loans and credit facilities"
}

Table "small_business_banking"."loan_collateral" {
  "small_business_banking_loan_collateral_id" SERIAL [pk, increment, note: "Unique identifier for each loan-collateral association"]
  "small_business_banking_loan_id" INTEGER [not null, ref: > "small_business_banking"."loans"."small_business_banking_loan_id", note: "Reference to the loan secured by the collateral"]
  "small_business_banking_collateral_id" INTEGER [not null, ref: > "small_business_banking"."collateral"."small_business_banking_collateral_id", note: "Reference to the collateral item"]
  "collateral_percentage" DECIMAL(5,2) [not null, note: "Percentage of the collateral's value assigned to this loan"]

  Indexes {
    ("small_business_banking_loan_id", "small_business_banking_loan_collateral_id") [unique, note: "Ensures a collateral item is only assigned once to a loan"]
  }

  note: "Junction table linking collateral items to specific loans they secure"
}

Table "small_business_banking"."business_card_accounts" {
  "small_business_banking_business_card_account_id" SERIAL [pk, increment, note: "Unique identifier for each business credit card account"]
  "small_business_banking_business_id" INTEGER [not null, ref: > "small_business_banking"."businesses"."small_business_banking_business_id", note: "Reference to the business that owns the credit card account"]
  "card_account_id" INTEGER [not null, ref: > credit_cards.card_accounts.credit_cards_card_account_id, note: "Reference to the primary credit card account in the credit_cards schema"]
  "credit_cards_product_id" INTEGER [not null, ref: > "credit_cards"."card_products"."credit_cards_product_id", note: "Reference to the card product in credit_cards schema"]
  "account_type" VARCHAR(20) [not null, default: "business", note: "Categorization of the account (business, corporate, etc.)"]
  "tax_id_reporting" VARCHAR(50) [not null, note: "Tax ID used for reporting purposes"]
  "business_structure" VARCHAR(50) [not null, note: "Legal structure of the business for credit purposes"]
  "ownership_type" VARCHAR(50) [not null, note: "Type of ownership for this card account (sole proprietor, partnership, corporation)"]
  "liability_type" VARCHAR(20) [not null, note: "Liability arrangement (business liability, joint liability, etc.)"]
  "linked_deposit_account_id" INTEGER [ref: > "small_business_banking"."accounts"."small_business_banking_account_id", note: "Reference to deposit account for automatic payments"]
  "relationship_manager_id" INTEGER [note: "Reference to the relationship manager for this business"]
  "annual_review_date" DATE [note: "Date when account should be reviewed annually"]
  "expense_category_setup" VARCHAR(20) [not null, default: "standard", note: "Type of expense categorization setup (standard, custom)"]

  Indexes {
    ("small_business_banking_business_id", "card_account_id") [unique, note: "Ensures a business has only one record per card account"]
  }

  note: "Links businesses to credit card accounts and stores business-specific attributes"
}

Table "small_business_banking"."business_card_users" {
  "small_business_banking_business_card_user_id" SERIAL [pk, increment, note: "Unique identifier for each business card user"]
  "small_business_banking_business_id" INTEGER [not null, ref: > "small_business_banking"."businesses"."small_business_banking_business_id", note: "Reference to the business"]
  "small_business_banking_business_card_account_id" INTEGER [not null, ref: > "small_business_banking"."business_card_accounts"."small_business_banking_business_card_account_id", note: "Reference to the business card account"]
  "enterprise_party_id" INTEGER [not null, ref: > "enterprise"."parties"."enterprise_party_id", note: "Reference to the enterprise party who is issued a card"]
  "credit_cards_card_id" INTEGER [not null, ref: > "credit_cards"."cards"."credit_cards_card_id", note: "Reference to the specific card in the credit_cards schema"]
  "role" VARCHAR(50) [not null, note: "Role of user in the business (owner, employee, accountant, etc.)"]
  "department" VARCHAR(100) [note: "Department or cost center for this cardholder"]
  "employee_id" VARCHAR(50) [note: "Employee ID within the business if applicable"]
  "spending_limit" DECIMAL(18,2) [not null, note: "Monthly spending limit for this cardholder"]
  "transaction_approval_required" BOOLEAN [not null, default: false, note: "Whether transactions require approval"]
  "merchant_category_restrictions" TEXT [note: "JSON object describing merchant category restrictions"]
  "can_view_all_transactions" BOOLEAN [not null, default: false, note: "Whether user can view all company transactions"]
  "can_manage_all_cards" BOOLEAN [not null, default: false, note: "Whether user can manage all company cards"]

  Indexes {
    ("small_business_banking_business_card_user_id", "enterprise_party_id") [unique, note: "Ensures a party has only one record per business card account"]
  }

  note: "Manages employee and owner cards issued under a business credit card account"
}

Table "small_business_banking"."business_expense_categories" {
  "small_business_banking_category_id" SERIAL [pk, increment, note: "Unique identifier for each expense category"]
  "small_business_banking_business_id" INTEGER [not null, ref: > "small_business_banking"."businesses"."small_business_banking_business_id", note: "Reference to the business"]
  "category_name" VARCHAR(100) [not null, note: "Name of the expense category"]
  "category_description" TEXT [note: "Description of what expenses belong in this category"]
  "parent_category_id" INTEGER [ref: > "small_business_banking"."business_expense_categories"."small_business_banking_category_id", note: "Reference to parent category for hierarchical categorization"]
  "budget_amount" DECIMAL(18,2) [note: "Monthly budget amount for this category"]
  "is_tax_deductible" BOOLEAN [note: "Whether expenses in this category are typically tax deductible"]
  "gl_account_code" VARCHAR(50) [note: "General ledger account code for accounting integration"]

  Indexes {
    ("small_business_banking_business_id", "category_name") [unique, note: "Ensures category names are unique within a business"]
  }

  note: "Defines custom expense categories for business card transactions"
}

Table "small_business_banking"."business_transaction_categories" {
  "small_business_banking_transaction_category_id" SERIAL [pk, increment, note: "Unique identifier for each transaction categorization"]
  "small_business_banking_business_id" INTEGER [not null, ref: > "small_business_banking"."businesses"."small_business_banking_business_id", note: "Reference to the business"]
  "transaction_id" INTEGER [not null, note: "Reference to the transaction in credit_cards schema"]
  "small_business_banking_category_id" INTEGER [not null, ref: > "small_business_banking"."business_expense_categories"."small_business_banking_category_id", note: "Reference to the business expense category"]
  "notes" TEXT [note: "Additional notes about this transaction categorization"]
  "receipt_image_path" VARCHAR(500) [note: "Path to stored receipt image"]
  "tax_relevant" BOOLEAN [not null, default: false, note: "Flag indicating transaction is relevant for tax purposes"]
  "created_by_id" INTEGER [ref: > enterprise.associates.enterprise_associate_id, note: "User who created this categorization"]

  note: "Maps credit card transactions to business expense categories"
}

Table "small_business_banking"."transactions" {
  "small_business_banking_transaction_id" SERIAL [pk, increment, note: "Unique identifier for each transaction"]
  "small_business_banking_account_id" INTEGER [not null, ref: > "small_business_banking"."accounts"."small_business_banking_account_id", note: "Reference to the account where the transaction occurred"]
  "transaction_type" VARCHAR(50) [not null, note: "Type of transaction (deposit, withdrawal, payment, fee, etc.)"]
  "amount" DECIMAL(18,2) [not null, note: "Transaction amount"]
  "running_balance" DECIMAL(18,2) [note: "Account balance after this transaction"]
  "currency" enterprise.currency_code [not null, default: "USD", note: "Currency of the transaction"]
  "description" VARCHAR(255) [note: "Transaction description"]
  "reference_number" VARCHAR(100) [note: "External reference for the transaction"]
  "status" VARCHAR(20) [not null, default: "completed", note: "Status of the transaction (pending, completed, failed, reversed)"]
  "transaction_date" DATE [not null, note: "Date of the transaction"]
  "post_date" DATE [note: "Date when the transaction was posted to the account"]
  "created_by_id" INTEGER [ref: > enterprise.associates.enterprise_associate_id, note: "User that created the transaction"]

  note: "Records all financial transactions across business accounts"
}

Table "small_business_banking"."payments" {
  "small_business_banking_payment_id" SERIAL [pk, increment, note: "Unique identifier for each payment"]
  "source_account_id" INTEGER [ref: > "small_business_banking"."accounts"."small_business_banking_account_id", note: "Reference to the account funds are drawn from (for internal transfers)"]
  "destination_account_id" INTEGER [ref: > "small_business_banking"."accounts"."small_business_banking_account_id", note: "Reference to the account funds are deposited to (for internal transfers)"]
  "small_business_banking_loan_id" INTEGER [ref: > "small_business_banking"."loans"."small_business_banking_loan_id", note: "Reference to the loan being paid (for loan payments)"]
  "small_business_banking_credit_line_id" INTEGER [ref: > "small_business_banking"."credit_lines"."small_business_banking_credit_line_id", note: "Reference to the credit line being paid (for credit line payments)"]
  "credit_card_id" INTEGER [ref: > "small_business_banking"."business_card_accounts"."small_business_banking_business_card_account_id", note: "Reference to the credit card being paid (for card payments)"]
  "payment_method" VARCHAR(50) [not null, note: "Method of payment (ACH, wire, internal transfer, check)"]
  "payment_type" VARCHAR(50) [not null, note: "Type of payment (principal, interest, fees, or combination)"]
  "amount" DECIMAL(18,2) [not null, note: "Payment amount"]
  "principal_portion" DECIMAL(18,2) [note: "Portion of payment applied to principal"]
  "interest_portion" DECIMAL(18,2) [note: "Portion of payment applied to interest"]
  "fees_portion" DECIMAL(18,2) [note: "Portion of payment applied to fees"]
  "payment_date" DATE [not null, note: "Date the payment was made or scheduled"]
  "effective_date" DATE [note: "Date the payment is applied to the account"]
  "status" VARCHAR(20) [not null, default: "pending", note: "Status of the payment (pending, processed, failed)"]
  "external_reference" VARCHAR(100) [note: "External reference number for the payment"]
  "memo" VARCHAR(255) [note: "Additional payment information or notes"]

  note: "Tracks payments made against loans, credit lines, credit cards, and between accounts"
}

Table "small_business_banking"."documents" {
  "small_business_banking_document_id" SERIAL [pk, increment, note: "Unique identifier for each document record"]
  "small_business_banking_business_id" INTEGER [not null, ref: > "small_business_banking"."businesses"."small_business_banking_business_id", note: "Reference to the business the document belongs to"]
  "document_type" VARCHAR(50) [not null, note: "Type of document (tax return, financial statement, business license, etc.)"]
  "description" VARCHAR(255) [not null, note: "Description of the document"]
  "file_name" VARCHAR(255) [not null, note: "Original file name of the document"]
  "file_path" VARCHAR(1000) [not null, note: "Path to the stored document file"]
  "file_type" VARCHAR(50) [not null, note: "MIME type or format of the document"]
  "file_size" INTEGER [not null, note: "Size of the file in bytes"]
  "document_date" DATE [not null, note: "Date associated with the document content"]
  "upload_date" DATE [not null, note: "Date the document was uploaded"]
  "expiration_date" DATE [note: "Date when the document expires (if applicable)"]
  "status" VARCHAR(20) [not null, default: "active", note: "Status of the document (active, archived, expired)"]
  "created_by_id" INTEGER [ref: > enterprise.associates.enterprise_associate_id, note: "User that created the document record"]

  note: "Stores metadata about business documents with references to their file locations"
}

Table "small_business_banking"."regulatory_reports" {
  "small_business_banking_report_id" SERIAL [pk, increment, note: "Unique identifier for each regulatory report"]
  "report_type" VARCHAR(50) [not null, note: "Type of regulatory report (CRA, HMDA, BSA, etc.)"]
  "period_start_date" DATE [not null, note: "Start date of the reporting period"]
  "period_end_date" DATE [not null, note: "End date of the reporting period"]
  "due_date" DATE [not null, note: "Date when the report is due to be submitted"]
  "status" VARCHAR(20) [not null, default: "pending", note: "Status of the report (pending, in progress, submitted, accepted, rejected)"]
  "regulatory_agency" VARCHAR(50) [not null, note: "Agency the report is submitted to (FDIC, Federal Reserve, CFPB, etc.)"]
  "report_owner" INTEGER [not null, ref: > "enterprise"."associates"."enterprise_associate_id", note: "Department or individual responsible for the report"]
  "file_specification_version" VARCHAR(20) [note: "Version of the regulatory reporting specification"]
  "notes" TEXT [note: "Additional information about the report"]

  note: "Tracks required regulatory reports related to small business banking"
}

Table "small_business_banking"."report_submissions" {
  "small_business_banking_submission_id" SERIAL [pk, increment, note: "Unique identifier for each report submission"]
  "small_business_banking_report_id" INTEGER [not null, ref: > "small_business_banking"."regulatory_reports"."small_business_banking_report_id", note: "Reference to the regulatory report"]
  "submission_date" TIMESTAMPTZ [not null, note: "Date and time of submission"]
  "submission_method" VARCHAR(50) [not null, note: "Method of submission (portal, API, mail, etc.)"]
  "confirmation_number" VARCHAR(100) [note: "Confirmation number received upon submission"]
  "submitted_by_id" INTEGER [not null, ref: > "enterprise"."associates"."enterprise_associate_id", note: "Person who submitted the report"]
  "submission_file_path" VARCHAR(500) [note: "Path to the submitted file"]
  "response_date" TIMESTAMPTZ [note: "Date and time of regulator response"]
  "response_status" VARCHAR(20) [note: "Status of the regulator's response (accepted, rejected, need more info)"]
  "response_details" TEXT [note: "Details of the regulator's response"]

  note: "Records submissions of regulatory reports to authorities"
}

Table "small_business_banking"."regulatory_findings" {
  "small_business_banking_finding_id" SERIAL [pk, increment, note: "Unique identifier for each regulatory finding"]
  "small_business_banking_report_id" INTEGER [ref: > "small_business_banking"."regulatory_reports"."small_business_banking_report_id", note: "Associated regulatory report if applicable"]
  "small_business_banking_business_id" INTEGER [ref: > "small_business_banking"."businesses"."small_business_banking_business_id", note: "Associated business if finding is related to a specific customer"]
  "finding_date" DATE [not null, note: "Date the finding was identified or received"]
  "source" VARCHAR(50) [not null, note: "Source of the finding (exam, self-assessment, regulator, etc.)"]
  "finding_type" VARCHAR(50) [not null, note: "Type of finding (violation, concern, observation)"]
  "severity" VARCHAR(20) [not null, note: "Severity level (high, medium, low)"]
  "description" TEXT [not null, note: "Detailed description of the finding"]
  "regulation_reference" VARCHAR(100) [note: "Reference to specific regulation or law"]
  "corrective_action_required" BOOLEAN [not null, default: true, note: "Whether corrective action is required"]
  "corrective_action_description" TEXT [note: "Description of required corrective action"]
  "due_date" DATE [note: "Deadline for corrective action"]
  "responsible_party" INTEGER [ref: > "enterprise"."associates"."enterprise_associate_id", note: "Department or individual responsible for resolution"]
  "status" VARCHAR(20) [not null, default: "open", note: "Status of the finding (open, in progress, resolved, validated)"]
  "resolution_date" DATE [note: "Date when the finding was resolved"]
  "resolution_description" TEXT [note: "Description of how the finding was resolved"]

  note: "Tracks regulatory findings, violations, and corrective actions"
}

Table "small_business_banking"."compliance_cases" {
  "small_business_banking_case_id" SERIAL [pk, increment, note: "Unique identifier for each compliance case"]
  "small_business_banking_business_id" INTEGER [not null, ref: > "small_business_banking"."businesses"."small_business_banking_business_id", note: "Reference to the business"]
  "case_type" VARCHAR(50) [not null, note: "Type of compliance case (AML, KYC, fraud, fair lending, etc.)"]
  "opened_date" DATE [not null, note: "Date the case was opened"]
  "priority" VARCHAR(20) [not null, default: "medium", note: "Priority level (high, medium, low)"]
  "status" VARCHAR(20) [not null, default: "open", note: "Status of the case (open, in review, closed)"]
  "description" TEXT [not null, note: "Description of the compliance case"]
  "assigned_to" INTEGER [ref: > "enterprise"."associates"."enterprise_associate_id", note: "Person or team assigned to the case"]
  "source" VARCHAR(50) [not null, note: "Source that initiated the case (system alert, manual review, exam)"]
  "resolution" TEXT [note: "Description of the resolution"]
  "closed_date" DATE [note: "Date the case was closed"]
  "escalated" BOOLEAN [not null, default: false, note: "Whether the case was escalated"]
  "escalation_date" DATE [note: "Date of escalation if applicable"]
  "escalation_reason" TEXT [note: "Reason for escalation"]

  note: "Tracks compliance cases related to small business accounts"
}

Table "small_business_banking"."compliance_requirements" {
  "small_business_banking_requirement_id" SERIAL [pk, increment, note: "Unique identifier for each compliance requirement"]
  "requirement_name" VARCHAR(100) [not null, note: "Name of the compliance requirement"]
  "regulation" VARCHAR(100) [not null, note: "Associated regulation or law"]
  "regulatory_authority" VARCHAR(50) [not null, note: "Authority that enforces the requirement"]
  "description" TEXT [not null, note: "Detailed description of the requirement"]
  "business_impact" TEXT [not null, note: "How the requirement impacts business banking"]
  "effective_date" DATE [not null, note: "Date when the requirement became effective"]
  "end_date" DATE [note: "Date when the requirement expires (if applicable)"]
  "requirement_owner" INTEGER [not null, ref: > "enterprise"."associates"."enterprise_associate_id", note: "Department or role responsible for compliance"]
  "verification_frequency" VARCHAR(20) [not null, note: "How often compliance is verified (daily, monthly, quarterly, annual)"]
  "verification_procedure" TEXT [note: "Description of the verification procedure"]
  "control_measures" TEXT [note: "Measures in place to ensure compliance"]
  "is_active" BOOLEAN [not null, default: true, note: "Whether this requirement is currently active"]

  note: "Catalogs compliance requirements affecting small business banking"
}

Table "small_business_banking"."business_risk_assessments" {
  "small_business_banking_assessment_id" SERIAL [pk, increment, note: "Unique identifier for each risk assessment"]
  "small_business_banking_business_id" INTEGER [not null, ref: > "small_business_banking"."businesses"."small_business_banking_business_id", note: "Reference to the business being assessed"]
  "assessment_date" DATE [not null, note: "Date of the risk assessment"]
  "assessment_type" VARCHAR(50) [not null, note: "Type of assessment (AML, credit, operational, etc.)"]
  "conducted_by_id" INTEGER [not null, ref: > "enterprise"."associates"."enterprise_associate_id", note: "Person or team that conducted the assessment"]
  "methodology" TEXT [not null, note: "Methodology used for the assessment"]
  "industry_risk_score" INTEGER [not null, note: "Risk score based on industry (1-5 scale)"]
  "geographic_risk_score" INTEGER [not null, note: "Risk score based on geographic location (1-5 scale)"]
  "customer_risk_score" INTEGER [not null, note: "Risk score based on customer attributes (1-5 scale)"]
  "transaction_risk_score" INTEGER [not null, note: "Risk score based on transaction patterns (1-5 scale)"]
  "product_risk_score" INTEGER [not null, note: "Risk score based on products used (1-5 scale)"]
  "overall_risk_score" INTEGER [not null, note: "Combined overall risk score (1-5 scale)"]
  "risk_rating" VARCHAR(20) [not null, note: "Overall risk rating (low, medium, high)"]
  "rationale" TEXT [not null, note: "Rationale for the risk scores and rating"]
  "mitigating_factors" TEXT [note: "Factors that mitigate the identified risks"]
  "recommended_actions" TEXT [note: "Actions recommended to address risks"]
  "next_review_date" DATE [not null, note: "Date when the next assessment should be conducted"]

  note: "Stores risk assessments performed on small business customers"
}

Table "small_business_banking"."loan_fair_lending" {
  "small_business_banking_lending_record_id" SERIAL [pk, increment, note: "Unique identifier for each fair lending record"]
  "small_business_banking_loan_id" INTEGER [not null, ref: > "small_business_banking"."loans"."small_business_banking_loan_id", note: "Reference to the loan"]
  "small_business_banking_business_id" INTEGER [not null, ref: > "small_business_banking"."businesses"."small_business_banking_business_id", note: "Reference to the business"]
  "application_date" DATE [not null, note: "Date the loan application was received"]
  "decision_date" DATE [not null, note: "Date of the credit decision"]
  "census_tract" VARCHAR(11) [note: "Census tract of the business location"]
  "msa_md" VARCHAR(5) [note: "Metropolitan Statistical Area/Metropolitan Division code"]
  "reported_revenue" DECIMAL(18,2) [not null, note: "Gross annual revenue of the business as reported"]
  "loan_type" VARCHAR(50) [not null, note: "Type of loan (term loan, line of credit, etc.)"]
  "loan_purpose" VARCHAR(100) [not null, note: "Purpose of the loan"]
  "loan_amount" DECIMAL(18,2) [not null, note: "Requested loan amount"]
  "amount_approved" DECIMAL(18,2) [note: "Approved loan amount (if applicable)"]
  "action_taken" VARCHAR(20) [not null, note: "Action taken (approved, denied, withdrawn, etc.)"]
  "denial_reason_1" VARCHAR(50) [note: "Primary reason for denial (if applicable)"]
  "denial_reason_2" VARCHAR(50) [note: "Secondary reason for denial (if applicable)"]
  "denial_reason_3" VARCHAR(50) [note: "Tertiary reason for denial (if applicable)"]
  "denial_reason_4" VARCHAR(50) [note: "Quaternary reason for denial (if applicable)"]
  "rate_spread" DECIMAL(6,4) [note: "Difference between APR and average prime offer rate"]
  "naics_code" VARCHAR(6) [note: "North American Industry Classification System code"]
  "number_of_employees" INTEGER [note: "Number of business employees"]
  "minority_owned" BOOLEAN [note: "Whether business is minority-owned"]
  "women_owned" BOOLEAN [note: "Whether business is women-owned"]
  "lgbtq_owned" BOOLEAN [note: "Whether business is LGBTQ-owned"]
  "veteran_owned" BOOLEAN [note: "Whether business is veteran-owned"]
  "exemption_claimed" BOOLEAN [not null, default: false, note: "Whether an exemption from reporting was claimed"]
  "exemption_reason" VARCHAR(100) [note: "Reason for reporting exemption (if applicable)"]

  note: "Captures data required for small business lending fair lending analysis and reporting"
}

Table "small_business_banking"."credit_decisions" {
  "small_business_banking_decision_id" SERIAL [pk, increment, note: "Unique identifier for each credit decision"]
  "small_business_banking_business_id" INTEGER [not null, ref: > "small_business_banking"."businesses"."small_business_banking_business_id", note: "Reference to the business"]
  "product_type" VARCHAR(50) [not null, note: "Type of credit product (loan, line of credit, card)"]
  "application_id" VARCHAR(50) [not null, note: "Application identifier"]
  "decision_date" TIMESTAMPTZ [not null, note: "Date and time of the decision"]
  "decision_type" VARCHAR(20) [not null, note: "Type of decision (automated, manual, hybrid)"]
  "decision_outcome" VARCHAR(20) [not null, note: "Outcome of the decision (approved, declined, counter-offer)"]
  "decision_factors" TEXT [note: "Factors that influenced the decision"]
  "credit_score" INTEGER [note: "Credit score used in decision"]
  "credit_score_model" VARCHAR(50) [note: "Model used for credit score"]
  "annual_revenue" DECIMAL(18,2) [note: "Annual revenue considered in decision"]
  "time_in_business" INTEGER [note: "Time in business (months) considered in decision"]
  "collateral_value" DECIMAL(18,2) [note: "Value of collateral (if applicable)"]
  "debt_service_coverage_ratio" DECIMAL(6,4) [note: "Debt service coverage ratio calculated"]
  "loan_to_value_ratio" DECIMAL(6,4) [note: "Loan to value ratio (if applicable)"]
  "exception_made" BOOLEAN [not null, default: false, note: "Whether an exception to policy was made"]
  "exception_reason" TEXT [note: "Reason for the exception (if applicable)"]
  "exception_approver" INTEGER [ref: > "enterprise"."associates"."enterprise_associate_id", note: "Person who approved the exception"]
  "decision_notes" TEXT [note: "Additional notes about the decision"]
  "decision_made_by_id" INTEGER [not null, ref: > "enterprise"."associates"."enterprise_associate_id", note: "Person or system that made the decision"]

  note: "Documents credit decisions for regulatory review and fair lending analysis"
}

Table "small_business_banking"."adverse_action_notices" {
  "small_business_banking_notice_id" SERIAL [pk, increment, note: "Unique identifier for each adverse action notice"]
  "small_business_banking_business_id" INTEGER [not null, ref: > "small_business_banking"."businesses"."small_business_banking_business_id", note: "Reference to the business"]
  "small_business_banking_decision_id" INTEGER [not null, ref: > "small_business_banking"."credit_decisions"."small_business_banking_decision_id", note: "Reference to the credit decision"]
  "notice_date" DATE [not null, note: "Date the notice was generated"]
  "delivery_method" VARCHAR(20) [not null, note: "Method of delivery (mail, email, etc.)"]
  "delivery_address" VARCHAR(200) [not null, note: "Address or email where notice was sent"]
  "delivery_date" DATE [not null, note: "Date the notice was delivered"]
  "primary_reason" VARCHAR(100) [not null, note: "Primary reason for adverse action"]
  "secondary_reasons" TEXT [note: "Secondary reasons for adverse action"]
  "credit_score_disclosed" BOOLEAN [not null, default: false, note: "Whether credit score was disclosed"]
  "credit_score" INTEGER [note: "Credit score disclosed (if applicable)"]
  "score_factors" TEXT [note: "Factors affecting the credit score"]
  "score_range_low" INTEGER [note: "Low end of score range"]
  "score_range_high" INTEGER [note: "High end of score range"]
  "ecoa_notice_included" BOOLEAN [not null, default: true, note: "Whether ECOA notice was included"]
  "fcra_notice_included" BOOLEAN [not null, default: true, note: "Whether FCRA notice was included"]
  "right_to_appraisal_notice" BOOLEAN [not null, default: false, note: "Whether right to appraisal notice was included"]
  "template_version" VARCHAR(20) [not null, note: "Version of the notice template used"]
  "generated_by_id" INTEGER [not null, ref: > "enterprise"."associates"."enterprise_associate_id", note: "Person or system that generated the notice"]
  "notice_file_path" VARCHAR(500) [note: "Path to stored copy of the notice"]

  note: "Tracks adverse action notices sent to declined applicants"
}

Table "small_business_banking"."business_due_diligence" {
  "small_business_banking_due_diligence_id" SERIAL [pk, increment, note: "Unique identifier for each due diligence record"]
  "small_business_banking_business_id" INTEGER [not null, ref: > "small_business_banking"."businesses"."small_business_banking_business_id", note: "Reference to the business"]
  "diligence_type" VARCHAR(20) [not null, note: "Type of due diligence (initial, ongoing, enhanced)"]
  "diligence_date" DATE [not null, note: "Date the due diligence was performed"]
  "performed_by_id" INTEGER [not null, ref: > "enterprise"."associates"."enterprise_associate_id", note: "Person who performed the due diligence"]
  "business_verified" BOOLEAN [not null, note: "Whether business identity was verified"]
  "verification_method" VARCHAR(100) [not null, note: "Method used to verify business (documents, database, etc.)"]
  "legal_structure_verified" BOOLEAN [not null, note: "Whether legal structure was verified"]
  "business_documents_reviewed" TEXT [note: "List of business documents reviewed"]
  "address_verified" BOOLEAN [not null, note: "Whether business address was verified"]
  "tin_verified" BOOLEAN [not null, note: "Whether tax ID was verified"]
  "high_risk_factors" TEXT [note: "High-risk factors identified during diligence"]
  "expected_activity" TEXT [note: "Description of expected account activity"]
  "actual_activity_consistent" BOOLEAN [note: "Whether actual activity is consistent with expected"]
  "screening_results" TEXT [note: "Results of screening against watchlists, PEPs, etc."]
  "site_visit_conducted" BOOLEAN [not null, default: false, note: "Whether a site visit was conducted"]
  "site_visit_date" DATE [note: "Date of site visit (if applicable)"]
  "site_visit_notes" TEXT [note: "Notes from site visit"]
  "risk_rating" VARCHAR(20) [not null, note: "Risk rating assigned (low, medium, high)"]
  "review_frequency" VARCHAR(20) [not null, note: "Frequency of ongoing reviews (monthly, quarterly, annual)"]
  "next_review_date" DATE [not null, note: "Date when next review is due"]
  "approval_status" VARCHAR(20) [not null, note: "Status of approval (pending, approved, rejected)"]
  "approved_by_id" INTEGER [ref: > "enterprise"."associates"."enterprise_associate_id", note: "Person who approved the due diligence"]
  "approval_date" DATE [note: "Date of approval"]
  "notes" TEXT [note: "Additional notes about the due diligence"]

  note: "Documents the due diligence process for business customers"
}

Table "small_business_banking"."beneficial_owner_verification" {
  "small_business_banking_verification_id" SERIAL [pk, increment, note: "Unique identifier for each verification record"]
  "small_business_banking_business_id" INTEGER [not null, ref: > "small_business_banking"."businesses"."small_business_banking_business_id", note: "Reference to the business"]
  "small_business_banking_business_owner_id" INTEGER [not null, ref: > "small_business_banking"."business_owners"."small_business_banking_business_owner_id", note: "Reference to the business owner"]
  "verification_date" DATE [not null, note: "Date the verification was performed"]
  "performed_by_id" INTEGER [not null, ref: > "enterprise"."associates"."enterprise_associate_id", note: "Person who performed the verification"]
  "ownership_percentage_verified" BOOLEAN [not null, note: "Whether ownership percentage was verified"]
  "verification_method" VARCHAR(50) [not null, note: "Method used to verify beneficial ownership"]
  "id_type" VARCHAR(50) [note: "Type of ID provided (driver's license, passport, etc.)"]
  "id_number" VARCHAR(100) [note: "ID number (masked for security)"]
  "id_issuing_country" VARCHAR(2) [note: "Country that issued the ID"]
  "id_expiration_date" DATE [note: "Expiration date of the ID"]
  "address_verified" BOOLEAN [not null, note: "Whether address was verified"]
  "ssn_verified" BOOLEAN [note: "Whether SSN was verified (for US persons)"]
  "tin_verified" BOOLEAN [note: "Whether TIN was verified (for non-US persons)"]
  "screening_conducted" BOOLEAN [not null, default: true, note: "Whether screening was conducted"]
  "screening_date" DATE [note: "Date of screening"]
  "screening_system" VARCHAR(50) [note: "System used for screening"]
  "screening_results" TEXT [note: "Results of screening"]
  "pep_status" BOOLEAN [not null, default: false, note: "Whether person is a politically exposed person"]
  "sanctions_hit" BOOLEAN [not null, default: false, note: "Whether person appears on sanctions lists"]
  "adverse_media_found" BOOLEAN [not null, default: false, note: "Whether adverse media was found"]
  "certification_received" BOOLEAN [not null, note: "Whether certification of beneficial ownership was received"]
  "certification_date" DATE [note: "Date of certification"]
  "recertification_due_date" DATE [note: "Date when recertification is due"]
  "verification_status" VARCHAR(20) [not null, default: "pending", note: "Status of verification (pending, completed, exception)"]
  "exception_reason" TEXT [note: "Reason for exception (if applicable)"]
  "notes" TEXT [note: "Additional notes about the verification"]

  note: "Tracks verification of beneficial owners as required by FinCEN"
}

Table "small_business_banking"."suspicious_activity_reports" {
  "small_business_banking_sar_id" SERIAL [pk, increment, note: "Unique identifier for each SAR"]
  "small_business_banking_business_id" INTEGER [ref: > "small_business_banking"."businesses"."small_business_banking_business_id", note: "Reference to the business if applicable"]
  "filing_date" DATE [not null, note: "Date the SAR was filed"]
  "activity_start_date" DATE [not null, note: "Date when suspicious activity began"]
  "activity_end_date" DATE [not null, note: "Date when suspicious activity ended"]
  "filing_institution" VARCHAR(100) [not null, note: "Name of filing institution"]
  "suspicious_activity_type" VARCHAR(100) [not null, note: "Type of suspicious activity"]
  "suspicious_activity_description" TEXT [not null, note: "Detailed description of suspicious activity"]
  "amount_involved" DECIMAL(18,2) [not null, note: "Total amount involved in suspicious activity"]
  "structuring_involved" BOOLEAN [not null, default: false, note: "Whether structuring was involved"]
  "terrorist_financing_involved" BOOLEAN [not null, default: false, note: "Whether terrorist financing was involved"]
  "fraud_involved" BOOLEAN [not null, default: false, note: "Whether fraud was involved"]
  "money_laundering_involved" BOOLEAN [not null, default: false, note: "Whether money laundering was involved"]
  "insider_abuse_involved" BOOLEAN [not null, default: false, note: "Whether insider abuse was involved"]
  "other_involved" BOOLEAN [not null, default: false, note: "Whether other suspicious activity was involved"]
  "other_description" TEXT [note: "Description of other suspicious activity"]
  "law_enforcement_contacted" BOOLEAN [not null, default: false, note: "Whether law enforcement was contacted"]
  "law_enforcement_agency" VARCHAR(100) [note: "Agency contacted (if applicable)"]
  "law_enforcement_contact_date" DATE [note: "Date of law enforcement contact"]
  "law_enforcement_contact_name" VARCHAR(100) [note: "Name of law enforcement contact"]
  "account_closed" BOOLEAN [not null, default: false, note: "Whether account was closed"]
  "account_closing_date" DATE [note: "Date account was closed (if applicable)"]
  "prepared_by_id" INTEGER [not null, ref: > "enterprise"."associates"."enterprise_associate_id", note: "Person who prepared the SAR"]
  "approved_by_id" INTEGER [not null, ref: > "enterprise"."associates"."enterprise_associate_id", note: "Person who approved the SAR"]
  "bsa_officer_signature" INTEGER [not null, ref: > "enterprise"."associates"."enterprise_associate_id", note: "Signature of BSA officer"]
  "fincen_acknowledgment" VARCHAR(50) [note: "Acknowledgment received from FinCEN"]
  "sar_file_path" VARCHAR(500) [note: "Path to stored copy of the SAR"]
  "supporting_documentation" TEXT [note: "List of supporting documentation"]

  note: "Tracks Suspicious Activity Reports filed with FinCEN"
}

TableGroup BusinessCore {
  "small_business_banking"."businesses"
  "small_business_banking"."business_owners"
}

TableGroup AccountManagement {
  "small_business_banking"."accounts"
  "small_business_banking"."products"
  "small_business_banking"."account_signatories"
}

TableGroup LendingProducts {
  "small_business_banking"."loans"
  "small_business_banking"."credit_lines"
  "small_business_banking"."collateral"
  "small_business_banking"."loan_collateral"
}

TableGroup CreditCardIntegration {
  "small_business_banking"."business_card_accounts"
  "small_business_banking"."business_card_users"
  "small_business_banking"."business_expense_categories"
  "small_business_banking"."business_transaction_categories"
}

TableGroup TransactionAndDocuments {
  "small_business_banking"."transactions"
  "small_business_banking"."payments"
  "small_business_banking"."documents"
}

// Core Regulatory Groups
TableGroup RegulatoryReporting {
  "small_business_banking"."regulatory_reports"
  "small_business_banking"."report_submissions"
  "small_business_banking"."regulatory_findings"
}

TableGroup BusinessCompliance {
  "small_business_banking"."compliance_cases"
  "small_business_banking"."compliance_requirements"
  "small_business_banking"."business_risk_assessments"
}

TableGroup LendingCompliance {
  "small_business_banking"."loan_fair_lending"
  "small_business_banking"."credit_decisions"
  "small_business_banking"."adverse_action_notices"
}

TableGroup AMLAndKYC {
  "small_business_banking"."business_due_diligence"
  "small_business_banking"."beneficial_owner_verification"
  "small_business_banking"."suspicious_activity_reports"
}

//
// SECURITY
//

//

Table "security"."identity_roles" {
  "security_identity_role_id" UUID [not null, pk, note: "Reference to the identity role assignment"]
  "security_identity_id" UUID [not null, ref: > "security"."identities"."security_identity_id", note: "Reference to the identity"]
  "security_role_id" UUID [not null, ref: > "security"."roles"."security_role_id", note: "Reference to the role"]
  "start_date" TIMESTAMPTZ [default: `CURRENT_TIMESTAMP`, note: "When the role became effective"]
  "end_date" TIMESTAMPTZ [note: "When the role was no longer effective"]
  "assigned_by_id" INTEGER [ref: > "enterprise"."associates"."enterprise_associate_id", note: "Who assigned the role"]
  "active" BOOLEAN [not null, default: true, note: "Whether this assignment is currently active"]

  Indexes {
    security_role_id [note: "Index for faster role-based queries"]
  }

  Note: "Associates identities with roles"
}

Enum "security"."role_status" {
  ACTIVE [note: "Role is available for use and assignments are effective"]
  INACTIVE [note: "Role is temporarily unavailable; existing assignments are suspended"]
  DEPRECATED [note: "Role is being phased out; no new assignments allowed"]
  RETIRED [note: "Role is no longer in use; all assignments are ineffective"]
  DRAFT [note: "Role is still being defined and not ready for use"]
}

Table "security"."roles" {
  "security_role_id" UUID [pk, note: "Unique identifier for the role"]
  "role_name" VARCHAR(255) [not null, note: "Internal name for the role"]
  "display_name" VARCHAR(255) [note: "User-friendly name for the role"]
  "description" TEXT [note: "Description of the role's purpose and scope"]
  "status" security.role_status [not null, default: "ACTIVE", note: "Current status of the role"]
  "managing_application_id" UUID [ref: > "app_mgmt"."applications"."app_mgmt_application_id", note: "Application that manages this role"]
  "owner_id" INTEGER [ref: > "enterprise"."associates"."enterprise_associate_id", note: "Who owns/manages this role"]
  "created_at" TIMESTAMPTZ [default: `CURRENT_TIMESTAMP`, note: "When the role was created"]
  "created_by_id" INTEGER [ref: > "enterprise"."associates"."enterprise_associate_id", note: "Who created the role"]

  Indexes {
    role_name [note: "Index for faster role lookups"]
    managing_application_id [note: "Index for faster lookup by managing application"]
    status [note: "Index for filtering by status"]
  }

  Note: "Defines roles that can be assigned to identities"
}

Table "security"."role_entitlements" {
  "security_role_entitlement_id" UUID [not null, pk, note: "Reference to the role entitlement pair"]
  "security_role_id" UUID [not null, ref: > "security"."roles"."security_role_id", note: "Reference to the role"]
  "security_entitlement_id" UUID [not null, ref: > "security"."enhanced_entitlements"."security_entitlement_id", note: "Reference to the entitlement"]
  "created_at" TIMESTAMPTZ [not null, note: "When the entitlement was added to the role"]
  "created_by_id" INTEGER [ref: > "enterprise"."associates"."enterprise_associate_id", note: "Who added the entitlement to the role"]
  "updated_by_id" INTEGER [ref: > "enterprise"."associates"."enterprise_associate_id", note: "Who added the entitlement to the role"]
  "started_at" TIMESTAMPTZ [not null, note: "When the entitlement became effective"]
  "ended_at" TIMESTAMPTZ [note: "When the entitlement was no longer effective"]
  "active" BOOL [note: "Incicates that the entitlement is effective at this moment"]

  Indexes {
    security_entitlement_id [note: "Index for faster entitlement-based queries"]
  }

  Note: "Maps roles to their constituent entitlements"
}

Enum "security"."entitlement_status" {
  ACTIVE [note: "Entitlement is currently active and can be used"]
  INACTIVE [note: "Entitlement is disabled and cannot be used"]
  DEPRECATED [note: "Entitlement is being phased out and should not be assigned to new roles"]
  DRAFT [note: "Entitlement is still being defined and is not ready for use"]
}

Table "security"."enhanced_entitlements" {
  "security_entitlement_id" UUID [pk, note: "Unique identifier for the entitlement"]
  "entitlement_name" VARCHAR(255) [not null, note: "Internal name for the entitlement"]
  "display_name" VARCHAR(255) [note: "User-friendly name for the entitlement"]
  "description" TEXT [note: "Description of what the entitlement grants access to"]
  "status" "security"."entitlement_status" [not null, default: "ACTIVE", note: "Current status of the entitlement"]
  "managing_application_id" UUID [ref: > "app_mgmt"."applications"."app_mgmt_application_id", note: "Application that manages this entitlement"]
  "created_at" TIMESTAMPTZ [default: `CURRENT_TIMESTAMP`, note: "When the entitlement was created"]
  "created_by_id" INTEGER [ref: > "enterprise"."associates"."enterprise_associate_id", note: "Who created the entitlement"]

  Indexes {
    entitlement_name [note: "Index for faster entitlement lookups"]
    managing_application_id [note: "Index for faster lookup by managing application"]
    status [note: "Index for filtering by status"]
  }

  Note: "Defines granular entitlements that can be granted to roles"
}

Table "security"."entitlement_resources" {
  "security_entitlement_resource_id" UUID [pk, note: "Unique identifier for this entitlement-resource relationship"]
  "security_entitlement_id" UUID [not null, ref: > "security"."enhanced_entitlements"."security_entitlement_id", note: "Reference to the entitlement"]
  "security_resource_id" UUID [not null, ref: > "security"."resource_definitions"."security_resource_id", note: "Reference to the resource"]
  "permission_type" "security"."permission_type" [not null, note: "Type of permission granted on the resource"]
  "context_conditions" VARCHAR(1000) [note: "Context conditions that restrict when this entitlement is applicable"]
  "resource_details" VARCHAR(1000) [note: "Resource-specific details like column filters, row filters, access parameters"]
  "created_at" TIMESTAMPTZ [default: `CURRENT_TIMESTAMP`, note: "When the relationship was created"]
  "created_by_id" INTEGER [ref: > "enterprise"."associates"."enterprise_associate_id", note: "Who created the relationship"]

  Indexes {
    (security_entitlement_id, security_resource_id, permission_type) [unique, note: "Ensures unique resource-permission combinations per entitlement"]
    security_resource_id [note: "Index for faster resource-based queries"]
  }

  Note: "Maps entitlements to resources with specific permission types and contexts"
}

//

Enum "security"."resource_type" {
  DATA [note: "Database tables, views, columns, and other data elements"]
  APPLICATION [note: "Application functions, screens, and features"]
  HOST [note: "Servers, workstations, and similar systems"]
  NETWORK_DEVICE [note: "Network devices like routers, switches, firewalls"]
}

Enum "security"."permission_type" {
  READ [note: "Permission to view or read a resource"]
  MASKED [note: "Permission to partially view or read a resource"]
  WRITE [note: "Permission to create or modify a resource"]
  DELETE [note: "Permission to delete a resource"]
  EXECUTE [note: "Permission to run or execute a resource"]
  ADMIN [note: "Administrative permission over a resource"]
}

Enum "security"."sync_status" {
  PENDING [note: "Synchronization pending"]
  IN_PROGRESS [note: "Synchronization in progress"]
  COMPLETED [note: "Synchronization completed successfully"]
  FAILED [note: "Synchronization failed"]
}


Table "security"."resource_definitions" {
  "security_resource_id" UUID [pk, note: 'Unique identifier for the resource']
  "resource_name" VARCHAR(255) [not null, note: 'Name of the resource']
  "resource_type" "security"."resource_type" [not null, note: 'Type of resource (DATA, APPLICATION, HOST, NETWORK_DEVICE)']
  "resource_identifier" VARCHAR(500) [not null, note: 'Unique identifier for the resource (table name, API endpoint, hostname, IP address, etc.)']
  "application_id" UUID [null, ref: > "app_mgmt"."applications"."app_mgmt_application_id", note: 'Owner application that manages this resource (for APPLICATION and DATA types)']
  "host_id" UUID [null, ref: > "security"."hosts"."security_host_id", note: 'Host where the resource is located (for HOST types)']
  "network_device_id" INET [null, ref: > "security"."devices"."security_device_id", note: 'Network device where the resource is located (for NETWORK_DEVICE types)']
  "description" TEXT [note: 'Description of the resource']
  "created_at" TIMESTAMPTZ [default: `CURRENT_TIMESTAMP`, note: 'When the resource definition was created']
  "created_by_id" INTEGER [ref: > "enterprise"."associates"."enterprise_associate_id", note: 'Who created the resource definition']

  Indexes {
    resource_identifier [note: 'Index for faster resource lookups']
  }

  Note: 'Defines resources that can be secured through entitlements'
}

Table "security"."devices" {
  "security_device_id" INET [not null, pk, note: 'The unique IP address of the device. Serves as the primary key.']
  "device_type" VARCHAR(50) [not null, note: 'The type of the device (e.g., router, server, workstation).']
  "subnet" VARCHAR(50) [note: 'The subnet the device belongs to.']
  "hostname" VARCHAR(100) [note: 'The hostname of the device.']
  "created_at" TIMESTAMP(6) [default: `CURRENT_TIMESTAMP`, note: 'The timestamp when the device record was created.']
  "updated_at" TIMESTAMP(6) [default: `CURRENT_TIMESTAMP`, note: 'The timestamp when the device record was last updated.']

  Note: 'Table storing information about network devices.'
}

Enum "security"."tcp_flag_type" {
  SYN
  ACK
  FIN
  RST
  PSH
  URG
  ECE
  CWR
}

Table "security"."network_events" {
  "security_network_event_id" BIGSERIAL [not null, increment, pk, note: 'Unique identifier for the network event. Automatically incrementing.']
  "timestamp" TIMESTAMP(6) [not null, note: 'Timestamp when the network event occurred.']
  "source_ip" INET [not null, note: 'Source IP address of the network event.']
  "source_port" INTEGER [not null, note: 'Source port of the network event.']
  "dest_ip" INET [not null, note: 'Destination IP address of the network event.']
  "dest_port" INTEGER [not null, note: 'Destination port of the network event.']
  "protocol" security.network_protocols [not null, note: 'Network protocol used (e.g., TCP, UDP, ICMP).']
  "status" VARCHAR(50) [not null, note: 'Status of the network event (e.g., success, failure, blocked).']
  "tcp_flag" security.tcp_flag_type [note: 'TCP flags associated with the event, if applicable.']
  "sequence" BIGINT [note: 'TCP sequence number, if applicable.']
  "ack" BIGINT [note: 'TCP acknowledgment number, if applicable.']
  "window_size" INTEGER [note: 'TCP window size, if applicable.']
  "length" INTEGER [not null, default: 0, note: 'Length of the data packet in bytes.']
  "bytes_sent" INTEGER [not null, default: 0, note: 'Number of bytes sent during the event.']
  "bytes_received" INTEGER [not null, default: 0, note: 'Number of bytes received during the event.']
  "security_device_id" INET [not null, ref: > security.devices.security_device_id, note: 'IP address of the device involved in the event (likely the device that logged the event)']
  "log_message" TEXT [note: 'Detailed log message associated with the network event.']
  "created_at" TIMESTAMP(6) [note: 'Timestamp when the event record was created.']

  Note: 'Table storing detailed information about network events for security monitoring and analysis.'
}

Table "security"."policies" {
  "security_policy_id" UUID [not null, pk, note: 'Unique identifier for the policy.']
  "name" VARCHAR(200) [not null, unique, note: 'Name of the policy. Must be unique.']
  "description" TEXT [not null, note: 'Detailed description of the policy.']
  "created_by_id" INTEGER [ref: > enterprise.associates.enterprise_associate_id, note: 'Who created the policy']
  "updated_by_id" INTEGER [ref: > enterprise.associates.enterprise_associate_id, note: 'Who updated the policy']
  "created_at" TIMESTAMP(6) [default: `CURRENT_TIMESTAMP`, note: 'Timestamp when the policy was created.']
  "updated_at" TIMESTAMP(6) [default: `CURRENT_TIMESTAMP`, note: 'Timestamp when the policy was last updated.']
  "started_at" TIMESTAMP(6) [not null, note: 'Timestamp when the policy became effective.']
  "ended_at" TIMESTAMP(6) [note: 'Timestamp when the policy was no longer effective.']
  "active" BOOLEAN [default: true, note: 'Indicates whether the policy is currently active.']

  Indexes {
    name [unique, note: 'Unique index on policy name.']
  }

  Note: 'Table storing security policies and their details.'
}

Table "security"."policy_attributes" {
  "security_policy_id" UUID [not null, ref: > security.policies.security_policy_id, note: 'Foreign key referencing the policy_id in the policies table.']
  "attribute_name" VARCHAR(200) [not null, note: 'Name of the policy attribute.']
  "attribute_value" VARCHAR(200) [note: 'Value of the policy attribute.']

  Note: 'Table storing attributes associated with security policies. Allows for flexible policy configuration.'
}

Table "security"."policy_rules" {
  "security_policy_rule_id" UUID [not null, pk, note: 'Unique identifier for the policy rule.']
  "security_policy_id" UUID [ref: > security.policies.security_policy_id, note: 'Foreign key referencing the policy_id in the policies table.']
  "rule_name" VARCHAR(200) [not null, note: 'Name of the policy rule.']
  "rule_description" TEXT [not null, note: 'Detailed description of the policy rule.']

  Note: 'Table storing specific rules associated with security policies.'
}

Table "security"."accounts" {
  "security_account_id" UUID [not null, pk, note: 'Unique identifier for the account.']
  "security_identity_id" UUID [note: 'Identifier of the associated identity.', ref: > "security"."identities"."security_identity_id"]
  "name" VARCHAR(200) [note: 'Name of the account.']
  "account_id_string" VARCHAR(200) [note: 'String representation of the account ID.']
  "security_source_id" UUID [note: 'Identifier of the source system for the account.', ref: > "app_mgmt"."applications"."app_mgmt_application_id"]
  "disabled" BOOLEAN [note: 'Indicates if the account is disabled.']
  "locked" BOOLEAN [note: 'Indicates if the account is locked.']
  "privileged" BOOLEAN [note: 'Indicates if the account has privileged access.']
  "manually_correlated" BOOLEAN [note: 'Indicates if the account was manually correlated.']
  "password_last_set" TIMESTAMP(6) [note: 'Timestamp when the account password was last set.']
  "created" TIMESTAMP(6) [note: 'Timestamp when the account was created.']
  "status_update_date_time" TIMESTAMP(6) [note: 'Timestamp when the account status was last updated']

  Note: 'Table storing information about user accounts across various systems.'
}

Table "security"."governance_groups" {
  "security_governance_group_id" UUID [not null, pk, note: 'Unique identifier for the governance group.']
  "name" VARCHAR(200) [note: 'Name of the governance group.']
  "owner_id" integer [note: 'Identifier of the owner of the governance group.', ref: > enterprise.associates.enterprise_associate_id]

  Note: 'Table storing information about governance groups, used for managing access and permissions.'
}

Table "security"."iam_logins" {
  "security_login_id" UUID [not null, pk, note: 'Unique identifier for the IAM login.']
  "security_account_id" UUID [not null, ref: > "security"."accounts"."security_account_id", note: 'Identifier of the account used for the login.']
  "user_name" VARCHAR(200) [note: 'Username used for the login.']
  "login_time" TIMESTAMP(6) [not null, note: 'Timestamp when the login occurred.']
  "logout_time" TIMESTAMP(6) [note: 'Timestamp when the logout occurred.']
  "login_method" VARCHAR(200) [not null, note: 'Method used for the login.']

  Note: 'Table storing information about IAM logins, tracking user access via accounts.'
}

Enum "security"."environment" {
  production
  preproduction
  qa
  development
}

Table "security"."identities" {
  "security_identity_id" UUID [not null, pk, note: 'Unique identifier for the identity.']
  "name" VARCHAR(200) [note: 'Internal name of the identity.']
  "display_name" VARCHAR(200) [note: 'User-friendly name of the identity.']
  "owner_id" INTEGER [null, ref: > enterprise.associates.enterprise_associate_id]
  "service_account" BOOL [default: false, note: 'If false than access is considered to be on behalf of the owner, otherwise this is service account used for system to system automation']
  "environment" security.environment [note: 'Identifies access to an environment e.g production, development, etc.' ]
  "created" TIMESTAMP(6) [note: 'Timestamp when the identity was created.']
  "inactive" BOOLEAN [note: 'Indicates if the identity is inactive.']
  "status" VARCHAR(200) [note: 'Status of the identity.']
  "security_identity_profile_id" UUID [note: 'Identifier of the identity profile associated with the identity.', ref: > "security"."identity_profiles"."security_identity_profile_id"]
  "modified" TIMESTAMP(6) [note: 'Timestamp when the identity was last modified.']
  "synced" TIMESTAMP(6) [note: 'Timestamp when the identity was last synced.']
  "is_fallback_approver" BOOLEAN [note: 'Indicates if the identity is a fallback approver.']

  Note: 'Table storing information about user identities, representing individuals or entities.'
}

Enum "security"."risk_level" {
  LOW [note: 'Minimal risk, standard security controls sufficient']
  MEDIUM [note: 'Moderate risk, requires additional monitoring']
  HIGH [note: 'Significant risk, enhanced security controls required']
  CRITICAL [note: 'Highest risk level, maximum security controls and oversight required']
}

Table "security"."identity_profiles" {
  "security_identity_profile_id" UUID [not null, pk, note: 'Unique identifier for the identity profile.']
  "name" VARCHAR(200) [note: 'Name of the identity profile.']
  "description" TEXT [note: 'Detailed description of the profile and its purpose.']
  "access_review_frequency_days" INTEGER [note: 'How often accounts with this profile should be reviewed, in days.']
  "max_inactive_days" INTEGER [note: 'Maximum number of days an identity can be inactive before automatic disablement.']
  "requires_mfa" BOOLEAN [default: false, note: 'Whether multi-factor authentication is required for identities with this profile.']
  "password_expiry_days" INTEGER [note: 'Number of days before password expiration for this profile type.']
  "default_session_timeout_minutes" INTEGER [note: 'Default session timeout in minutes for identities with this profile.']
  "risk_level" security.risk_level [not null, default: "MEDIUM", note: 'Risk classification level for this profile type.']
  "created_at" TIMESTAMPTZ [default: `CURRENT_TIMESTAMP`, note: 'When the profile was created.']
  "updated_at" TIMESTAMPTZ [default: `CURRENT_TIMESTAMP`, note: 'When the profile was last updated.']

  Note: 'Table storing information about identity profiles, defining sets of attributes and rules for identities.'
}

Table "security"."file_accesses" {
  "security_file_access_id" UUID [not null, pk, note: 'Unique identifier for the file access event.']
  "security_system_id" UUID [not null, ref: > "security"."hosts"."security_host_id", note: 'Identifier of the system where the file access occurred.']
  "security_file_id" UUID [not null, ref: > "security"."files"."security_file_id", note: 'Identifier of the accessed file.']
  "access_type" VARCHAR(10) [note: 'Type of file access (e.g., read, write, execute).']
  "access_time" TIMESTAMP(6) [note: 'Timestamp when the file access occurred.']
  "security_process_execution_id" UUID [not null, ref: > "security"."process_executions"."security_process_execution_id", note: 'Identifier of the process execution that initiated the file access.']

  Note: 'Table storing information about file access events, tracking file usage and access patterns.'
}

Enum "security"."threat_level_type" {
  HIGH [note: 'Critical threat requiring immediate attention and remediation']
  MEDIUM [note: 'Significant threat requiring scheduled remediation']
  LOW [note: 'Minor threat requiring monitoring']
  INFORMATIONAL [note: 'Potential concern, no immediate action required']
  UNKNOWN [note: 'Threat level not yet determined']
}

Table "security"."file_threats" {
  "security_file_threat_hash" VARCHAR(64) [not null, pk, note: 'Hash of the file, used to identify threats.']
  "threat_level" security.threat_level_type [not null, default: "UNKNOWN", note: 'Level of threat associated with the file.']
  "threat_description" TEXT [note: 'Description of the threat associated with the file.']

  Note: 'Table storing information about file threats, linking file hashes to threat levels and descriptions.'
}

Table "security"."files" {
  "security_file_id" UUID [not null, pk, note: 'Unique identifier for the file.']
  "security_host_id" UUID [not null, ref: > "security"."hosts"."security_host_id", note: 'Identifier of the system where the file is located.']
  "file_path" TEXT [note: 'Path to the file on the system.']
  "file_hash" VARCHAR(64) [note: 'Hash of the file, used for integrity checks.']
  "file_size" BIGINT [note: 'Size of the file in bytes.']
  "last_modified" TIMESTAMP(6) [note: 'Timestamp when the file was last modified.']

  Note: 'Table storing information about files on systems, including file paths, hashes, and sizes.'
}

Table "security"."installed_applications" {
  "security_host_id" UUID [not null, pk, ref: > "security"."hosts"."security_host_id", note: 'Identifier of the system where the application is installed.']
  "app_mgmt_application_id" UUID [not null, pk, ref: > "app_mgmt"."applications"."app_mgmt_application_id", note: 'Reference to the application definition.']
  "application_version" VARCHAR(50) [note: 'Version of the installed application.']
  "installation_date" TIMESTAMP(6) [note: 'Timestamp when the application was installed.']

  Note: 'Table storing information about installed applications on servers, tracking software installations.'
}

Table "security"."network_connections" {
  "security_network_connection_id" UUID [not null, pk, note: 'Unique identifier for the network connection.']
  "security_host_id" UUID [not null, ref: > "security"."hosts"."security_host_id", note: 'Identifier of the system where the connection originated.']
  "security_process_execution_id" UUID [not null, ref: > "security"."process_executions"."security_process_execution_id", note: 'Identifier of the process execution that initiated the connection.']
  "connection_type" VARCHAR(10) [note: 'Type of network connection (e.g., TCP, UDP).']
  "protocol" security.network_protocols [note: 'Network protocol used for the connection.']
  "local_ip" INET [note: 'Local IP address of the connection.']
  "local_port" INTEGER [note: 'Local port number of the connection.']
  "remote_ip" INET [note: 'Remote IP address of the connection.']
  "remote_port" INTEGER [note: 'Remote port number of the connection.']
  "start_time" TIMESTAMP(6) [note: 'Timestamp when the connection started.']
  "end_time" TIMESTAMP(6) [note: 'Timestamp when the connection ended.']

  Note: 'Table storing information about network connections, tracking network traffic and activity.'
}

Enum security.network_protocols {
  TCP [note: 'Transmission Control Protocol. Connection-oriented and reliable. Commonly used for web servers, email, and other services.']
  UDP [note: 'User Datagram Protocol. Connectionless and faster. Commonly used for DNS, VoIP, and streaming.']
  ICMP [note: 'Internet Control Message Protocol. Used for network diagnostics (ping, traceroute). While not a transport protocol, it\'s relevant for network security.']
  HTTP2 [note: 'Hypertext Transfer Protocol version 2. Application layer protocol built on top of TCP. Used for modern web applications.']
  TLS [note: 'Transport Layer Security. Used for secure communication over TCP (HTTPS).']
  QUIC [note: 'Quick UDP Internet Connections. A modern transport protocol used for web traffic and other applications.']
  SIP [note: 'Session Initiation Protocol. Application layer protocol used for VoIP and real-time communication.']
  // Add other protocols as needed (e.g., DNS over UDP, specific application protocols)
}

Table "security"."open_ports" {
  "security_host_id" UUID [not null, ref: > "security"."hosts"."security_host_id", note: 'Identifier of the system with the open port.']
  "port_number" INTEGER [not null, note: 'Port number that is open.']
  "protocol" security.network_protocols [not null, note: 'Network protocol associated with the open port.']

  Indexes {
    (security_host_id, port_number, protocol) [pk, note: 'Composite primary key on system_id, port_number, and protocol. Ensures unique open ports.']
  }

  Note: 'Table storing information about open ports on systems, tracking network services and potential vulnerabilities.'
}

Table "security"."process_executions" {
  "security_process_execution_id" UUID [not null, pk, note: 'Unique identifier for the process execution.']
  "security_host_id" UUID [not null, ref: > "security"."hosts"."security_host_id", note: 'Identifier of the system where the process was executed.']
  "process_name" VARCHAR(255) [note: 'Name of the executed process.']
  "process_id" INTEGER [note: 'Process ID of the executed process.']
  "parent_process_id" INTEGER [note: 'Process ID of the parent process.']
  "start_time" TIMESTAMP(6) [note: 'Timestamp when the process execution started.']
  "end_time" TIMESTAMP(6) [note: 'Timestamp when the process execution ended.']
  "command_line" TEXT [note: 'Command line used to execute the process.']
  "user_name" VARCHAR(50) [note: 'Username of the user who executed the process.']

  Note: 'Table storing information about process executions, tracking application activity and system behavior.'
}

Table "security"."running_services" {
  "security_host_id" UUID [not null, ref: > "security"."hosts"."security_host_id", note: 'Identifier of the system with the running service.']
  "running_service_name" VARCHAR(100) [not null, note: 'Name of the running service.']
  "start_time" TIMESTAMP(6) [note: 'Timestamp when the service started running.']
  "status" VARCHAR(20) [note: 'Status of the running service (e.g., running, stopped).']

  Indexes {
    (security_host_id, running_service_name) [pk, note: 'Composite primary key on system_id and service_name. Ensures unique running services.']
  }

  Note: 'Table storing information about running services on systems, tracking system services and their states.'
}

Table "security"."system_stats" {
  "security_system_stat_id" UUID [not null, pk, note: 'Unique identifier for the system statistics record.']
  "security_host_id" UUID [not null, ref: > "security"."hosts"."security_host_id", note: 'Identifier of the system for which statistics are recorded.']
  "cpu_usage_percent" INTEGER [note: 'CPU usage percentage.']
  "memory_usage_gb" NUMERIC(5,1) [note: 'Memory usage in gigabytes.']
  "memory_total_gb" INTEGER [note: 'Total memory in gigabytes.']
  "disk_free_gb" INTEGER [note: 'Free disk space in gigabytes.']
  "disk_total_gb" INTEGER [note: 'Total disk space in gigabytes.']
  "timestamp" TIMESTAMP(6) [note: 'Timestamp when the statistics were recorded.']

  Note: 'Table storing system statistics, tracking resource usage and performance metrics.'
}

Enum "security"."system_type" {
  SERVER [note: 'General purpose server system']
  WORKSTATION [note: 'Office desktop computer']
  LAPTOP [note: 'Portable personal computer']
  VIRTUAL_MACHINE [note: 'Virtualized system running on a hypervisor']
  CONTAINER [note: 'Containerized instance such as Docker or Kubernetes pod']
  APPLIANCE [note: 'Specialized hardware/software combination for a specific purpose']
}

Enum "security"."agent_status" {
  ACTIVE [note: 'Agent is connected and functioning properly']
  INACTIVE [note: 'Agent is installed but not currently running']
  PENDING [note: 'Agent installation or activation is in progress']
  ERROR [note: 'Agent has encountered an error']
  DISCONNECTED [note: 'Agent has lost connection to management server']
}

Enum "security"."patch_status" {
  CURRENT [note: 'System has all latest patches (0-7 days)']
  UP_TO_DATE [note: 'System has recent patches (8-30 days)']
  OUTDATED [note: 'System is missing important patches (31-90 days)']
  CRITICAL [note: 'System is severely out of date (90+ days)']
  UNKNOWN [note: 'Patch status cannot be determined']
}

Enum "security"."compliance_status" {
  COMPLIANT [note: 'System meets all compliance requirements']
  NON_COMPLIANT [note: 'System fails to meet one or more compliance requirements']
  EXCEPTION [note: 'System has an approved exception to compliance requirements']
  UNKNOWN [note: 'Compliance status cannot be determined']
}

Table "security"."hosts" {
  "security_host_id" UUID [not null, pk, note: 'Unique identifier for the system.']
  "hostname" VARCHAR(255) [note: 'Hostname of the system.']
  "agent_identifier" VARCHAR(36) [note: 'Identifier of the agent installed on the system.']
  "ip_address_internal" INET [note: 'Internal IP address of the system.']
  "ip_address_external" INET [note: 'External IP address of the system.']
  "mac_address" VARCHAR(17) [note: 'MAC address of the system.']
  "system_type" security.system_type [note: 'Type of the system (e.g., server, workstation).']
  "os" VARCHAR(50) [note: 'Operating system of the system.']
  "os_version" VARCHAR(100) [note: 'Operating system version.']
  "last_seen" TIMESTAMP(6) [note: 'Timestamp when the system was last seen.']
  "agent_version" VARCHAR(50) [note: 'Version of the agent installed on the system.']
  "agent_status" security.agent_status [note: 'Status of the agent installed on the system.']
  "patch_status" security.patch_status [note: 'Status of system patches.']
  "last_patched" TIMESTAMP(6) [note: 'Timestamp when the system was last patched.']
  "compliance" security.compliance_status [note: 'Compliance status of the system.']
  "checked_out_date" DATE [note: 'Date when the system was checked out.']
  "asset_owner_name" VARCHAR(50) [note: 'Name of the asset owner.']
  "asset_owner_email" VARCHAR(50) [note: 'Email of the asset owner.']
  "patch_level" VARCHAR(50) [note: 'Patch level of the system.']
  "patch_update_available" BOOLEAN [note: 'Indicates if patch updates are available.']

  Note: 'Table storing information about systems, including hardware, software, and status details.'
}

Table "security"."usb_device_usage" {
  "security_usb_device_usage_id" UUID [not null, pk, note: 'Unique identifier for the USB device usage record.']
  "security_system_id" UUID [not null, ref: > "security"."hosts"."security_host_id", note: 'Identifier of the system where the USB device was used.']
  "device_name" VARCHAR(100) [note: 'Name of the USB device.']
  "device_type" VARCHAR(50) [note: 'Type of the USB device.']
  "connection_time" TIMESTAMP(6) [note: 'Timestamp when the USB device was connected.']
  "disconnection_time" TIMESTAMP(6) [note: 'Timestamp when the USB device was disconnected.']

  Note: 'Table storing information about USB device usage, tracking connection and disconnection times.'
}


Table "security"."cvss" {
  "cve" VARCHAR(20) [pk, note: 'Common Vulnerabilities and Exposures identifier. Primary key.']
  "attack_complexity_3" VARCHAR(5) [note: 'CVSS v3 Attack Complexity metric.']
  "attack_vector_3" VARCHAR(20) [note: 'CVSS v3 Attack Vector metric.']
  "availability_impact_3" VARCHAR(5) [note: 'CVSS v3 Availability Impact metric.']
  "confidentiality_impact_3" VARCHAR(5) [note: 'CVSS v3 Confidentiality Impact metric.']
  "integrity_impact_3" VARCHAR(5) [note: 'CVSS v3 Integrity Impact metric.']
  "privileges_required_3" VARCHAR(5) [note: 'CVSS v3 Privileges Required metric.']
  "scope_3" VARCHAR(10) [note: 'CVSS v3 Scope metric.']
  "user_interaction_3" VARCHAR(10) [note: 'CVSS v3 User Interaction metric.']
  "vector_string_3" VARCHAR(50) [note: 'CVSS v3 Vector String.']
  "exploitability_score_3" REAL [note: 'CVSS v3 Exploitability Score.']
  "impact_score_3" REAL [note: 'CVSS v3 Impact Score.']
  "base_score_3" REAL [note: 'CVSS v3 Base Score.']
  "base_severity_3" VARCHAR(10) [note: 'CVSS v3 Base Severity.']
  "access_complexity" VARCHAR(10) [note: 'CVSS v2 Access Complexity metric.']
  "access_vector" VARCHAR(20) [note: 'CVSS v2 Access Vector metric.']
  "authentication" VARCHAR(10) [note: 'CVSS v2 Authentication metric.']
  "availability_impact" VARCHAR(10) [note: 'CVSS v2 Availability Impact metric.']
  "confidentiality_impact" VARCHAR(10) [note: 'CVSS v2 Confidentiality Impact metric.']
  "integrity_impact" VARCHAR(10) [note: 'CVSS v2 Integrity Impact metric.']
  "obtain_all_privileges" BOOLEAN [note: 'CVSS v2 Obtain All Privileges metric.']
  "obtain_other_privileges" BOOLEAN [note: 'CVSS v2 Obtain Other Privileges metric.']
  "obtain_user_privileges" BOOLEAN [note: 'CVSS v2 Obtain User Privileges metric.']
  "user_interaction_required" BOOLEAN [note: 'CVSS v2 User Interaction Required metric.']
  "vector_string" VARCHAR(50) [note: 'CVSS v2 Vector String.']
  "exploitability_score" REAL [note: 'CVSS v2 Exploitability Score.']
  "impact_score" REAL [note: 'CVSS v2 Impact Score.']
  "base_score" REAL [note: 'CVSS v2 Base Score.']
  "severity" VARCHAR(10) [note: 'CVSS v2 Severity.']
  "description" TEXT [note: 'CVE description.']
  "published_date" DATE [note: 'CVE publication date.']
  "last_modified_date" DATE [note: 'CVE last modified date.']
  note: 'Stores Common Vulnerability Scoring System (CVSS) metrics for CVEs, including both CVSS v2 and v3.'
}

Table "security"."cpe" {
  "cve" VARCHAR(20) [ref: > "security"."cvss"."cve", note: 'Common Vulnerabilities and Exposures identifier. Foreign key referencing cvss.cve.']
  "cpe23uri" TEXT [note: 'CPE 2.3 URI string.']
  "vulnerable" VARCHAR(5) [note: 'Indicates if the CPE is vulnerable to the CVE.']
  note: 'Stores Common Platform Enumeration (CPE) information associated with CVEs.'
}

Table "security"."cve_problem" {
  "cve" VARCHAR(20) [ref: > "security"."cvss"."cve", note: 'Common Vulnerabilities and Exposures identifier. Foreign key referencing cvss.cve.']
  "problem" TEXT [note: 'Problem description related to the CVE.']
  "cwe_id" INTEGER [ref: > security.cwe.cwe_id, null, note: 'A reference to the related Common Weakness Enumeration, if it exists']
  note: 'Stores problem descriptions associated with CVEs.'
}

Table "security"."cwe" {
  "cwe_id" INTEGER [pk, note: 'Common Weakness Enumeration identifier. Primary key.']
  "name" TEXT [note: 'CWE name.']
  "description" TEXT [note: 'CWE description.']
  "extended_description" TEXT [note: 'Extended CWE description.']
  "modes_of_introduction" TEXT [note: 'Modes of introduction for the CWE.']
  "common_consequences" TEXT [note: 'Common consequences of the CWE.']
  "potential_mitigations" TEXT [note: 'Potential mitigations for the CWE.']
  note: 'Stores Common Weakness Enumeration (CWE) information.'
}

//
// APP MGMT
//

Table "app_mgmt"."architectures" {
  "app_mgmt_architecture_id" UUID [pk, note: 'Unique identifier for an approved architectural design.']
  "architecture_name" VARCHAR(255) [note: 'Name given to the architectural design.']
  "description" TEXT [note: 'Detailed explanation of the architectural design.']
  "approval_date" TIMESTAMPTZ [note: 'Date when the architectural design was officially approved.']
  "approved_by_id" INTEGER [note: 'Identifier of the employee who approved the design.', ref: > "enterprise"."associates"."enterprise_associate_id"]
  "documentation_url" VARCHAR(2048) [note: 'Link to the full documentation for the architectural design.']
  "status" VARCHAR(50) [note: 'Current state of the architecture (e.g., approved, deprecated, proposed).']
  "sdlc_process_id" UUID [ref: > "app_mgmt"."sdlc_processes"."app_mgmt_sdlc_process_id", note: 'Identifier for the software development lifecycle process this architecture aligns with.']
  "created_by_user_id" INTEGER [ref: > "enterprise"."associates"."enterprise_associate_id", note: 'Identifier of the employee who created the architectural design.']
  "modified_by_user_id" INTEGER [ref: > "enterprise"."associates"."enterprise_associate_id", note: 'Identifier of the employee who last modified the architectural design.']
  note: 'Table to store approved architectural designs and their key details.'
}

Table "app_mgmt"."sdlc_processes" {
  "app_mgmt_sdlc_process_id" UUID [pk, note: 'Unique identifier for a defined software development lifecycle process.']
  "process_name" VARCHAR(255) [note: 'Name of the software development lifecycle process.']
  "description" TEXT [note: 'Description of the steps and activities within the SDLC process.']
  "process_owner" INTEGER [ref: > "enterprise"."associates"."enterprise_associate_id", note: 'The individual responsible for the SDLC process.']
  "version" VARCHAR(50) [note: 'Version number or identifier for the SDLC process.']
  "documentation_url" VARCHAR(2048) [note: 'Link to the full documentation for the SDLC process.']
  "app_mgmt_team_id" UUID [ref: > "app_mgmt"."teams"."app_mgmt_team_id", note: 'Identifier for the team that manages this SDLC process.']
  note: 'Table to store software development lifecycle processes and their attributes.'
}

Enum app_mgmt.application_lifecycle_status {
  Development [note: 'Application is being actively developed, but not yet in production.']
  Pilot [note: 'Application is being used by a small group of users for testing and feedback.']
  Production [note: 'Application is in production and operating, but not accepting new features or major changes. Only bug fixes and minor updates are applied.']
  Deprecated [note: 'Application is still operational but no longer actively developed or enhanced. It may receive critical security patches.']
  DataMaintenance [note: 'Application is primarily used for data access and maintenance. Functionality is limited, and new features are not added.']
  Decommissioned [note: 'Application is retired and no longer operational. Data is not archived.']
  Archived [note: 'Application is retired and data is archived']
}

Enum app_mgmt.deployment_environments {
  OnPremises [note: 'Application is deployed on physical servers or virtual machines within the organization\'s own data center.']
  CloudPublic [note: 'Application is deployed on a public cloud platform (e.g., AWS, Azure, GCP).']
  CloudPrivate [note: 'Application is deployed on a private cloud infrastructure.']
  CloudHybrid [note: 'Application is deployed across a combination of on-premises and cloud environments.']
  Containerized [note: 'Application is deployed within containers (e.g., Docker, Kubernetes).']
  Serverless [note: 'Application is deployed using a serverless computing model (e.g., AWS Lambda, Azure Functions).']
  Edge [note: 'Application is deployed on edge computing devices or servers closer to the end-users.']
  // Add other environments as needed (e.g., Development, Staging, Testing)
}

Enum app_mgmt.application_types {
  Web [note: 'Web-based application accessible through a web browser.']
  Mobile [note: 'Application designed for mobile devices (e.g., iOS, Android).']
  Desktop [note: 'Application installed and run on a desktop computer.']
  API [note: 'Application Programming Interface, used for communication between software components.']
  Batch [note: 'Application that performs batch processing tasks.']
  Microservice [note: 'Small, independent service that communicates with other microservices.']
  Legacy [note: 'Older application that may be difficult to maintain or modernize.']
  SaaS [note: 'Software as a Service application, typically accessed via the web.']
  Database [note: 'Database system or application.']
  Middleware [note: 'Software that connects different applications or components.']
  Embedded [note: 'Software embedded in hardware devices.']
  // Add other types as needed (e.g., IoT, AI/ML, etc.)
}

Table "app_mgmt"."applications" {
  "app_mgmt_application_id" UUID [pk, note: 'Unique identifier for an application.']
  "application_name" VARCHAR(255) [note: 'Name of the application.']
  "description" TEXT [note: 'General description of the application\'s purpose.']
  "application_type" app_mgmt.application_types [note: 'Type of application (e.g., web, mobile, desktop).']
  "vendor" VARCHAR(255) [note: 'Name of the vendor if the application is purchased.']
  "version" VARCHAR(50) [note: 'Current version of the application.']
  "deployment_environment" app_mgmt.deployment_environments [note: 'Environment where the application is deployed (e.g., on-premises, cloud).']
  "operated_by_team_id" UUID [ref: > "app_mgmt"."teams"."app_mgmt_team_id", note: 'Identifier for the team responsible for the day-to-day operation of the application.']
  "maintained_by_team_id" UUID [ref: > "app_mgmt"."teams"."app_mgmt_team_id", note: 'Identifier for the team responsible for maintaining the application, including updates and fixes.']
  "created_by_team_id" UUID [ref: > "app_mgmt"."teams"."app_mgmt_team_id", note: 'Identifier for the team that initially created the application.']
  "application_owner_id" INTEGER [ref: > "enterprise"."associates"."enterprise_associate_id", note: 'Identifier for the individual responsible for communication with stakeholders, funding, budget, and strategy for the application.']
  "lifecycle_status" app_mgmt.application_lifecycle_status [note: 'Current stage in the application\'s lifecycle (e.g., development, production).']
  "date_deployed" TIMESTAMPTZ [note: 'Date the application was deployed to its environment.']
  "date_retired" TIMESTAMPTZ [note: 'Date the application was retired or decommissioned.']
  "architecture_id" UUID [ref: > "app_mgmt"."architectures"."app_mgmt_architecture_id", note: 'Identifier for the approved architecture the application adheres to.']
  "sdlc_process_id" UUID [ref: > "app_mgmt"."sdlc_processes"."app_mgmt_sdlc_process_id", note: 'Identifier for the SDLC process used to develop or manage the application.']
  "source_code_repository" VARCHAR(2048) [note: 'Link to the repository where the application\'s source code is stored.']
  "documentation_url" VARCHAR(2048) [note: 'Link to the application\'s documentation.']
  "created_by_user_id" INTEGER [ref: > "enterprise"."associates"."enterprise_associate_id", note: 'Identifier of the employee who initially created the application record.']
  "modified_by_user_id" INTEGER [ref: > "enterprise"."associates"."enterprise_associate_id", note: 'Identifier of the employee who last modified the application record.']
  "rto" INTERVAL [note: 'Recovery Time Objective (RTO): The maximum acceptable downtime for the application.']
  "rpo" INTERVAL [note: 'Recovery Point Objective (RPO): The maximum acceptable data loss for the application.']
  note: 'Table to store comprehensive information about software applications within the organization.'
}

Table "app_mgmt"."components" {
  "app_mgmt_component_id" UUID [pk, note: 'Unique identifier for a software component (e.g., library, module).']
  "component_name" VARCHAR(255) [note: 'Name of the software component.']
  "component_version" VARCHAR(50) [note: 'Version identifier for the software component.']
  "component_type" VARCHAR(100) [note: 'Type of component (e.g., library, framework, API, module). Also used for language-specific categorization (e.g., java-library, npm-package).']
  "vendor" VARCHAR(255) [note: 'Vendor or provider of the software component.']
  "app_mgmt_license_id" UUID [ref: > "app_mgmt"."licenses"."app_mgmt_license_id", note: 'Identifier for the license associated with the component.']
  "description" TEXT [note: 'Description of the component\'s functionality.']
  "created_by_user_id" INTEGER [ref: > "enterprise"."associates"."enterprise_associate_id", note: 'Identifier of the employee who initially created the component record.']
  "modified_by_user_id" INTEGER [ref: > "enterprise"."associates"."enterprise_associate_id", note: 'Identifier of the employee who last modified the component record.']
  "package_info" TEXT [note: 'Language-specific package information (e.g., Maven coordinates, npm package name, NuGet package ID).']
  "repository_url" VARCHAR(2048) [note: 'Link to the component\'s repository (e.g., Maven repository, npm registry, NuGet feed).']
  "namespace_or_module" VARCHAR(255) [note: 'Namespace or module name within the component (if applicable).']
  note: 'Table to store detailed information about software components (BOM).'
}

Enum app_mgmt.dependency_types {
  runtime
  build
  test
  development
  optional
  provided
  system
  import
  compile
  annotationProcessor
  // Add any other specific dependency types as needed
}

Table "app_mgmt"."component_dependencies" {
  "parent_component_id" UUID [ref: > "app_mgmt"."components"."app_mgmt_component_id", pk, note: 'Identifier for the component that depends on another component.']
  "child_component_id" UUID [ref: > "app_mgmt"."components"."app_mgmt_component_id", pk, note: 'Identifier for the component being depended upon.']
  "quantity" INTEGER [note: 'Number of times the child component is used by the parent.']
  "dependency_type" app_mgmt.dependency_types [note: 'Type of dependency (e.g., runtime, build, test).']
  note: 'Table to store component dependencies (BOM relationships).'
}

Table "app_mgmt"."application_components" {
  "app_mgmt_application_id" UUID [ref: > "app_mgmt"."applications"."app_mgmt_application_id", pk, note: 'Identifier for the application that uses the component.']
  "app_mgmt_component_id" UUID [ref: > "app_mgmt"."components"."app_mgmt_component_id", pk, note: 'Identifier for the software component used by the application.']
  "dependency_type" app_mgmt.dependency_types [pk, note: 'Type of dependency (e.g., runtime, build, test).']
  note: 'Table to store dependencies between applications and their software components.'
}

Enum app_mgmt.criticality_levels {
  no_impact [note: 'No impact: The relationship is not critical and its failure has no noticeable effect. Resolution timeframe: Not applicable.']
  minimal_impact [note: 'Minimal impact: The relationship is rarely critical, and its failure has a negligible effect on operations. Resolution timeframe: Within a week, if necessary.']
  minor_impact [note: 'Minor impact: The relationship is occasionally important, and its failure causes slight inconvenience or delays. Resolution timeframe: Within 1-2 business days.']
  moderate_impact [note: 'Moderate impact: The relationship is regularly important, and its failure disrupts some operations but workarounds are possible. Resolution timeframe: Within 4-8 hours.']
  significant_impact [note: 'Significant impact: The relationship is highly important, and its failure severely disrupts operations, requiring immediate attention. Resolution timeframe: Within 1-2 hours.']
  critical_impact [note: 'Critical impact: The relationship is essential, and its failure leads to catastrophic disruption or complete stoppage of operations. Requires urgent and immediate resolution. Resolution timeframe: Immediately (within 15-30 minutes).']
}

Enum app_mgmt.relationship_types {
  AUTHORIZATION [note: 'Relies on to verify user permissions for accessing resources or functionalities.']
  AUTHENTICATION [note: 'Relies on to verify the identity of users or other applications.']
  DATA_ACCESS [note: 'Requires to retrieve, store, or process specific data.']
  SERVICE_DEPENDENCY [note: 'Requires to provide a specific business or technical service.']
  API_INTEGRATION [note: 'Utilizes its API to access its features or data.']
  CONFIGURATION_PROVIDER [note: 'Requires to obtain necessary configuration settings or parameters.']
  LOGGING_SERVICE [note: 'Utilizes to store and manage logs or audit trails.']
  MONITORING_SERVICE [note: 'Requires to provide monitoring, health checks, or performance metrics.']
  CACHING_SERVICE [note: 'Utilizes as a caching layer to improve performance.']
  MESSAGING_QUEUE [note: 'Utilizes to enable asynchronous communication via a message queue.']
  REPORTING_SERVICE [note: 'Requires to generate reports or provide analytical insights.']
  DATA_PROCESSING [note: 'Requires to perform specific processing or transformation of data.']
  UI_EMBEDDING [note: 'Incorporates and depends on its user interface component or part of the UI.']
  WORKFLOW_TRIGGER [note: 'Depends on to initiate or trigger a workflow or process.']
  EVENT_SUBSCRIPTION [note: 'Depends on to receive and react to published events.']
  NOTIFICATION_SERVICE [note: 'Utilizes to send notifications to users or other systems.']
  IDENTITY_MANAGEMENT [note: 'Relies on for managing user identities, profiles, and related information.']
  PAYMENT_PROCESSING [note: 'Utilizes to handle payment transactions.']
  STORAGE_SERVICE [note: 'Requires to store or retrieve files or other data.']
  SEARCH_SERVICE [note: 'Utilizes to perform search operations on a dataset.']
  SECURITY_SCANNING [note: 'Relies on to perform security vulnerability scans.']
  AUDIT_LOGGING [note: 'Utilizes to store audit logs for security and compliance.']
  RESOURCE_MANAGEMENT [note: 'Depends on for managing shared resources like databases or compute instances.']
  TASK_SCHEDULING [note: 'Utilizes to schedule and execute background tasks or jobs.']
  CONTENT_DELIVERY [note: 'Requires to deliver static content like images or videos to users.']
}

Table "app_mgmt"."application_relationships" {
  "app_mgmt_application_relationship_id" SERIAL [pk, increment, note: 'Primary key for application relationships']
  "application_id_1" UUID [ref: > "app_mgmt"."applications"."app_mgmt_application_id", note: 'Identifier for the first application involved in the relationship.']
  "application_id_2" UUID [ref: > "app_mgmt"."applications"."app_mgmt_application_id", note: 'Identifier for the second application involved in the relationship.']
  "relationship_type" app_mgmt.relationship_types [note: 'Type of relationship between the applications (e.g., depends on, uses data from).']
  "description" TEXT [note: 'Additional explanation about nature of relationship.']
  "criticality" app_mgmt.criticality_levels [note: 'Criticality score of the relationship, indicating the impact of its failure.']
  note: 'Table to store relationships between applications and their criticality levels. Applications may have many relationships, even of the same type. They are only differentiated through the description.'
}

Enum app_mgmt.license_types {
  MIT [note: 'A permissive license that allows reuse within proprietary software provided all copies of the licensed software include a copy of the MIT License terms and the copyright notice.']
  APACHE_2_0 [note: 'A permissive license that provides a broad grant of patent rights.']
  BSD_2_CLAUSE [note: 'A permissive license with a simple two-clause condition.']
  BSD_3_CLAUSE [note: 'A permissive license with an additional non-endorsement clause.']
  ISC [note: 'A permissive license similar to the BSD and MIT licenses.']
  GPL_2_0 [note: 'A strong copyleft license that requires derivative works to be licensed under the same terms.']
  GPL_3_0 [note: 'A strong copyleft license that addresses some of the issues in GPLv2, such as patent grants and tivoization.']
  LGPL_2_1 [note: 'A weaker copyleft license that allows proprietary software to link to the library.']
  LGPL_3_0 [note: 'A weaker copyleft license, similar to LGPLv2.1 but with some updates.']
  AGPL_3_0 [note: 'A copyleft license designed for network use, requiring that the source code of the service is available if modified versions are publicly used.']
  PROPRIETARY [note: 'Software license that restricts the rights of the user to use, modify, or share the software.']
  CC_BY_4_0 [note: 'Creative Commons Attribution 4.0 International License. Allows others to distribute, remix, adapt, and build upon the work, even commercially, as long as they credit the original creator.']
  CC_BY_SA_4_0 [note: 'Creative Commons Attribution-ShareAlike 4.0 International License. Allows others to remix, adapt, and build upon the work even for commercial purposes, as long as they credit the original creator and license their new creations under the identical terms.']
  CC_BY_NC_4_0 [note: 'Creative Commons Attribution-NonCommercial 4.0 International License. Allows others to remix, adapt, and build upon the work non-commercially, and although their new works must also acknowledge the original creator, they don’t have to license their derivative works on the same terms.']
  CC_BY_NC_SA_4_0 [note: 'Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. Allows others to remix, adapt, and build upon the work non-commercially, as long as they credit the original creator and license their new creations under the identical terms.']
  CC_BY_ND_4_0 [note: 'Creative Commons Attribution-NoDerivatives 4.0 International License. Allows for redistribution, commercial and non-commercial, as long as it is passed along unchanged and in whole, with credit to the original creator.']
  CC_BY_NC_ND_4_0 [note: 'Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License. Allows for redistribution, non-commercial, as long as it is passed along unchanged and in whole, with credit to the original creator.']
  MPL_2_0 [note: 'Mozilla Public License Version 2.0. A weaker copyleft license that aims to balance the interests of both proprietary and open-source developers.']
  EPL_2_0 [note: 'Eclipse Public License Version 2.0. A permissive license with some copyleft features.']
  CDDL_1_1 [note: 'Common Development and Distribution License. A permissive license with some copyleft features.']
  CPL_1_0 [note: 'Common Public License Version 1.0. A permissive license with some copyleft features.']
  APPL_2_0 [note: 'Apple Public Source License Version 2.0. A permissive license.']
}

Table "app_mgmt"."licenses" {
  "app_mgmt_license_id" UUID [pk, note: 'Unique identifier for a software license.']
  "license_name" VARCHAR(255) [note: 'Name of the software license.']
  "license_type" app_mgmt.license_types [note: 'Type of software license (e.g., MIT, GPL).']
  "license_text" TEXT [note: 'Full text or a summary of the software license terms.']
  note: 'Table to store information about software licenses.'
}

Table "app_mgmt"."application_licenses" {
  "app_mgmt_application_id" UUID [ref: > "app_mgmt"."applications"."app_mgmt_application_id", pk, note: 'Identifier for the application that uses the license.']
  "app_mgmt_license_id" UUID [ref: > "app_mgmt"."licenses"."app_mgmt_license_id", pk, note: 'Identifier for the software license used by the application.']
  note: 'Table to store associations between applications and the licenses they use.'
}

Table "app_mgmt"."teams" {
  "app_mgmt_team_id" UUID [pk, note: 'Unique identifier for a development or management team.']
  "team_name" VARCHAR(255) [note: 'Name of the team.']
  "description" TEXT [note: 'Description of the team\'s responsibilities.']
  "team_lead_id" INTEGER [ref: > "enterprise"."associates"."enterprise_associate_id", note: 'Identifier of the team lead from the enterprise associates table.']
  note: 'Table to store information about development and management teams, including team lead association.'
}

Table "app_mgmt"."team_members" {
  "app_mgmt_team_id" UUID [ref: > "app_mgmt"."teams"."app_mgmt_team_id", pk, note: 'Identifier of the team.']
  "enterprise_associate_id" INTEGER [ref: > "enterprise"."associates"."enterprise_associate_id", pk, note: 'Identifier of the team member from the enterprise associates table.']
  "function" VARCHAR(255) [note: 'Function or role of the team member within the team.']
  note: 'Table to store the associations between teams and their members, including member functions.'
}
